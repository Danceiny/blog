<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用Hexo搭建个人博客站点全纪录]]></title>
    <url>%2F%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E5%85%A8%E7%BA%AA%E5%BD%95.html</url>
    <content type="text"><![CDATA[需求澄清 个人博客。 静态的即可。 可由GitHub Pages或者Coding.net Pages服务托管。 要有域名，好记。 博客中有图片，需要稳定的存储。 维护与操作系统平台无关（因为自己各种操作系统切换）。 技术选型Hexo + GitHub/Coding Pages双托管 + 腾讯云解析 + 七牛云图片存储 开始配置安装Hexo首先安装npm，使用npm安装hexo。 npm Hexo 主题Next安装：http://theme-next.iissnan.com/getting-started.html GitHub仓库地址：https://github.com/Danceiny/blogPages地址：https://danceiny.github.io/blog添加CNAME文件，指向blog.cannot.cc，Pages地址重定向到该域名。 Coding同上。 腾讯云解析已有域名（已备案）: cannot.cc 添加二级域名: blog.cannot.cc 添加CNAME类型的记录，记录值设置为danceiny.github.io. 把www.blog.cannot.cc记录到pages.coding.me. 顺便把cannot.cc解析到 http://danceiny.github.io 了。（原来在Github上的个人主页）。有空再修改。 注意： 腾讯云解析的记录值是比较需要关注的。 www是个神奇的东西，http://blog.cannot.cc 和 http://www.blog.cannot.cc 是不一样的两个东西。 七牛图床https://portal.qiniu.com/bucket/有很多官方工具可以使用，命令行，GUI，但是目前我感觉不太用户友好。访问秘钥就是两个：Access Key和Secret Key。Bucket像是GitHub里的仓库吧，我叫它对象存储仓库。 阅读次数统计 可在Next中配置，使用leancloud.cn 参见博客 社交分享直接在Next中开启jiathis即可。不支持https是个隐患。 站点搜索可选的几个服务都是收费的，所以我选了本地的搜索。按照Next的教程配置即可。 百度联盟http://union.baidu.com申请，未通过，网站内容还是少了点。 百度统计站点访问统计。百度统计的账号和百度联盟账号可以不一样，不过还是统一账号比较好，方便管理。 谷歌分析跟帖回复评论使用Facebook的评论系统。 网易云跟帖未引入，不过看起来效果不错。 SEO Hexo优化之为外部链接添加nofollow https://liuzhichao.com/2016/hexo-auto-nofollow.html https://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/ hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一 站点地图通过npm下载插件。有专门针对百度的。可做SEO。 sitemaps.xml RSS订阅通过npm下载插件。 Facebook Audience广告投放未搞定。 Hexo部署https://hexo.io/docs/deployment.html 可部署到百度，方便搜索引擎收录。 CNAME覆盖问题https://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/ 利用分支备份Hexo项目源代码在博客对应的GitHub项目上创建Hexo分支。Pages服务用的是master分支。 yaml重要配置文件不应该上传到公开项目。 去掉post的url中的日期permalink: :title.html 其他优秀的同类型博客http://litten.me/]]></content>
      <categories>
        <category>DOSOMETHING</category>
      </categories>
      <tags>
        <tag>个人网站</tag>
        <tag>博客</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[C语言入门奇葩说-2]]></title>
    <url>%2FC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%A5%87%E8%91%A9%E8%AF%B4-2.html</url>
    <content type="text"><![CDATA[表达式和运算符关于左值、右值和布尔值。 几个重要概念左值、右值、赋值、=和==能放到等号左边的通常在内存中都有一个能确定下来的位置；而放到等号右边的都必须有一个值。从这句话，就可以知道所谓=，即赋值，与传统数学符号系统里面的=，在含义上的差别是很大的。传统的等于号，对应于C语言的==。C语言的=，是把它右边的一个确定的值，赋给左边的一个“空箱子”（我说的空箱子就是人们通常说的内存位置）。这两个符号和概念不能混淆，因为考试经常考。 注释前面其实看的也挺多了，注释符号有两种，行注释//和块注释/*...*/。这个其实很好懂，在某一行里，//后面的，都是注释；在某一个文件里，/*和*/中间的，都是注释。那么注释是什么呢？笨蛋啊，读书笔记啊懂么。前面提到过编译器，编译器看到注释符号，自动就把注释给踢掉了，人家不翻译注释。这个就好像你有一本书写满了批注，找个翻译官来翻译，翻译官当然是翻译正文，哪管你写得歪歪扭扭的批注呢。所以无论你在注释里写什么，都不会报错。 By the way，注释的作用，和读书笔记一样。——怕以后看不懂。。。。。 数组、矩阵由于本人在学习C语言之前学过《线性代数》这门课，所以对这两个概念的理解和转换毫无压力。事实上我认为对这两个概念的理解对C语言是非常非常有帮助的。事实上数组这块是C语言的重点，有用，必考，考得特多。经常说几维数组，有点玄乎，但是略微知道矩阵的，就知道这两个是多么相似，而且方便理解了。所以，本人建议学习一下《线性代数》的第一章。里面很多知识，可以很自然地移植到C语言里关于数组的运算上来。 内存地址、指针这个属于比较高级的内容，但是二级C考试也考，考得还不少，不过一般都是选择题居多。先说内存地址，这个概念我认为是C语言（以及一系列C系语言，以及我没有接触过的其他语言）的核心。计算机毕竟是电子设备，软件不是虚无的，而且搭建在一定的硬件条件上的，这个内存地址，就是比较硬的——大地都是硬的~ 对于初学者，一脸懵逼是必然的，但是可以想象有一块莽莽苍苍的大草地，然而你却想在上面种一棵树！！！ 你买来了小树苗，这个小树苗就是你的右值。 你有一个小园丁，这个小园丁就是你的左值。 你对小园丁说，在北纬32°东经127°海拔1024m处，有一块空草地，因为我特么想在上面种一棵树，我又不能到那里去，所以我把这块土地给你——这就是int xiaoyuanding;//声明变量，由于没有初始化，此时这个变量是没有确定的内存地址的——这时候小园丁还没有去到那块土地上~，然后，嗯，树苗给你，把它种上去——xiaoyuanding=XIAO_SHU_MIAO;//变量初始化，小园丁接到你的指令，就去那块土地了，所以这时候就有确定的内存地址了——北纬32°东经127°海拔1024m处。 整个过程也可以快点完成，不拖沓——int xiaoyuanding=XIAO_SHU_MIAO; 命名规范什么需要命名？变量(包括一般的数值变量、数组、指针）和函数——这个是我自己临时想到的，可能不完善（但是需要一个名字来称呼不是很理所当然么）。 关于命名，有一些是死规定，不能触犯的。比如关键词不能拿来命名，不能以数字开头，不能用-（因为看起来就是减号），不能……所有这些，请查阅权威性文档——教材和网络。还有一些是习惯。比如有驼峰式命名法， getMax 这个名字就是驼峰式命名，与之对应的就是get_max。另外，像常量通常全部用大写，比如INT_MAX。 不过最重要的一点，还是要借鉴中国古代人取名，取字，取号，取谥号，要有意义，要能概括这个人（谥号就是用来概括一些名人大贤的）。所以你看到上面这些我取的名字，是不是一看就知道它们代表什么含义咯。这个没有具体的要求，所以可以形成自己的风格（代码风格的一个重要组成部分，另一部分是括号的位置和空格缩进）。 矩阵元素最大值1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;int main( )&#123; int i, j, c, max ; /* static是一个修饰符，静态的意思，至于这个静态在C语言里面有什么含义，可以百度。 尤为重要的，static的一个是作为计数次数的变量修饰符，这是一种比较经典的C语言考题题型。 进阶的，在我的这篇文章里，也有提到一点&lt;http://huangzhen.farbox.com/post/cyu-yan-dian-di/chapter7-han-shu-mo-kuai-hong-ding-yi&gt; 摘录几点（可能有点抽象）： 静态存储区和栈不同，不会随着函数的退出而消失。事实上，静态存储区的变量会和整个程序的寿命一样长。 static的第二个特性，是信息隐藏，static变量只在定义它的范围内可见，在其他范围内不可见。这也是static变量与全局变量的区别，虽然他们被保存在同一块内存区域。 如果static用来修饰函数，这个函数只在当前的.c文件中可见，这样就可以在不同的.c文件中定义同名函数而不冲突。 */ static int a[3][4]=&#123;&#123;6,-5,11,3&#125;,&#123;8,9,4,7&#125;,&#123;2,13,1,-10&#125;&#125;;//这是一个二维数组，通过大括号&#123;&#125;聚合在一起 for (i=0; i&lt;=2; i++)&#123;//二维数组a可是看成是一个3x4矩阵，这里i从0到2，可以看作是循环遍历矩阵的每一行（3行4列） max=a[i][0]; //首先假定每行的第一列元素是最大值 c=0;//c是column的首字母，代表列数 for ( j=0; j&lt;=3; j++)&#123;//在每一行里，开始循环遍历列了，每一行都有4列。 if (a[i][ j]&gt;max) &#123;//假定的最大值比这个a[i][j]还小？！ max=a[i][ j]; //那么最大值就是这个a[i][j]了！ c=j;//记录这个新的最大值的列数 &#125; &#125; printf(&quot;max=%2d,row=%d,column=%d\n&quot;,max,i+1,c+1);//这一行的最大值找到了，它的行号和列号我们也知道 &#125; return 0;&#125;]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言入门奇葩说-1]]></title>
    <url>%2FC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%A5%87%E8%91%A9%E8%AF%B4-1.html</url>
    <content type="text"><![CDATA[什么是程序，什么是代码，什么是语言，什么是编程程序是一个很老的词，我们可以联想到流程、程式、表达式、顺序等词语。 代码也是一个很老的词，码是符号，代是说这种符号代表了某种意思。文字就是一种代码。 语言也是一个很老的词，说的写的，就是语言。 以上和编程联系起来，就从一个很老的世界，跳入了一个新的世界——从计算机编程的角度讲，这一切不过只有几十年的历史而已。比如C语言的创始人好像还没死欸。 我理解的编程就是，面对现实世界中的某些问题——尤其是单调乏味有限有规律的问题，人们为了提高效率、拒绝重复等原因，依托现代计算机等好用的硬件，又借用别人开发好的计算机操作系统，并利用与某门编程语言相适应的一整套开发工具，最后用键盘和鼠标等输入设备，写小说一样写代码，写完要检查对不对——自己可以检查，也可以搬出你所利用的开发工具中的某个东东帮忙检查，这个检查过程通常我们称作测试，测试完了就说明你写对了——当然没有语病是不够的，你的小说还应该要有一定的主题，要表达一定的情感，要有确定的目的，如果没有，那仍然是一篇失败的小说。所以最后，和最开始，编程就是为了解决那个问题而来。 现在给你出第一个问题，假如你是小学生高斯，你老师让你去做题，算1+2+3+…+100。可是你没有高斯那么聪明。旁边的小朋友1+2=3，3+3=6，6+4=10，…，中间不小心忘了、写错了，又重头再来，最后终于赶在日落之前算出来了，等于4050。可是你有一台计算机。这时候，你设想了一个这样的“算法”：所求的和最开始是0，第一次加1，第二次加2，第几次就加多少，总共加一百次就好了。那我有一百个仆人，他们每个人加一次，我只要问最后一个仆人，就知道结果是多少了。这时候你又穿越到高中的数学课堂，老师正在讲流程图。嚄，然后你敲下：12345678910#include&lt;stdio.h&gt;int main()&#123; int i; int sum=0; for(i=1;i&lt;=100;i++) sum += i; printf(&quot;哈哈哈，我一定比高斯算得还快！答案是%d&quot;,sum); return 0;&#125; 说实话，这个程序够我讲半天了。但是呢，根据马克思的矛盾论，我们要先抓住主要矛盾的主要方面。 第一行，（注意，写代码的时候我们经常说多少行，这和小学时候学语文差不多吧，中心思想在某篇课文第几行？）在学习C语言的第一个月里，第一行请照抄。根据英文翻译，可以推测这是包含个啥对不对。俗话说的好，没有旁征博引的文章怎么能称得上文章呢。 第二行，关键的地方了，关键在第二个单词，main，尼玛这是个大写的关键啊，但是呢，这个main不能大写。。。。。这个main啊，是整个程序的入口，是大门。你要去别人的家里，总得从大门进去吧。想起高中的程序框图没有，这个main就是那个开始！——所以，每个程序都有一个main。 第三行，怎么就一个大括号呢？等等再看。 第四行，int，好眼熟，i又是啥？要我说呢，int就是一个帽子，在第二行这顶帽子给main戴上了，现在又给i戴上了。这顶帽子啥意思暂时不用管。 第五行，和上面一行长得好像，sum应该是和吧，sum=0欸。 第六行，有个for，这个介词啥意思？又是int，括号里面i出现了三次！！！还1，100，++的。猜一猜，前面不是介绍过从1加到100的算法吗？ 第七行，+=是什么鬼符号？不懂。 第八行，print是打印的意思！！哈哈，英语水平真是高啊，后面加个f，应该是函数、功能function的意思吧。那么，就是说它有打印的功能咯？打印啥呢？这不是用一个括号给括起来了嘛。前面汉字好懂，中间%d不懂，最后又有一个sum，再看看整句话，那个%d是不是就是sum呢。 第九行，return是返回的意思！返回0？这是什么鬼。——这个鬼好神秘的~ 第十行，又是一个大括号。嚄！是右边的大括号！！还记得第三行的大括号吗，他们不是cp么。。。cp怎么能分开呢，他们可是生生世世在一起永远不分离的。——不过一般都是异地恋呢。 OKay，程序代码分析完毕。就十行，比旁边小伙伴从1加到100写99行算式总归是精简了好多呢。但是这特么没有告诉我们结果啊！现在，我再说几个重点： C语言是一门编译型语言，写好的代码，一般是存储在一个名为NAME,后缀为c的NAME.c文件中，但是这个文件需要经过编译，才能被计算机所认识。来做这个编译工作的——其实就是翻译，叫做编译器，compiler。 编译好之后，然后就可以生成了——好比小说写好后出版。 然后就可以运行了，run。 然后就可以看到程序的结果了——谨记，编写一个程序，肯定是希望它有输出的，汇报总该要有，总不能默不作声吧，那样谁知道它到底干了些啥。 以上是我归纳的简化版过程——真实的过程是比较复杂的。但是这个简化版够用了。 以上部门仍然是为了勾勒一个初步的印象，至于具体的学习，请看下一部分——入门。 入门我无意在这里重复所有C语言教材都会有的说教部分。下面我点几个需要仔细阅读教材中相关内容的东东： 关键词，这个不多，就是几十个英文单词罢了，过目一遍，以及什么是关键词； 数据类型，比如int，float，char； 运算符，比如+,-,*,/,%,;包括其他一些标点，比如,,;,{,[… 表达式，例如3+4,x+3; 控制结构，例如while,for,if。主要就是这两个循环和一个如果。 printf和scanf函数。打印，扫描。输出，输入。 别看只有6点，这几乎是你需要学习的六成内容了。现在的话，可以马上去翻一翻目录，找到有关以上6点的章节（目录没找到那也不要紧，还可以上网），认真仔细地阅读一遍，标出你认为的重点，尤其是一些表格和definition。然后再阅读一遍本文。然后详细地阅读刚刚看过的教材中的部分。 实践出真知请打开VC6.0，新建一个.c文件，把上面那个跟高斯比赛的程序代码拷贝到编辑框，保存，然后在VC6.0的面板上，找到一个感叹号！，点击这个按钮，程序就可以运行啦。注意两点，鼠标悬浮在感叹号上面的时候，注意看显示出来的解释；点击感叹号之后，注意看编辑框的下面那个框里面发生了什么。如果报错了，不好意思，我的程序有一点问题，请通知我。 高级一点点的下面的程序，可能乍看之下还有点难，放在这里只是让你有个对照。这个程序的功能是转置一个矩阵。如果学过线性代数的话，你可以很快理解这个过程。不理解也不要紧，因为这个程序里面出现的东西都是以后经常见到的，早点见面可以熟悉一下脸嘛。1234567891011121314int main( )&#123; static int a[2][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;; static int b[3][2], i, j; printf(&quot;array a:\n&quot;); for (i=0; i&lt;=1; i++) &#123; for ( j=0; j&lt;=2; j++) &#123; printf(&quot;%5d&quot;,a[i][ j]); b[ j][i]=a[i][ j]; &#125; printf(&quot;\n&quot;); &#125; printf(&quot;array b:\n&quot;); for (i=0; i&lt;=2; i++) &#123; for ( j=0; j&lt;=1; j++) printf(&quot;%5d&quot;,b[i][ j]); printf(&quot;\n&quot;); &#125;&#125; 顺便，有木有觉得上面这个程序很丑？那是因为，这不是我写的。]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言入门奇葩说-0]]></title>
    <url>%2FC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E5%A5%87%E8%91%A9%E8%AF%B4-0.html</url>
    <content type="text"><![CDATA[About！！！这个部分略过也没有大碍的。可以直接从关于读书开始看起。！！！ 有个小伙伴加电脑白痴说要考二级，问我要不要报培训班。我听了当然觉得很愚蠢。如果我没有考过C语言的二级，我或许不敢发表什么定性的评价。可是我是考过计算机等级考试二级C语言的男人啊。当然没必要报啥培训班了。我当时就想说，C语言啊，还不如我来教呢。我当然不是什么大神，离大神大概有银河系的思念的距离吧。 但是既然有这个想法，肯定是有我的考虑的。第一个，也是最重要的原因，最近在读一本C语言的书，赵岩的《C语言点滴》。这本书可以说很大程度上改变了我对C语言教材、参考书的刻板看法。因为这本书实在是太有趣了。具体介绍这里就不展开了。所以这本书也就激励我，用这本书的思维，去述说C语言，让一个完全没有概念的小白理解C语言。因为，白居易说得好啊。白居易说了啥我也不知道。我只知道白居易的诗有个很大很大的特点。 另外吧，从去年年底开始接触的一些东西，基本上都是用的C/C++。自然还要接触很多，更加需要温习、深入。而且老师当时就说了，你们应该把这些个项目的工作原理跟你们父母讲得明白，那才是真的明白了。 还有吧，感慨自己学C语言时间太短，未能及时领悟它的博大精深，又走了许多弯路。主要也是因为自己当初缺乏指导。 下面简单说下我当初的入门之旅吧。 也算是我写给自己的一个回顾吧。 计算机背景知识首先当然要介绍这个，可以说这个是必要的先修知识。毕竟C语言可是跑在计算机（包括许多你不认为是计算机的小小的计算机）上的。小学一年级的拼音学得很好。大概四年级的时候把小学阶段的字都差不多认全了。小学五年级开始上网。网吧。单机游戏。侠盗飞车，CS，暴力摩托。QQ加陌生人好友聊天。（这时候拼音学的好就派上用场了）这时候好像学校也开了电脑课，好像就是老师在上面讲些最基础的知识和PPT,WORD这样的基本操作，我印象最深刻的就是看到老师用五笔打字，按了四个键就出来一大串字，觉得好牛啊。后来自己操作的时候就去做PPT（其实就是创建一个PPT文件然后写个标题画个图，反正不懂随便点点）。六年级开始逛门户网站。那时候热爱军事，战斗机。大概就是小学毕业那会嚷嚷着想买个游戏机。家里人不肯。后来折衷买了个学习机。其实就是带键盘的游戏机。那时候我老姐差不多上大学了。她让我去练打字，学五笔。花了一个月把五笔学会了。当时我真的挺佩服自己的，因为五笔字根口诀并不会背，只是跟着打字软件学习，但是大部分字都能打得出来。以及后来我不会什么方法却学会了拧魔方差不多一个道理，我用的是模糊记忆法。（其实平常读书也都是这样浑浑噩噩）初中电脑课我就一直玩金山打字那个警察追小偷，不断刷新纪录。初二的时候老姐把不要的电脑给我了。我玩了一个暑假的游戏，各种小游戏、单机游戏玩了个遍差不多（因为家里从来没有网）。暑假快结束的时候发现一个超好玩的篮球游戏。然后我的整个初三就在玩这一个游戏。在学校住宿，晚上请假回来玩游戏。有时候还通宵（我的人生第一个通宵啊）。通宵怕老妈知道我在玩电脑，就把电脑放在被窝里面玩，好热啊，电脑温度太高，然后就崩了几回。我只记得一次是我拿去修的，重装系统。当时电脑店里面那个口吃问我装win7还是xp，我问有什么区别，他说win7是新出的系统，xp要稳定些，我说那xp吧。看他一点也不熟练地给我装系统，满屏幕全他妈是我看不懂的英文，我好佩服这个口吃（好像还有点瘸）。他要价30块。我借口说没带那么多，给了26，他也收了。然后顺理成章的成绩直线下降，对学习也越来越没有兴趣。那时候顺便还用酷狗播放器制作歌词，改编歌词放进去，然后拷贝到电子词典里面放歌看歌词，好不快活。高中继续玩那个游戏。不过一中离家太远了，我又不能把笔记本带学校去。去网吧也基本上去的是高中旁边的学校。初三之后就再也没有练过打字了，后面所有对电脑的接触就是上网，看新闻，打游戏。大一说不让带电脑。一开始也没敢带。国庆时候回去把电脑带来了，还是打那个游戏。打了这么多年都不会腻，我觉得这一定是真爱。高二暑假买了个智能手机，高三玩手机比较多，毕竟那时候老班对手机比较宽容。高二开始看美剧，第一部就是《越狱》，无法自拔。高三为了练听力，看《生活大爆炸》。忘了说一点，大学之前的网吧上网经历，我因为有一台不能联网的笔记本，和一个可以放音乐的电子词典，和一个手机，所以我每次都带了U盘，去下载视频啊音乐啊小说啊之类的东西。所以这个经历也成为了我的一个习惯。现在看来还是不错的经历。因为那时候就把很多下载网站摸得还算比较熟了。像国内大部分下载站，都有无数的广告诱惑你去下载，我那时候上了无数的当，自然就摸得很清楚了。但是由于英语水平有限，对国外的网站基本从未接触过。大一继续打游戏看美剧。大一上那段时间，一有时间在寝室里面呆着我就看美剧。快期末的时候电脑挂了。拿去检查说可能是主板坏了，要修的话划不来，毕竟是这么老旧的电脑了。幸好在期末之前一段时间挂了，我有时间复习，所以那次期末考也是目前为止大学考得最好的……大一寒假的时候，研究生班主任在班群里面说，下学期要学C语言了啊，然后发了一个PDF，让我们看看。我好奇地打开看了下，一脸大写的萌逼啊有木有。所以后来我特别能体会新手的痛苦。我大概看了那本书的第一章，看完之后完全不知道这是在说啥。所以就没看了。大一下开学后不久我买了电脑。对电脑完全不懂啊，我姐也不太懂。问同学买了啥，那给我来个同款吧。 学校开的C语言课开始上C语言课了。我住东边，上课在西边。我又是一脸大写的萌逼啊。老师鼓励带电脑上课，我特么不难背么。一台笔记本也有几公斤啊。第一次C语言上机课很快就开始了。我拿了还没翻过的教科书去上课。按照老师指示的，打开VC6.0,新建一个cpp文件，往编辑框里面写代码。——我当然不会写什么代码，我照着书的例子敲的。然后照指示保存，再按一个键（这个键的功能就是编译+运行，这个之后再说），妈蛋结果不通过，报了好多error。我当时就怒了，辛辛苦苦照着教科书打字那么久，结果却不能运行！！！当时隔壁坐了个编程大神。大一认识的时候他说他高中就参加过编程比赛拿过奖，一来就说准备转计算机学院的。我问他这个程序咋不能运行啊。他看了一下，帮我又编辑（其实没有修改一个字符，全都是排列组合的操作）了一番，然后就运行成功了。我当时就佩服得五体投地。这也让我开始不迷信书籍。事实证明，所有的示例代码都是有一定的前提假设才是正确的 所有的示例代码都是有一定的前提假设才是正确的 所有的示例代码都是有一定的前提假设才是正确的自此发奋学习C语言。第一件事当然就是回到自己的电脑上把VC6.0给装了。这个应该来说是很多人学习C语言的第一步，但是却难倒了很多人。因为VC6.0是一款很老的软件，在当前主流的操作系统win7,win8.1（那时候win10还没正式出来）里面不能不经修改地正常运行。这是一个兼容性问题。但是网上的解决办法也很多。因为有之前在网吧搜资源下载的经历，我肯定直接百度，百度经验第一篇就成功帮我解决了这个问题。VC6.0顺利地跑在了我的win8.1上。 然后就是看书，但是因为前车之鉴，我并没有把书上的代码敲一遍跑一下试试。不过我花了两周时间（上课也看）把教科书的前面大部分看完了。这之后老师开始每周布置编程题作业。我其实也并不会做那些题目。代码都是靠百度。不过能顺利把作业交了不就好了么。当时很多人连百度都没用上，直接把别人的作业改个名字就交了。大概又过了两三周，把教科书看完了。之后就没学了。平常作业就是百度一下，然后缝缝补补。这时听了个讲座，有个学长说他一个寒假自学了C++，觉得C++真的好有用。我学了C还没觉得C多有用，所以这时候我就跑去学习C++。当时也是机缘巧合，正好混了个工作室，在工作室里面玩的时候看到里面有一本C++的大部头书，老外写的，中国人翻译的。就借来看。大概看了个把月，把大部分看完了。又过了快一个月，全部看完了。这回我把书上的示例代码都敲过一遍。有的可以运行，也有的有点问题。但是我都没管。把书看完了就行了。前面没有说的一点就是，我上过四次C语言课之后，大家都觉得老师讲得太水了，就不去上课了。上机课也太水了，其实是让我们做编程作业的。但是大家都是百度，去机房和在宿舍没啥区别，所以后来也就不去上机了。 关于读书那么我是怎么在短时间内读完C和C++的书呢？简单总结就是： 不求甚解 自以为是 换位思考 这个总结太简洁了，所以下面还是展开来说。 不求甚解这个应该很好懂。因为C语言的教科书实在是晦涩难懂，这其中犹以某些国内教材为甚。相比之下，国外教材更加通俗易懂，深入浅出。但是老外的思维方式和观念和我们不太一样。说直白点就是人家的思维更加现代化，虽然没吃过猪肉，但是见过猪跑。这时候人家再来学吃猪肉，就知道哪个是前腿子肉，哪个是后腿子肉了不是。 那么到底啥是不求甚解？现阶段我能说的就是，这个C语言也是一门语言，和英语汉语没有什么根本的不一样，没有那么多为什么，不要问那么多为什么。都是极少数语言天才和一群优秀的语言大师约定俗成的。 自以为是这个本来是个贬义词。但我用来表达一个概念就是，C语言里面有些 数据结构 和 算法，有点抽象。抽象最考验人的智商了对不。所以这个时候就需要自以为是了。是不是真的你想的那样其实不重要，重要的是你根据书中的描述或者别人的正确的描述，在你自己的脑海中自以为是起来。 换位思考前面说C语言也是一门语言，语言是用来交流的，只不过C语言是人与计算机交流，普通语言是人与人之间交流。注意，我说的是人与计算机交流，而不是计算机与计算机交流。这个概念我认为很重要。因为只有这样，对人来说，C语言才具有它的可读性。可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性重要的事情可不能只是说三遍。可读性是对人这一方面强调的。这个有点像你自己说的话除了让别人能听懂以外，你自己也得能听懂吧。那计算机呢？众所周知，计算机处理的只是0和1。众所周知，计算机处理的只是0和1。众所周知，计算机处理的只是0和1。众所周知，计算机处理的只是0和1。众所周知，计算机处理的只是0和1。重要的事情还是得多说几遍。计算机的世界就是0和1的世界。计算机的世界就是0和1的世界。计算机的世界就是0和1的世界。计算机的世界就是0和1的世界。计算机的世界就是0和1的世界。前辈们在0和1的基础上设计了很多相对而言简单易懂易用的概念，这个是必须要了解的（深刻理解就有点强人所难了）。注意这里说的是相对而言。所以你要换位思考，计算机的思维方式是怎样的。计算机的时间很单纯，没有人间那么多的弯弯绕绕。对就是对，错就是错，没有模糊选项，只有可选项。 Begin and End前面的About都是一大堆写给自己看的废话。现在正式开始吧。我列个学习计划提纲大概如下： BEGIN0、学习使用搜索引擎。你一定注意到了，这个序号是0。你一定在想为什么，哈哈。这是极有趣的一个预演。因为在编程的世界，表示第一个的序号不是1，而是0。关于搜索引擎，这个非常非常重要。建议使用Google。鉴于国内Google被墙，可以考虑翻墙，或者使用国内某些网站提供的谷歌镜像。（这里肯定有你听不懂的，是时候使用搜索引擎了）这里推荐两个提供镜像的网址：（很稳定） 除了Google之外，必应也还不错。必应的网址是:。微软出品。除了必应以外，百度吧。你不知道，百度一下。除了百度以外，还是算了吧。搜索引擎的使用也有一定的方法，在知乎上看到过很好的回答。这里就不赘述了（反正说得也没人家好）。关于搜索引擎能干嘛，重要性有多大。我就不吹牛逼了。因为我吹得再大也没有实际的大。 1、提前熟悉计算机、编程方面的常用词语、术语、概念、说法。免得后面像刘姥姥进了大观园一样一脸傻逼样。熟悉的方法没别的，去网上的跟C语言、编程、计算机、科技、通信有关的网站、论坛、贴吧之类的，随便逛逛，一定能找到很多不熟悉的说法，然后百度一下。在之后的学习中也是一样的，看到某个说法觉得陌生，就百度一下。噢，这个包括相应的英文版本，并且以英文说法为主要参考。 2、搭建开发环境。注意了啊，我已经开始使用这方面的用语了。所谓搭建开发环境呢，用你能理解的说法就是**在你的电脑（Computer)的操作系统(Operating System)上安装微软公司（Microsoft Corporation)的VC6.0。这个软件貌似在微软官网不太能找到了，现实生产环境中也没人用，但是没关系。中国的教育阵线力量是很强大的，考试用的是这个软件，网上一搜就有一大把，还附带安装说明。 搭建之后熟悉这个软件的菜单位置、基本操作。 3、准备入门书籍。当然大部分学习还是要靠现成的教材的。对初学者来说，一本书就已经够了。但是我的入门教材就是学校的教科书，还是特别老又没有名气的那种。所以也不知道哪本最好。不过很有名气的有两本，国内一个是谭浩强的C语言（这个好像还有视频可以在网上下载到），国外一个是那本最经典的啥啥啥，名字忘了但是就是两个C语言创始人之一编写的那本。国外还有一个专业的计算机类书籍出版社叫O’Reily，凡是这个出版社的书籍，基本上可以说是世界上最顶尖的水平，这个水平包括了很强的可读性、权威性、正确性。（国内很多教材都是敷衍了事出版的，而且作者在写书方面能力匮乏，错误很多，又不好懂）怎么准备呢？使用搜索引擎下载电子档（一般来说就是pdf格式的）；书店买书；图书馆借书；同学借书。（如果有教材的话，一本教材就够了）另外推荐一个小甲鱼C语言教学视频。这个讲师讲得还算有趣，可以试着看几集，看自己是否有兴趣。哦，忘了一本书了，叫嗨翻C语言，老外写的。听名字就知道了，图文并茂，有声有色。这本我只翻过，没有看过，但是应该还行。如果有在图书馆看到这本书，可以试试。 4、一边看示例程序，一边看书。这里我想表达的重点在这里。我最中意的方法就是，带有特定目的（最经典的例如从1加到100）的一段小程序，争取读懂。而且是要没看过书的也要争取读懂。因为前面说过，C语言本身就强调可读性。我会挑选一些程序，详细注释，穿插所涉及的知识点，以供阅读学习。即便没有预习过教材中的有关知识点也没关系。并且我会强调二级考试的重点。 5、看二级考试的参考书。这个书没别的，就一本。专为考试而生。考前借来看看就行了。如果前面第5步做得不错的话，这一步可以省略，或者敷衍了事。注意我说的是前面的第5步，其实序号是4。因为这一部分只占到了考试的10%，又全都是选择题。而且在前面的学习中，已经可以掌握一部分这方面的内容。 6、’\0’C语言中字符串的结束符是这个。 提问第一步，向自己提问；第二步，向教科书提问；第三步，向搜索引擎提问；第四步，向周围的人提问，比如我。 提问要明确自己到底要知道要搞懂的是什么。提问要注意方式方法，遇到什么情况，要说清楚说详细说具体，而且要挑重点挑关键点强调，这样才方便别人解答。举个例子，比较常见的令初学者头疼的就是那个VC6.0报错。提问至少需要提供两方面内容，一个是源代码，一个是报错内容。 END这篇文章大概有两个用处，一个是给我本人自己回顾历史，一个是给要准备二级C语言考试的人消遣。文章中很多没有说明白的，很多说漏的，很多说错的，这在所难免。有些也是我故意略去的，比如学习编程需要很好的英文阅读水平。这点没有强调是因为我觉得对于二级C语言考试来说，这个完全可以忽略。但是有些对二级考试不重要的我又挑出来说了，是因为我觉得这些很重要，在任何场景下。比如使用搜索引擎。老的程序员有个说法，以前说 程序 = 数据结构 + 算法现在是程序 = 搜索引擎 + 英语 这篇文章通篇说得太泛。这不要紧，说具体不是本文的目的。后面我会继续写具体。当然是在另外一些文章里面了，但是同样是发表在这个网站。由于这个网站对文章的管理方式，我决定之后的文章都采用这样的命名方式： 1234567891011121314151617181920212223242526272829303132333435363738394041424344// SetTie.cpp/* 给文章设置一个统一规范的标题。*//* 这个示例程序基本包含了C语言的精华。对正准备入门但还没迈开脚的人来说，读不懂是正常的。但是呢，记得运用前面是三个方法：不求甚解自以为是换位思考。 *//* 哎呀忘了介绍了，这个/* 和 * /是写注释的地方，在这两个符号里面随便写啥都行。我把后面那个中间加了个空格，因为如果不加的话，这个注释就Over了这不是我想看到的。*/// 这个//嘛，也是写注释的地方，但是呢，只能在这一行里面写。#include&lt;stdio.h&gt; // 包含头文件，以使用头文件中的内容。以.h作为文件后缀名。stdio.h是标准(std=standard)输入输出(io=input,output)头文件。#define ARTICLES 20 // 宏定义。对于某些固定的常量，比如我要写的文章总数20，我用一个ARTICLE表示。就是“定义ARTICLE为20”#define STR_LEN 100 //和上面一样，这次定义的是一个字符串长度 int SetTitle();// 函数声明，这里可以不写函数主体。这个函数比较复杂，我也不会写。所以就是简单表示一下含义。int main()// main()是固定的，是整个程序的entry入口。&#123; int i = 0; // 定义一个整型变量（就是整数）i，并赋值(assign)为0。i这个字母通常用来做循环计数，第一次循环，第二次循环…… // 循环头。for后面的括号里面，第一个i=0是初始条件，第二个i&lt;ARTICLE是循环终止判断条件，不满足这个条件的时候循环终止；第三个i++是每次循环的后面都要执行的一个操作，一般就是i++这样的，表示循环次数+1。 for(i=0;l++;i&lt;ARTICLES) SetTitle(&quot;C语言入门奇葩说-%d&quot;,i); //这行代码按标准需要用一个大括号括起来，但是因为只有一行，大括号可以省略。这里是调用了前面声明的那个函数。将我的文章标题设置为《C语言奇葩说-0》、《C语言奇葩说-1》、《C语言奇葩说-2》…… char string[STR_LEN] = &quot;上面那个SetTitle()函数啊，有点像我这个printf()函数呢&quot;; printf(&quot;%s&quot;,string);//这个函数是初学阶段最重要最常用的一个函数，没有之一。作用就是打印（print,是打印显示到输出设备比如屏幕上的）。 return 0; //有没有发现函数名字前面都有一个单词，main()前面是int，就要返回一个int整型数。一般来说，程序正常结束的话就返回一个0，异常就返回-1。&#125;//~the end of main()int SetTitle()//一般来说，这一行就和前面那个声明一模一样，直接复制粘贴就行了&#123; ...//这个函数我是真的不知道怎么写&#125;//~the end of SetTile()//~the end of SetTitle.cpp]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>入门</tag>
      </tags>
  </entry>
</search>
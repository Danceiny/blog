{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.gitignore","hash":"9193e35d8b7fc33d768461505160c12c96c608bd","modified":1551274497013},{"_id":"source/CNAME","hash":"e7ad2c55c698bf4225164a3a27c1085865c0bcc0","modified":1551273755591},{"_id":"source/README.md","hash":"23484b1f06d791a548f4cd22d8725a5d28461fbf","modified":1551273755591},{"_id":"source/favicon.ico","hash":"0b6c935817c70e894ccd4430aae93a95a1f1ef32","modified":1551273755595},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1551273755595},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1551273755595},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1551273755595},{"_id":"themes/landscape/_config.yml","hash":"218c5fb76666696c42dc86e2de4711e6b80befbf","modified":1551273755595},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1551273755595},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1551273755595},{"_id":"source/about/index.md","hash":"e63f51893fe0c2b6530df1e7d40cbc51f3d40490","modified":1551273755595},{"_id":"source/_posts/Celery_FAQ_4_1_Stable.md","hash":"6d69a5d30ea08713a5b79a6179644ceb2306343d","modified":1551273755591},{"_id":"source/_posts/C语言入门奇葩说-0.md","hash":"7b8655f731e7942149f2f92cff10836d9823bcd6","modified":1551273755591},{"_id":"source/_posts/C语言入门奇葩说-1.md","hash":"2af1a2c9fec4679cdd2448a8a93c8749bae6c4dd","modified":1551273755591},{"_id":"source/_posts/C语言入门奇葩说-2.md","hash":"b0f4cdebb15dcd3577b425b739c017b6e18bba0e","modified":1551273755591},{"_id":"source/_posts/Ext2Fsd.md","hash":"0bda74ba4fa171f1ea28ea129965100c02625caf","modified":1551273755591},{"_id":"source/_posts/Git超简明指南与超常用命令.md","hash":"64906b156681ced3b9005ef3dab183426681edd2","modified":1551273755591},{"_id":"source/_posts/Product_Design_Methods.md","hash":"99a8ff035258a3899e9e51058702cb876c22075f","modified":1551273755591},{"_id":"source/_posts/RussellCloud碎碎念.md","hash":"23d883c2f68aaa947f9a1a430be8ae423c9436ef","modified":1551273755591},{"_id":"source/_posts/Q10.md","hash":"c6ccea845a507278a2626e4a3f18d9127883b13e","modified":1551273755591},{"_id":"source/_posts/WebQQ与聊天机器人的技术细节.md","hash":"5d04685b6b9f4ffbcd5eee24f218ec2693da800a","modified":1551273755591},{"_id":"source/_posts/WebQQ与聊天机器人的玩法.md","hash":"6450068304336f59c1fea0515f1cd6fcb933d799","modified":1551273755591},{"_id":"source/_posts/WebServer的日志系统实现分析.md","hash":"490affaafbe469e35c2f3d2a6c1f313aed6b53e0","modified":1551273755591},{"_id":"source/_posts/Workers_on_tap_The_Economist_Jan_3rd_2015.md","hash":"50ac0f46abffd88a4ae224ead7e590433b346ecf","modified":1551273755591},{"_id":"source/_posts/使用Win10开机推荐的背景图作为桌面背景.md","hash":"f89c9c9fe0635e5aa2b6233449cf7f7432911cd6","modified":1551273755591},{"_id":"source/_posts/一天：Kafka入门与项目实战.md","hash":"bec170a31654c2b8d8964cb66ad2bc0ea33d82fd","modified":1551273755591},{"_id":"source/_posts/基于批判性思维的新闻评论实例分析.md","hash":"1f162c45f71437c1a1d17976f984650ea96b1dcc","modified":1551273755591},{"_id":"source/_posts/利用Hexo搭建个人博客站点全纪录.md","hash":"aeb8fc8d19c762821a4b8bc5eff0669a9ee391c9","modified":1551273755591},{"_id":"source/_posts/大鱼海棠影评.md","hash":"43326532df8f0d5a8b7017fd5f5e73bc7165c8de","modified":1551274172834},{"_id":"source/_posts/批判性思维结课录.md","hash":"bcecf1468c38b41516c3d013a303150996189db2","modified":1551273755591},{"_id":"source/_posts/字典服务设计与实现.md","hash":"d290bcf1f252d36e541858e0ab98ac6dd8afbfad","modified":1551273755591},{"_id":"source/_posts/抖音用户关键字搜索抓包数据分析脚本使用指南.md","hash":"722c97b6e43aeb97c827bd4cca32c82208527966","modified":1551273755591},{"_id":"source/_posts/让神哭泣-评《The Interview》.md","hash":"06ea049655e1e307d8ffe6ad09d950330a2afb00","modified":1551273755591},{"_id":"source/_posts/黄晓庆.md","hash":"3dfed63e45ce0de7541b61a145dffdbdb331e110","modified":1551273755595},{"_id":"source/categories/index.md","hash":"cc02ac373e5c838db3f0f2303552d63074d11276","modified":1551273755595},{"_id":"source/tags/index.md","hash":"4abc595f1bcca10ae7086f0615e59e81125f24c4","modified":1551273755595},{"_id":"source/uploads/wechat-qcode.jpg","hash":"7b8bcafd862bdad806f72daacf8b11f1f5f2dabc","modified":1551273755595},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1551273755595},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1551273755595},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1551273755595},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1551273755595},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1551273755595},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1551273755595},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1551273755595},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1551273755595},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1551273755595},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1551273755595},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1551273755595},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1551273755595},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1551273755595},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1551273755595},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1551273755595},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1551273755603},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1551273755595},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1551273755595},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1551273755603},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1551273755595},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1551273755595},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1551273755595},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1551273755595},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1551273755595},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1551273755603},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1551273755595},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1551273755595},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1551273755595},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1551273755595},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1551273755595},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1551273755599},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1551273755599},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1551273755599},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1551273755603},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1551273755603},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1551273755599},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1551273755599},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1551273755603}],"Category":[{"name":"Language","_id":"cjsn9a89q0004c4xkvbvwpa28"},{"name":"翻译","_id":"cjsn9a89x0009c4xktc9hmrfc"},{"name":"快速入门快速实践","_id":"cjsn9a8a5000lc4xkxsnc5pud"},{"name":"Tips","_id":"cjsn9a8a9000sc4xkgy7x7nqw"},{"name":"交流园地","_id":"cjsn9a8ac000yc4xkxb8acbld"},{"name":"好玩","_id":"cjsn9a8ai0016c4xkicb1s776"},{"name":"一天","parent":"cjsn9a8a5000lc4xkxsnc5pud","_id":"cjsn9a8am001dc4xkumfw702t"},{"name":"DOSOMETHING","_id":"cjsn9a8ao001nc4xkanyszhht"},{"name":"影评","_id":"cjsn9a8ap001rc4xkyo38aerp"},{"name":"常用","parent":"cjsn9a8am001dc4xkumfw702t","_id":"cjsn9a8aq001vc4xkjko78mj7"},{"name":"杂文","_id":"cjsn9a8c50034c4xkg71r1wbe"},{"name":"教程","_id":"cjsn9a8c70039c4xkcefvta76"}],"Data":[],"Page":[{"_content":"Welcome to the blog wiki!\n\n【欢迎访问[弹簧振子的博客](http://blog.cannot.cc/)】\n\n# 建站目的\n\n# 建站经历\n\n- 使用Hexo搭建\n- 使用Next主题\n\n# 站点地图与功能\n- 支持百度统计\n- 支持文章阅读量统计\n- 支持社交媒体外链\n- 支持评论点赞转发\n- 支持微信支付宝打赏\n- 支持微信公众号宣传\n","source":"README.md","raw":"Welcome to the blog wiki!\n\n【欢迎访问[弹簧振子的博客](http://blog.cannot.cc/)】\n\n# 建站目的\n\n# 建站经历\n\n- 使用Hexo搭建\n- 使用Next主题\n\n# 站点地图与功能\n- 支持百度统计\n- 支持文章阅读量统计\n- 支持社交媒体外链\n- 支持评论点赞转发\n- 支持微信支付宝打赏\n- 支持微信公众号宣传\n","date":"2019-02-27T13:22:35.591Z","updated":"2019-02-27T13:22:35.591Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjsn9a88u0000c4xkax0gtkb3","content":"<p>Welcome to the blog wiki!</p>\n<p>【欢迎访问<a href=\"http://blog.cannot.cc/\" target=\"_blank\" rel=\"noopener\">弹簧振子的博客</a>】</p>\n<h1 id=\"建站目的\"><a href=\"#建站目的\" class=\"headerlink\" title=\"建站目的\"></a>建站目的</h1><h1 id=\"建站经历\"><a href=\"#建站经历\" class=\"headerlink\" title=\"建站经历\"></a>建站经历</h1><ul>\n<li>使用Hexo搭建</li>\n<li>使用Next主题</li>\n</ul>\n<h1 id=\"站点地图与功能\"><a href=\"#站点地图与功能\" class=\"headerlink\" title=\"站点地图与功能\"></a>站点地图与功能</h1><ul>\n<li>支持百度统计</li>\n<li>支持文章阅读量统计</li>\n<li>支持社交媒体外链</li>\n<li>支持评论点赞转发</li>\n<li>支持微信支付宝打赏</li>\n<li>支持微信公众号宣传</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to the blog wiki!</p>\n<p>【欢迎访问<a href=\"http://blog.cannot.cc/\" target=\"_blank\" rel=\"noopener\">弹簧振子的博客</a>】</p>\n<h1 id=\"建站目的\"><a href=\"#建站目的\" class=\"headerlink\" title=\"建站目的\"></a>建站目的</h1><h1 id=\"建站经历\"><a href=\"#建站经历\" class=\"headerlink\" title=\"建站经历\"></a>建站经历</h1><ul>\n<li>使用Hexo搭建</li>\n<li>使用Next主题</li>\n</ul>\n<h1 id=\"站点地图与功能\"><a href=\"#站点地图与功能\" class=\"headerlink\" title=\"站点地图与功能\"></a>站点地图与功能</h1><ul>\n<li>支持百度统计</li>\n<li>支持文章阅读量统计</li>\n<li>支持社交媒体外链</li>\n<li>支持评论点赞转发</li>\n<li>支持微信支付宝打赏</li>\n<li>支持微信公众号宣传</li>\n</ul>\n"},{"title":"about","date":"2017-05-07T08:10:36.000Z","type":"about","comments":0,"_content":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\">\n<div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\">\n</div>\n<div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\">\n本文链接：<a href=\"http://blog.cannot.cc/about/>\"></a> <br/>\n作者：\n<a href=\"http://github.com/Danceiny\">弹簧振子</a> <br/>出处：\n<a href=\"http://danceiny.github.io/\">http://danceiny.github.io/</a>\n<br/>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a>\n国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名\n<a href=\"http://danceiny.github.io/\">弹簧振子</a>及链接。\n</div>\n</div>\n","source":"about/index.md","raw":"title: about\ndate: 2017-05-07 16:10:36\ntype: \"about\"\ncomments: false\n---\n<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\">\n<div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\">\n</div>\n<div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\">\n本文链接：<a href=\"http://blog.cannot.cc/about/>\"></a> <br/>\n作者：\n<a href=\"http://github.com/Danceiny\">弹簧振子</a> <br/>出处：\n<a href=\"http://danceiny.github.io/\">http://danceiny.github.io/</a>\n<br/>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a>\n国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名\n<a href=\"http://danceiny.github.io/\">弹簧振子</a>及链接。\n</div>\n</div>\n","updated":"2019-02-27T13:22:35.595Z","path":"about/index.html","layout":"page","_id":"cjsn9a89j0001c4xky87grv1s","content":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\"><br><div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\"><br></div><br><div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\"><br>本文链接：<a href=\"http://blog.cannot.cc/about/>\" target=\"_blank\" rel=\"noopener\"></a> <br><br>作者：<br><a href=\"http://github.com/Danceiny\" target=\"_blank\" rel=\"noopener\">弹簧振子</a> <br>出处：<br><a href=\"http://danceiny.github.io/\" target=\"_blank\" rel=\"noopener\">http://danceiny.github.io/</a><br><br>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a><br>国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名<br><a href=\"http://danceiny.github.io/\" target=\"_blank\" rel=\"noopener\">弹簧振子</a>及链接。<br></div><br></div>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid\"><br><div style=\"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px\"><br></div><br><div style=\"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000\"><br>本文链接：<a href=\"http://blog.cannot.cc/about/>\" target=\"_blank\" rel=\"noopener\"></a> <br><br>作者：<br><a href=\"http://github.com/Danceiny\" target=\"_blank\" rel=\"noopener\">弹簧振子</a> <br>出处：<br><a href=\"http://danceiny.github.io/\" target=\"_blank\" rel=\"noopener\">http://danceiny.github.io/</a><br><br>本文基于<a target=\"_blank\" title=\"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> 知识共享署名-相同方式共享 4.0 </a><br>国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名<br><a href=\"http://danceiny.github.io/\" target=\"_blank\" rel=\"noopener\">弹簧振子</a>及链接。<br></div><br></div>\n"},{"title":"categories","date":"2015-11-14T14:55:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-11-14 22:55:55\ntype: \"categories\"\n---\n","updated":"2019-02-27T13:22:35.595Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjsn9a8bz002xc4xkzpw1swi2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2015-11-14T14:55:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-11-14 22:55:39\ntype: \"tags\"\n---\n","updated":"2019-02-27T13:22:35.595Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjsn9a8c1002zc4xkqzmpjxr4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"date":"2016-03-26T09:10:00.000Z","status":"public","title":"C语言入门奇葩说-1","keywords":["C语言","入门","教程"],"_content":"# 什么是程序，什么是代码，什么是语言，什么是编程\n程序是一个很老的词，我们可以联想到流程、程式、表达式、顺序等词语。\n\n代码也是一个很老的词，码是符号，代是说这种符号代表了某种意思。文字就是一种代码。\n\n语言也是一个很老的词，说的写的，就是语言。\n\n以上和编程联系起来，就从一个很老的世界，跳入了一个新的世界——从计算机编程的角度讲，这一切不过只有几十年的历史而已。比如C语言的创始人好像还没死欸。\n\n我理解的编程就是，面对现实世界中的某些问题——尤其是**单调乏味有限有规律**的问题，人们为了提高效率、拒绝重复等原因，依托现代计算机等好用的硬件，又借用别人开发好的计算机操作系统，并利用与某门编程语言相适应的一整套开发工具，最后用键盘和鼠标等输入设备，写小说一样写代码，写完要检查对不对——自己可以检查，也可以搬出你所利用的开发工具中的某个东东帮忙检查，这个检查过程通常我们称作测试，测试完了就说明你写对了——当然没有语病是不够的，你的小说还应该要有一定的主题，要表达一定的情感，要有确定的目的，如果没有，那仍然是一篇失败的小说。\n所以最后，和最开始，编程就是为了解决那个问题而来。\n\n现在给你出第一个问题，假如你是小学生高斯，你老师让你去做题，算1+2+3+...+100。\n可是你没有高斯那么聪明。\n旁边的小朋友1+2=3，3+3=6，6+4=10，...，中间不小心忘了、写错了，又重头再来，最后终于赶在日落之前算出来了，等于4050。\n可是你有一台计算机。\n这时候，你设想了一个这样的“算法”：\n所求的和最开始是0，第一次加1，第二次加2，第几次就加多少，总共加一百次就好了。那我有一百个仆人，他们每个人加一次，我只要问最后一个仆人，就知道结果是多少了。\n这时候你又穿越到高中的数学课堂，老师正在讲流程图。\n嚄，然后你敲下：\n```c:n\n#include<stdio.h>\nint main()\n{\n    int i;\n    int sum=0;\n    for(i=1;i<=100;i++)\n        sum += i;\n    printf(\"哈哈哈，我一定比高斯算得还快！答案是%d\",sum);    \n    return 0;\n}\n```\n说实话，这个程序够我讲半天了。但是呢，根据马克思的矛盾论，我们要先抓住主要矛盾的主要方面。\n\n第一行，（注意，写代码的时候我们经常说多少行，这和小学时候学语文差不多吧，中心思想在某篇课文第几行？）在学习C语言的第一个月里，第一行请照抄。根据英文翻译，可以推测这是包含个啥对不对。俗话说的好，没有旁征博引的文章怎么能称得上文章呢。\n\n第二行，关键的地方了，关键在第二个单词，main，尼玛这是个大写的关键啊，但是呢，这个main不能大写。。。。。这个main啊，是整个程序的入口，是大门。你要去别人的家里，总得从大门进去吧。想起高中的程序框图没有，这个main就是那个开始！——所以，每个程序都有一个main。\n\n第三行，怎么就一个大括号呢？等等再看。\n\n第四行，int，好眼熟，i又是啥？要我说呢，int就是一个帽子，在第二行这顶帽子给main戴上了，现在又给i戴上了。这顶帽子啥意思暂时不用管。\n\n第五行，和上面一行长得好像，sum应该是和吧，sum=0欸。\n\n第六行，有个for，这个介词啥意思？又是int，括号里面i出现了三次！！！还1，100，++的。猜一猜，前面不是介绍过从1加到100的算法吗？\n\n第七行，+=是什么鬼符号？不懂。\n\n第八行，print是打印的意思！！哈哈，英语水平真是高啊，后面加个f，应该是函数、功能function的意思吧。那么，就是说它有打印的功能咯？打印啥呢？这不是用一个括号给括起来了嘛。前面汉字好懂，中间%d不懂，最后又有一个sum，再看看整句话，那个%d是不是就是sum呢。\n\n第九行，return是返回的意思！返回0？这是什么鬼。——这个鬼好神秘的~\n\n第十行，又是一个大括号。嚄！是右边的大括号！！还记得第三行的大括号吗，他们不是cp么。。。cp怎么能分开呢，他们可是生生世世在一起永远不分离的。——不过一般都是异地恋呢。\n\nOKay，程序代码分析完毕。就十行，比旁边小伙伴从1加到100写99行算式总归是精简了好多呢。\n但是这特么没有告诉我们结果啊！\n现在，我再说几个重点：\n1. C语言是一门编译型语言，写好的代码，一般是存储在一个名为NAME,后缀为c的NAME.c文件中，但是这个文件需要经过编译，才能被计算机所认识。来做这个编译工作的——其实就是翻译，叫做编译器，compiler。\n2. 编译好之后，然后就可以生成了——好比小说写好后出版。\n3. 然后就可以运行了，run。\n4. 然后就可以看到程序的结果了——谨记，编写一个程序，肯定是希望它有输出的，汇报总该要有，总不能默不作声吧，那样谁知道它到底干了些啥。\n\n以上是我归纳的简化版过程——真实的过程是比较复杂的。但是这个简化版够用了。\n\n以上部门仍然是为了勾勒一个初步的印象，至于具体的学习，请看下一部分——入门。\n# 入门\n我无意在这里重复所有C语言教材都会有的说教部分。\n**下面我点几个需要仔细阅读教材中相关内容的东东：**\n1. 关键词，这个不多，就是几十个英文单词罢了，过目一遍，以及什么是关键词；\n2. 数据类型，比如int，float，char；\n3. 运算符，比如`+`,`-`,`*`,`/`,`%`,;包括其他一些标点，比如`,`,`;`,`{`,`[`...\n4. 表达式，例如`3+4`,`x+3`;\n5. 控制结构，例如while,for,if。主要就是这两个循环和一个如果。\n6. printf和scanf函数。打印，扫描。输出，输入。\n\n别看只有6点，这几乎是你需要学习的六成内容了。\n现在的话，可以马上去翻一翻目录，找到有关以上6点的章节（目录没找到那也不要紧，还可以上网），**认真仔细地**阅读一遍，标出你认为的重点，尤其是一些**表格和definition**。\n然后再阅读一遍本文。\n然后**详细地**阅读刚刚看过的教材中的部分。\n\n# 实践出真知\n请打开VC6.0，新建一个.c文件，把上面那个跟高斯比赛的程序代码拷贝到编辑框，保存，然后在VC6.0的面板上，找到一个感叹号！，点击这个按钮，程序就可以运行啦。\n注意两点，鼠标悬浮在感叹号上面的时候，注意看显示出来的解释；\n点击感叹号之后，注意看编辑框的下面那个框里面发生了什么。\n如果报错了，不好意思，我的程序有一点问题，请通知我。\n# 高级一点点的\n下面的程序，可能乍看之下还有点难，放在这里只是让你有个对照。这个程序的功能是转置一个矩阵。如果学过线性代数的话，你可以很快理解这个过程。\n不理解也不要紧，因为这个程序里面出现的东西都是以后经常见到的，早点见面可以熟悉一下脸嘛。\n```c:n\nint main( )\n{ static int a[2][3]={{1,2,3},{4,5,6}};\n  static int b[3][2], i, j;\n  printf(\"array a:\\n\");\n  for (i=0; i<=1; i++)\n    { for ( j=0; j<=2; j++)\n        { printf(\"%5d\",a[i][ j]);   b[ j][i]=a[i][ j]; }       printf(\"\\n\");\n    }\n  printf(\"array b:\\n\");\n  for (i=0; i<=2; i++)\n    { for ( j=0; j<=1; j++)    printf(\"%5d\",b[i][ j]);\n      printf(\"\\n\");\n    }\n}\n```\n顺便，有木有觉得上面这个程序很丑？\n那是因为，这不是我写的。","source":"_posts/C语言入门奇葩说-1.md","raw":"---\ndate: 2016-03-26 17:10\nstatus: public\ntitle: C语言入门奇葩说-1\nkeywords: \n- C语言\n- 入门\n- 教程\ntags: \n- C语言\n- 入门\ncategories: Language\n \n---\n# 什么是程序，什么是代码，什么是语言，什么是编程\n程序是一个很老的词，我们可以联想到流程、程式、表达式、顺序等词语。\n\n代码也是一个很老的词，码是符号，代是说这种符号代表了某种意思。文字就是一种代码。\n\n语言也是一个很老的词，说的写的，就是语言。\n\n以上和编程联系起来，就从一个很老的世界，跳入了一个新的世界——从计算机编程的角度讲，这一切不过只有几十年的历史而已。比如C语言的创始人好像还没死欸。\n\n我理解的编程就是，面对现实世界中的某些问题——尤其是**单调乏味有限有规律**的问题，人们为了提高效率、拒绝重复等原因，依托现代计算机等好用的硬件，又借用别人开发好的计算机操作系统，并利用与某门编程语言相适应的一整套开发工具，最后用键盘和鼠标等输入设备，写小说一样写代码，写完要检查对不对——自己可以检查，也可以搬出你所利用的开发工具中的某个东东帮忙检查，这个检查过程通常我们称作测试，测试完了就说明你写对了——当然没有语病是不够的，你的小说还应该要有一定的主题，要表达一定的情感，要有确定的目的，如果没有，那仍然是一篇失败的小说。\n所以最后，和最开始，编程就是为了解决那个问题而来。\n\n现在给你出第一个问题，假如你是小学生高斯，你老师让你去做题，算1+2+3+...+100。\n可是你没有高斯那么聪明。\n旁边的小朋友1+2=3，3+3=6，6+4=10，...，中间不小心忘了、写错了，又重头再来，最后终于赶在日落之前算出来了，等于4050。\n可是你有一台计算机。\n这时候，你设想了一个这样的“算法”：\n所求的和最开始是0，第一次加1，第二次加2，第几次就加多少，总共加一百次就好了。那我有一百个仆人，他们每个人加一次，我只要问最后一个仆人，就知道结果是多少了。\n这时候你又穿越到高中的数学课堂，老师正在讲流程图。\n嚄，然后你敲下：\n```c:n\n#include<stdio.h>\nint main()\n{\n    int i;\n    int sum=0;\n    for(i=1;i<=100;i++)\n        sum += i;\n    printf(\"哈哈哈，我一定比高斯算得还快！答案是%d\",sum);    \n    return 0;\n}\n```\n说实话，这个程序够我讲半天了。但是呢，根据马克思的矛盾论，我们要先抓住主要矛盾的主要方面。\n\n第一行，（注意，写代码的时候我们经常说多少行，这和小学时候学语文差不多吧，中心思想在某篇课文第几行？）在学习C语言的第一个月里，第一行请照抄。根据英文翻译，可以推测这是包含个啥对不对。俗话说的好，没有旁征博引的文章怎么能称得上文章呢。\n\n第二行，关键的地方了，关键在第二个单词，main，尼玛这是个大写的关键啊，但是呢，这个main不能大写。。。。。这个main啊，是整个程序的入口，是大门。你要去别人的家里，总得从大门进去吧。想起高中的程序框图没有，这个main就是那个开始！——所以，每个程序都有一个main。\n\n第三行，怎么就一个大括号呢？等等再看。\n\n第四行，int，好眼熟，i又是啥？要我说呢，int就是一个帽子，在第二行这顶帽子给main戴上了，现在又给i戴上了。这顶帽子啥意思暂时不用管。\n\n第五行，和上面一行长得好像，sum应该是和吧，sum=0欸。\n\n第六行，有个for，这个介词啥意思？又是int，括号里面i出现了三次！！！还1，100，++的。猜一猜，前面不是介绍过从1加到100的算法吗？\n\n第七行，+=是什么鬼符号？不懂。\n\n第八行，print是打印的意思！！哈哈，英语水平真是高啊，后面加个f，应该是函数、功能function的意思吧。那么，就是说它有打印的功能咯？打印啥呢？这不是用一个括号给括起来了嘛。前面汉字好懂，中间%d不懂，最后又有一个sum，再看看整句话，那个%d是不是就是sum呢。\n\n第九行，return是返回的意思！返回0？这是什么鬼。——这个鬼好神秘的~\n\n第十行，又是一个大括号。嚄！是右边的大括号！！还记得第三行的大括号吗，他们不是cp么。。。cp怎么能分开呢，他们可是生生世世在一起永远不分离的。——不过一般都是异地恋呢。\n\nOKay，程序代码分析完毕。就十行，比旁边小伙伴从1加到100写99行算式总归是精简了好多呢。\n但是这特么没有告诉我们结果啊！\n现在，我再说几个重点：\n1. C语言是一门编译型语言，写好的代码，一般是存储在一个名为NAME,后缀为c的NAME.c文件中，但是这个文件需要经过编译，才能被计算机所认识。来做这个编译工作的——其实就是翻译，叫做编译器，compiler。\n2. 编译好之后，然后就可以生成了——好比小说写好后出版。\n3. 然后就可以运行了，run。\n4. 然后就可以看到程序的结果了——谨记，编写一个程序，肯定是希望它有输出的，汇报总该要有，总不能默不作声吧，那样谁知道它到底干了些啥。\n\n以上是我归纳的简化版过程——真实的过程是比较复杂的。但是这个简化版够用了。\n\n以上部门仍然是为了勾勒一个初步的印象，至于具体的学习，请看下一部分——入门。\n# 入门\n我无意在这里重复所有C语言教材都会有的说教部分。\n**下面我点几个需要仔细阅读教材中相关内容的东东：**\n1. 关键词，这个不多，就是几十个英文单词罢了，过目一遍，以及什么是关键词；\n2. 数据类型，比如int，float，char；\n3. 运算符，比如`+`,`-`,`*`,`/`,`%`,;包括其他一些标点，比如`,`,`;`,`{`,`[`...\n4. 表达式，例如`3+4`,`x+3`;\n5. 控制结构，例如while,for,if。主要就是这两个循环和一个如果。\n6. printf和scanf函数。打印，扫描。输出，输入。\n\n别看只有6点，这几乎是你需要学习的六成内容了。\n现在的话，可以马上去翻一翻目录，找到有关以上6点的章节（目录没找到那也不要紧，还可以上网），**认真仔细地**阅读一遍，标出你认为的重点，尤其是一些**表格和definition**。\n然后再阅读一遍本文。\n然后**详细地**阅读刚刚看过的教材中的部分。\n\n# 实践出真知\n请打开VC6.0，新建一个.c文件，把上面那个跟高斯比赛的程序代码拷贝到编辑框，保存，然后在VC6.0的面板上，找到一个感叹号！，点击这个按钮，程序就可以运行啦。\n注意两点，鼠标悬浮在感叹号上面的时候，注意看显示出来的解释；\n点击感叹号之后，注意看编辑框的下面那个框里面发生了什么。\n如果报错了，不好意思，我的程序有一点问题，请通知我。\n# 高级一点点的\n下面的程序，可能乍看之下还有点难，放在这里只是让你有个对照。这个程序的功能是转置一个矩阵。如果学过线性代数的话，你可以很快理解这个过程。\n不理解也不要紧，因为这个程序里面出现的东西都是以后经常见到的，早点见面可以熟悉一下脸嘛。\n```c:n\nint main( )\n{ static int a[2][3]={{1,2,3},{4,5,6}};\n  static int b[3][2], i, j;\n  printf(\"array a:\\n\");\n  for (i=0; i<=1; i++)\n    { for ( j=0; j<=2; j++)\n        { printf(\"%5d\",a[i][ j]);   b[ j][i]=a[i][ j]; }       printf(\"\\n\");\n    }\n  printf(\"array b:\\n\");\n  for (i=0; i<=2; i++)\n    { for ( j=0; j<=1; j++)    printf(\"%5d\",b[i][ j]);\n      printf(\"\\n\");\n    }\n}\n```\n顺便，有木有觉得上面这个程序很丑？\n那是因为，这不是我写的。","slug":"C语言入门奇葩说-1","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89k0002c4xk8qlofmdb","content":"<h1 id=\"什么是程序，什么是代码，什么是语言，什么是编程\"><a href=\"#什么是程序，什么是代码，什么是语言，什么是编程\" class=\"headerlink\" title=\"什么是程序，什么是代码，什么是语言，什么是编程\"></a>什么是程序，什么是代码，什么是语言，什么是编程</h1><p>程序是一个很老的词，我们可以联想到流程、程式、表达式、顺序等词语。</p>\n<p>代码也是一个很老的词，码是符号，代是说这种符号代表了某种意思。文字就是一种代码。</p>\n<p>语言也是一个很老的词，说的写的，就是语言。</p>\n<p>以上和编程联系起来，就从一个很老的世界，跳入了一个新的世界——从计算机编程的角度讲，这一切不过只有几十年的历史而已。比如C语言的创始人好像还没死欸。</p>\n<p>我理解的编程就是，面对现实世界中的某些问题——尤其是<strong>单调乏味有限有规律</strong>的问题，人们为了提高效率、拒绝重复等原因，依托现代计算机等好用的硬件，又借用别人开发好的计算机操作系统，并利用与某门编程语言相适应的一整套开发工具，最后用键盘和鼠标等输入设备，写小说一样写代码，写完要检查对不对——自己可以检查，也可以搬出你所利用的开发工具中的某个东东帮忙检查，这个检查过程通常我们称作测试，测试完了就说明你写对了——当然没有语病是不够的，你的小说还应该要有一定的主题，要表达一定的情感，要有确定的目的，如果没有，那仍然是一篇失败的小说。<br>所以最后，和最开始，编程就是为了解决那个问题而来。</p>\n<p>现在给你出第一个问题，假如你是小学生高斯，你老师让你去做题，算1+2+3+…+100。<br>可是你没有高斯那么聪明。<br>旁边的小朋友1+2=3，3+3=6，6+4=10，…，中间不小心忘了、写错了，又重头再来，最后终于赶在日落之前算出来了，等于4050。<br>可是你有一台计算机。<br>这时候，你设想了一个这样的“算法”：<br>所求的和最开始是0，第一次加1，第二次加2，第几次就加多少，总共加一百次就好了。那我有一百个仆人，他们每个人加一次，我只要问最后一个仆人，就知道结果是多少了。<br>这时候你又穿越到高中的数学课堂，老师正在讲流程图。<br>嚄，然后你敲下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    int sum=0;</span><br><span class=\"line\">    for(i=1;i&lt;=100;i++)</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    printf(&quot;哈哈哈，我一定比高斯算得还快！答案是%d&quot;,sum);    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>说实话，这个程序够我讲半天了。但是呢，根据马克思的矛盾论，我们要先抓住主要矛盾的主要方面。</p>\n<p>第一行，（注意，写代码的时候我们经常说多少行，这和小学时候学语文差不多吧，中心思想在某篇课文第几行？）在学习C语言的第一个月里，第一行请照抄。根据英文翻译，可以推测这是包含个啥对不对。俗话说的好，没有旁征博引的文章怎么能称得上文章呢。</p>\n<p>第二行，关键的地方了，关键在第二个单词，main，尼玛这是个大写的关键啊，但是呢，这个main不能大写。。。。。这个main啊，是整个程序的入口，是大门。你要去别人的家里，总得从大门进去吧。想起高中的程序框图没有，这个main就是那个开始！——所以，每个程序都有一个main。</p>\n<p>第三行，怎么就一个大括号呢？等等再看。</p>\n<p>第四行，int，好眼熟，i又是啥？要我说呢，int就是一个帽子，在第二行这顶帽子给main戴上了，现在又给i戴上了。这顶帽子啥意思暂时不用管。</p>\n<p>第五行，和上面一行长得好像，sum应该是和吧，sum=0欸。</p>\n<p>第六行，有个for，这个介词啥意思？又是int，括号里面i出现了三次！！！还1，100，++的。猜一猜，前面不是介绍过从1加到100的算法吗？</p>\n<p>第七行，+=是什么鬼符号？不懂。</p>\n<p>第八行，print是打印的意思！！哈哈，英语水平真是高啊，后面加个f，应该是函数、功能function的意思吧。那么，就是说它有打印的功能咯？打印啥呢？这不是用一个括号给括起来了嘛。前面汉字好懂，中间%d不懂，最后又有一个sum，再看看整句话，那个%d是不是就是sum呢。</p>\n<p>第九行，return是返回的意思！返回0？这是什么鬼。——这个鬼好神秘的~</p>\n<p>第十行，又是一个大括号。嚄！是右边的大括号！！还记得第三行的大括号吗，他们不是cp么。。。cp怎么能分开呢，他们可是生生世世在一起永远不分离的。——不过一般都是异地恋呢。</p>\n<p>OKay，程序代码分析完毕。就十行，比旁边小伙伴从1加到100写99行算式总归是精简了好多呢。<br>但是这特么没有告诉我们结果啊！<br>现在，我再说几个重点：</p>\n<ol>\n<li>C语言是一门编译型语言，写好的代码，一般是存储在一个名为NAME,后缀为c的NAME.c文件中，但是这个文件需要经过编译，才能被计算机所认识。来做这个编译工作的——其实就是翻译，叫做编译器，compiler。</li>\n<li>编译好之后，然后就可以生成了——好比小说写好后出版。</li>\n<li>然后就可以运行了，run。</li>\n<li>然后就可以看到程序的结果了——谨记，编写一个程序，肯定是希望它有输出的，汇报总该要有，总不能默不作声吧，那样谁知道它到底干了些啥。</li>\n</ol>\n<p>以上是我归纳的简化版过程——真实的过程是比较复杂的。但是这个简化版够用了。</p>\n<p>以上部门仍然是为了勾勒一个初步的印象，至于具体的学习，请看下一部分——入门。</p>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>我无意在这里重复所有C语言教材都会有的说教部分。<br><strong>下面我点几个需要仔细阅读教材中相关内容的东东：</strong></p>\n<ol>\n<li>关键词，这个不多，就是几十个英文单词罢了，过目一遍，以及什么是关键词；</li>\n<li>数据类型，比如int，float，char；</li>\n<li>运算符，比如<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,;包括其他一些标点，比如<code>,</code>,<code>;</code>,<code>{</code>,<code>[</code>…</li>\n<li>表达式，例如<code>3+4</code>,<code>x+3</code>;</li>\n<li>控制结构，例如while,for,if。主要就是这两个循环和一个如果。</li>\n<li>printf和scanf函数。打印，扫描。输出，输入。</li>\n</ol>\n<p>别看只有6点，这几乎是你需要学习的六成内容了。<br>现在的话，可以马上去翻一翻目录，找到有关以上6点的章节（目录没找到那也不要紧，还可以上网），<strong>认真仔细地</strong>阅读一遍，标出你认为的重点，尤其是一些<strong>表格和definition</strong>。<br>然后再阅读一遍本文。<br>然后<strong>详细地</strong>阅读刚刚看过的教材中的部分。</p>\n<h1 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h1><p>请打开VC6.0，新建一个.c文件，把上面那个跟高斯比赛的程序代码拷贝到编辑框，保存，然后在VC6.0的面板上，找到一个感叹号！，点击这个按钮，程序就可以运行啦。<br>注意两点，鼠标悬浮在感叹号上面的时候，注意看显示出来的解释；<br>点击感叹号之后，注意看编辑框的下面那个框里面发生了什么。<br>如果报错了，不好意思，我的程序有一点问题，请通知我。</p>\n<h1 id=\"高级一点点的\"><a href=\"#高级一点点的\" class=\"headerlink\" title=\"高级一点点的\"></a>高级一点点的</h1><p>下面的程序，可能乍看之下还有点难，放在这里只是让你有个对照。这个程序的功能是转置一个矩阵。如果学过线性代数的话，你可以很快理解这个过程。<br>不理解也不要紧，因为这个程序里面出现的东西都是以后经常见到的，早点见面可以熟悉一下脸嘛。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main( )</span><br><span class=\"line\">&#123; static int a[2][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</span><br><span class=\"line\">  static int b[3][2], i, j;</span><br><span class=\"line\">  printf(&quot;array a:\\n&quot;);</span><br><span class=\"line\">  for (i=0; i&lt;=1; i++)</span><br><span class=\"line\">    &#123; for ( j=0; j&lt;=2; j++)</span><br><span class=\"line\">        &#123; printf(&quot;%5d&quot;,a[i][ j]);   b[ j][i]=a[i][ j]; &#125;       printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  printf(&quot;array b:\\n&quot;);</span><br><span class=\"line\">  for (i=0; i&lt;=2; i++)</span><br><span class=\"line\">    &#123; for ( j=0; j&lt;=1; j++)    printf(&quot;%5d&quot;,b[i][ j]);</span><br><span class=\"line\">      printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>顺便，有木有觉得上面这个程序很丑？<br>那是因为，这不是我写的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是程序，什么是代码，什么是语言，什么是编程\"><a href=\"#什么是程序，什么是代码，什么是语言，什么是编程\" class=\"headerlink\" title=\"什么是程序，什么是代码，什么是语言，什么是编程\"></a>什么是程序，什么是代码，什么是语言，什么是编程</h1><p>程序是一个很老的词，我们可以联想到流程、程式、表达式、顺序等词语。</p>\n<p>代码也是一个很老的词，码是符号，代是说这种符号代表了某种意思。文字就是一种代码。</p>\n<p>语言也是一个很老的词，说的写的，就是语言。</p>\n<p>以上和编程联系起来，就从一个很老的世界，跳入了一个新的世界——从计算机编程的角度讲，这一切不过只有几十年的历史而已。比如C语言的创始人好像还没死欸。</p>\n<p>我理解的编程就是，面对现实世界中的某些问题——尤其是<strong>单调乏味有限有规律</strong>的问题，人们为了提高效率、拒绝重复等原因，依托现代计算机等好用的硬件，又借用别人开发好的计算机操作系统，并利用与某门编程语言相适应的一整套开发工具，最后用键盘和鼠标等输入设备，写小说一样写代码，写完要检查对不对——自己可以检查，也可以搬出你所利用的开发工具中的某个东东帮忙检查，这个检查过程通常我们称作测试，测试完了就说明你写对了——当然没有语病是不够的，你的小说还应该要有一定的主题，要表达一定的情感，要有确定的目的，如果没有，那仍然是一篇失败的小说。<br>所以最后，和最开始，编程就是为了解决那个问题而来。</p>\n<p>现在给你出第一个问题，假如你是小学生高斯，你老师让你去做题，算1+2+3+…+100。<br>可是你没有高斯那么聪明。<br>旁边的小朋友1+2=3，3+3=6，6+4=10，…，中间不小心忘了、写错了，又重头再来，最后终于赶在日落之前算出来了，等于4050。<br>可是你有一台计算机。<br>这时候，你设想了一个这样的“算法”：<br>所求的和最开始是0，第一次加1，第二次加2，第几次就加多少，总共加一百次就好了。那我有一百个仆人，他们每个人加一次，我只要问最后一个仆人，就知道结果是多少了。<br>这时候你又穿越到高中的数学课堂，老师正在讲流程图。<br>嚄，然后你敲下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    int sum=0;</span><br><span class=\"line\">    for(i=1;i&lt;=100;i++)</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    printf(&quot;哈哈哈，我一定比高斯算得还快！答案是%d&quot;,sum);    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>说实话，这个程序够我讲半天了。但是呢，根据马克思的矛盾论，我们要先抓住主要矛盾的主要方面。</p>\n<p>第一行，（注意，写代码的时候我们经常说多少行，这和小学时候学语文差不多吧，中心思想在某篇课文第几行？）在学习C语言的第一个月里，第一行请照抄。根据英文翻译，可以推测这是包含个啥对不对。俗话说的好，没有旁征博引的文章怎么能称得上文章呢。</p>\n<p>第二行，关键的地方了，关键在第二个单词，main，尼玛这是个大写的关键啊，但是呢，这个main不能大写。。。。。这个main啊，是整个程序的入口，是大门。你要去别人的家里，总得从大门进去吧。想起高中的程序框图没有，这个main就是那个开始！——所以，每个程序都有一个main。</p>\n<p>第三行，怎么就一个大括号呢？等等再看。</p>\n<p>第四行，int，好眼熟，i又是啥？要我说呢，int就是一个帽子，在第二行这顶帽子给main戴上了，现在又给i戴上了。这顶帽子啥意思暂时不用管。</p>\n<p>第五行，和上面一行长得好像，sum应该是和吧，sum=0欸。</p>\n<p>第六行，有个for，这个介词啥意思？又是int，括号里面i出现了三次！！！还1，100，++的。猜一猜，前面不是介绍过从1加到100的算法吗？</p>\n<p>第七行，+=是什么鬼符号？不懂。</p>\n<p>第八行，print是打印的意思！！哈哈，英语水平真是高啊，后面加个f，应该是函数、功能function的意思吧。那么，就是说它有打印的功能咯？打印啥呢？这不是用一个括号给括起来了嘛。前面汉字好懂，中间%d不懂，最后又有一个sum，再看看整句话，那个%d是不是就是sum呢。</p>\n<p>第九行，return是返回的意思！返回0？这是什么鬼。——这个鬼好神秘的~</p>\n<p>第十行，又是一个大括号。嚄！是右边的大括号！！还记得第三行的大括号吗，他们不是cp么。。。cp怎么能分开呢，他们可是生生世世在一起永远不分离的。——不过一般都是异地恋呢。</p>\n<p>OKay，程序代码分析完毕。就十行，比旁边小伙伴从1加到100写99行算式总归是精简了好多呢。<br>但是这特么没有告诉我们结果啊！<br>现在，我再说几个重点：</p>\n<ol>\n<li>C语言是一门编译型语言，写好的代码，一般是存储在一个名为NAME,后缀为c的NAME.c文件中，但是这个文件需要经过编译，才能被计算机所认识。来做这个编译工作的——其实就是翻译，叫做编译器，compiler。</li>\n<li>编译好之后，然后就可以生成了——好比小说写好后出版。</li>\n<li>然后就可以运行了，run。</li>\n<li>然后就可以看到程序的结果了——谨记，编写一个程序，肯定是希望它有输出的，汇报总该要有，总不能默不作声吧，那样谁知道它到底干了些啥。</li>\n</ol>\n<p>以上是我归纳的简化版过程——真实的过程是比较复杂的。但是这个简化版够用了。</p>\n<p>以上部门仍然是为了勾勒一个初步的印象，至于具体的学习，请看下一部分——入门。</p>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>我无意在这里重复所有C语言教材都会有的说教部分。<br><strong>下面我点几个需要仔细阅读教材中相关内容的东东：</strong></p>\n<ol>\n<li>关键词，这个不多，就是几十个英文单词罢了，过目一遍，以及什么是关键词；</li>\n<li>数据类型，比如int，float，char；</li>\n<li>运算符，比如<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,;包括其他一些标点，比如<code>,</code>,<code>;</code>,<code>{</code>,<code>[</code>…</li>\n<li>表达式，例如<code>3+4</code>,<code>x+3</code>;</li>\n<li>控制结构，例如while,for,if。主要就是这两个循环和一个如果。</li>\n<li>printf和scanf函数。打印，扫描。输出，输入。</li>\n</ol>\n<p>别看只有6点，这几乎是你需要学习的六成内容了。<br>现在的话，可以马上去翻一翻目录，找到有关以上6点的章节（目录没找到那也不要紧，还可以上网），<strong>认真仔细地</strong>阅读一遍，标出你认为的重点，尤其是一些<strong>表格和definition</strong>。<br>然后再阅读一遍本文。<br>然后<strong>详细地</strong>阅读刚刚看过的教材中的部分。</p>\n<h1 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h1><p>请打开VC6.0，新建一个.c文件，把上面那个跟高斯比赛的程序代码拷贝到编辑框，保存，然后在VC6.0的面板上，找到一个感叹号！，点击这个按钮，程序就可以运行啦。<br>注意两点，鼠标悬浮在感叹号上面的时候，注意看显示出来的解释；<br>点击感叹号之后，注意看编辑框的下面那个框里面发生了什么。<br>如果报错了，不好意思，我的程序有一点问题，请通知我。</p>\n<h1 id=\"高级一点点的\"><a href=\"#高级一点点的\" class=\"headerlink\" title=\"高级一点点的\"></a>高级一点点的</h1><p>下面的程序，可能乍看之下还有点难，放在这里只是让你有个对照。这个程序的功能是转置一个矩阵。如果学过线性代数的话，你可以很快理解这个过程。<br>不理解也不要紧，因为这个程序里面出现的东西都是以后经常见到的，早点见面可以熟悉一下脸嘛。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main( )</span><br><span class=\"line\">&#123; static int a[2][3]=&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</span><br><span class=\"line\">  static int b[3][2], i, j;</span><br><span class=\"line\">  printf(&quot;array a:\\n&quot;);</span><br><span class=\"line\">  for (i=0; i&lt;=1; i++)</span><br><span class=\"line\">    &#123; for ( j=0; j&lt;=2; j++)</span><br><span class=\"line\">        &#123; printf(&quot;%5d&quot;,a[i][ j]);   b[ j][i]=a[i][ j]; &#125;       printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  printf(&quot;array b:\\n&quot;);</span><br><span class=\"line\">  for (i=0; i&lt;=2; i++)</span><br><span class=\"line\">    &#123; for ( j=0; j&lt;=1; j++)    printf(&quot;%5d&quot;,b[i][ j]);</span><br><span class=\"line\">      printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>顺便，有木有觉得上面这个程序很丑？<br>那是因为，这不是我写的。</p>\n"},{"date":"2017-11-24T17:41:16.000Z","status":"public","title":"Celery常见问题","keywords":["RabbitMQ","Redis","Celery","Python","中间件","消息队列"],"_content":"\n## 译文出处\nhttp://docs.celeryproject.org/en/latest/faq.html\n\nThis document describes the current stable version of Celery (4.1).\n\n本文长期更新地址： [Celery4.1常见问题](http://blog.cannot.cc/Celery_FAQ_4_1_Stable.html)\n\n**术语翻译对照**\n\n|英文|中文|\n|---|---|\n|celery|celery|\n|worker|worker|\n|queue|队列|\n|message|消息|\n|task|任务|\n\n## 常规\n### 应该用Celery来处理什么样的事情？\n答案：[Queue everything and delight everyone](https://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/) ([我的译文参见]())解释了为什么你会需要在web的上下文中使用队列。\n\n这里是一些普遍的使用案例：\n- 在后台运行。例如For example, to finish the web request as soon as possible, then update the users page incrementally. This gives the user the impression of good performance and “snappiness”, even though the real work might actually take some time.\n- 在web请求结束后运行\n- 通过异步执行和重试，确保一些事情完成了\n- 制定周期任务\n\n以及一定程度上：\n- 分布式计算\n- 并行执行\n\n## 误解\n### Celery真的有50000行代码吗？\n答案：没有。这个和类似的庞大数字在各种场合经常被报道。\n- 核心：7141行代码\n- 测试：14209行\n- 后端，贡献，兼容性代码：9032行\n\n代码行数不是有用的度量标准，因此，即便Celery真的有50K行代码，你也不能从这个数字中得到任何结论。\n\n### Celery有很多依赖吗？\n一个普遍的批评是说Celery使用了太多的依赖。这种担忧背后的原理很难想象，特别是考虑到代码复用在现代软件开发中已经作为成熟的解决复杂性的方式，而且在使用诸如pip和PyPI包管理工具后引入依赖的开销非常低——安装和维护依赖的麻烦已经成为过去式了。\n\n一路上，Celery替换了一些依赖，现在的依赖列表如下：\n#### **celery**\n- kombu\nKombu是Celery生态系统的一部分，是用来发送和接收messages的库。也是使得Celery支持如此多不同的message brokers的库。Kombu也被用在OpenStack项目中，和其他许多项目中，验证了将其从Celery基础代码中分割出来的选择是有效的。\n\n- billiard\nbilliard是Python多进程模块的一个分叉fork，包含了许多性能和稳定性改善。有一天这些改善最终将会被合并到Python中。\n\nbilliard也被用来处理没有多进程模块的老版本python的兼容问题。\n\n- pytz\n提供时区定义和相关工具。\n#### kombu\nKombu依赖于下面的包：\n- amqp\n\n纯Python实现的amqp客户端。AMQP作为默认broker是很自然的依赖。\n\n>>Note:\n为了解决流行的配置选择的依赖，Celery定义了许多“bundle”包（捆绑安装^_^）。[详见](http://docs.celeryproject.org/en/latest/getting-started/introduction.html#bundles)\n\n### Celery是heavy-weight，很重的吗？\nCelery在内存足迹（memory footprint）和性能上造成了非常轻微的开销。但是请注意，默认配置并未在时间或空间上进行优化，[优化](http://docs.celeryproject.org/en/latest/userguide/optimizing.html#guide-optimizing)。\n\n### Celery依赖于pickle（序列化库）吗？\n答案：不，Celery可以支持任何序列化策略。\n我们內建支持JSON、YAML、Pickle和msgpack。每个任务都和一种content type挂钩，因此你甚至可以一个任务用pickle，另一个用JSON。默认的序列化支持是pickle，但是从4.0版本起，是JSON。如果你需要发送复杂的Python对象作为任务参数，你可以使用pickle作为序列化格式，但是需要注意[Notes in Serializers](http://docs.celeryproject.org/en/latest/userguide/security.html#security-serializers)。\n\n如果你需要和其他语言通信，你应该使用合适于任务的序列化格式，通常意味着不能用pickle了。\n你可以设置一个全局的默认序列化器serializer，默认的serializer用于特定的任务，或者发送单个任务 instance的时候决定用什么serializer。\n\n### Celery只支持Django吗？\n答案：不。\n\n### 我必须使用AMQP/RabbitMQ吗？\n答案：不，尽管使用RabbitMQ是推荐的，你也可以使用Redis，SQS，或者Qpid。更多参见[broker](http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html#brokers)\n\nRedis作为broker表现不如AMQP，但是RabbitMQ作为broker，Redis作为结果存储的组合方式很常用。如果你有严格的可靠性要求，最好使用RabbitMQ，或者其他AMQP broker。一些transports也用轮询（polling），因此他们可能会消耗更多的资源。但是，如果你因为某些原因不能使用AMQP，可以放心使用这些替代品，在大部分场景下都能工作良好，而且以上不是为Celery量身定制的。如果你之前使用Redis/database作为队列也工作得很好，那现在也能。你一直可以到需要的时候再升级。\n\n\n### Celery是多语言的吗？\n答案：是。\nworker是用Python实现的。如果某门语言有AMQP客户端，那用这门语言创建一个worker不需要做太多事情。一个Celery的worker只是一个连接broker来处理messages的程序。\n\n而且，有另一种方式来做到语言独立，就是用REST的任务，这样你的任务就不是函数而是url了。有这个信息，你甚至可以创建一个简单的web服务器开启代码预加载。简单地暴露一个表现一个操作的端点endpoint，再创建一个任务，这个任务只是将一个HTTP请求表现给那个端点。\n\n\n## 解决问题\n### MySQL抛出死锁错误，怎么办？\n答案：MySQL有默认的隔离级别设置为REPEATABLE-READ（可重复读），如果你并不真正需要它，可以设置为READ-COMMITTED（读提交）。你可以通过在my.cnf中加入：\n```conf\n[mysqld]\ntransaction-isolation = READ-COMMMITTED\n```\n更多有关InnoDB的事务模型，参见[MySQL - The InnoDB Transaction Model and Locking ](https://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html).\n\n### worker什么都不做，hanging挂起了\n答案：参见MySQL死锁，或者 Task.delay\n\n### 任务结果返回不可靠\n答案：如果你使用数据库后端存储结果，特别是MySQL，可能是死锁。参见上上个问题。\n\n### 为什么`Task.delay/apply*`这些调用之后worker只是挂起？\n答案： 一些AMQP客户端有一个bug，如果当前用户无法认证、密码不匹配或者用户没有访问指定虚拟主机的权限，就会挂起。检查broker的日志（RabbitMQ的在/var/log/rabbitmq/rabbit.log），通常会有消息描述原因。\n\n### 兼容FreeBSD系统吗？\n答案：看情况。\nWhen using the RabbitMQ (AMQP) and Redis transports it should work out of the box.\n\nFor other transports the compatibility prefork pool is used and requires a working POSIX semaphore implementation, this is enabled in FreeBSD by default since FreeBSD 8.x. For older version of FreeBSD, you have to enable POSIX semaphores in the kernel and manually recompile billiard.\n\nLuckily, Viktor Petersson has written a tutorial to get you started with Celery on FreeBSD here: http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/\n\n### 遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？\n答案：MySQL死锁。\n\n### 我的任务为什么没有被处理？\n答案：用RabbitMQ的话，你可以通过运行如下命令看有多少个消费者当前在接收任务：\n```bash\n$ rabbitmqctl list_queues -p <myvhost> name messages consumers\nListing queues ...\ncelery     2891    2\n```\n以上输出表明任务-队列里有2891条messages在等待被处理，而且有两个消费者正在处理他们。\n\n队列从未被清空的一个原因可能是你有一个过期的worker进程劫持了这些messages。如果这个worker没有被正确地杀掉，就有可能发生这种情况。\n\n当一个message被一个worker接收到了，这个worker在标记该message被处理前会等待被应答。这个worker不会重发message给另一个消费者，直到该消费者被正确地关闭。\n如果你遇到这个问题，你必须手动杀掉所有的worker并重启：\n```bash\n$ pkill 'celery worker'\n\n$ # - If you don't have pkill use:\n$ # ps auxww | grep 'celery worker' | awk '{print $2}' | xargs kill\n```\n你可能必须等一会儿，知道所有的worker都结束了正在执行的任务。如果仍然长时间挂起，你可以强制杀掉：\n```bash\n$ pkill -9 'celery worker'\n\n$ # - If you don't have pkill use:\n$ # ps auxww | grep 'celery worker' | awk '{print $2}' | xargs kill -9\n```\n\n### 我的任务为什么不会运行？\n答案：可能有语法错误导致任务模块没有被导入。\n你可以看看通过手动执行任务，Celery能不能运行该任务：\n```\n>>> from myapp.tasks import MyPeriodicTask\n>>> MyPeriodicTask.delay()\n```\n观察worker的日志文件，是否可以找到该任务，或者有没有其他错误发生。\n\n### 我的定时任务为什么不会运行？\n答案：参见上一个问题。\n\n### 我怎么清理所有的等待中任务？\n答案：你可以使用`celery purge`命令来清理所有的已配置的任务队列。\n```bash\n$ celery -A proj purge\n```\n或者在代码中：\n```\n>>> from proj.celery import app\n>>> app.control.purge()\n1753\n```\n如果你只是想清理特定队列中的消息，你必须使用AMQP API，或者`celery amqp`的功能：\n```bash\n$ celery -A proj amqp queue.purge <queue name>\n```\n1753是被清理的消息数。\n\n你也可以开启`--purge`选项去启动worker，worker启动的时候就会清理消息。\n\n### 我清理了message，但是队列队列中仍然有消息残留？\n答案：只要任务真的被执行了，任务就被应答（从队列中移除）了。在worker接收到一个任务之后，在真正被执行前需要一点时间，特别是如果有大量任务已经在等待执行。没有被应答的消息，会被worker保持，直到消息关闭和broker（AMQP服务器）的连接。当连接关闭时（比如，因为worker停止了），任务会被broker重发给下一个可用的worker（或者在worker重启后又发给它），因此正确地清理等待任务的队列需要停掉所有的worker，然后再用`celery.control.purge`清理任务。\n\n## 结果\n### 如果我有一个id指向一个任务，怎么得到任务结果？\n答案：用`task.AsyncResult`。\n```\n>>> result = my_task.AsyncResult(task_id)\n>>> result.get()\n```\n这会用任务的当前结果后端(result backend)返回一个[AsyncResult](http://docs.celeryproject.org/en/latest/reference/celery.result.html#celery.result.AsyncResult)的实例。\n如果你需要指定一个自定义的结果后端，或者你想使用当前应用的默认后端，你可以使用`app.AsyncResult`:\n```\n>>> result = app.AsyncResult(task_id)\n>>> result.get()\n```\n\n## 安全\n### 使用pickle不是有安全隐患吗？\n答案：事实上，自从Celery4.0起，默认的序列化器是现在的JSON，就确保了人们有意识地选择序列化器并且意识到了这一担忧。\n防范未认证授权的worker、数据库和其他传输pickled数据的服务接入是必要的。\n注意到这不仅仅是你应该意识到有关Celery的问题，例如Django也使用pickle作为其缓存客户端。\n对任务消息，你可以设置`task_serializer`为`json`或者`yaml`，而不是pickle。\n类似地可以设置`result_serializer`。\n\n### message是否可以加密？\n答案：一些AMQPworker支持使用SSL（包括RabbitMQ），你可以通过`broker_use_ssl`开启这一功能。\n给消息加入额外的加密和安全性也是可能的，如果你有需求，应该联系邮件列表。\n\n### 以root用户运行worker是安全的吗？\n答案：不是！\n我们现在还没有发觉任何安全问题，但是认为安全问题不存在就太天真了，因此推荐以非特权用户运行Celery服务（celery woker， celery beat， celeryev等）。\n\n## Brokers\n### 为什么RabbitMQ崩溃了？\n答案：RabbitMQ如果用光内存就会崩溃。未来版本的RabbitMQ会修复这一个问题。https://www.rabbitmq.com/faq.html#node-runs-out-of-memory\n\n>>注意：\n这已经不再是问题，RabbitMQ2.0+包含了一个新的固件，对内存不足错误是容忍的。因此推荐RabbitMQ2.1+版本配合Celery使用。如果你还在使用老版本，而且还遇到崩溃问题，赶紧升级吧。\n\nCelery的错误配置最终也会导致老版本RabbitMQ的崩溃。即便不崩溃，也会消耗大量的资源，因此意识到这一普遍陷阱很重要。\n\n- 事件Events\n加上`-E`选项运行worker将会在worker内部事件发生时发送消息。\n事件应该只在你有一个活跃的监控器消费事件的时候才被开启，否则你需要定期清理事件队列。\n\n- AMQP 后端结果\n在使用AMQP结果后端运行的时候，每个任务结果都会作为消息发送。如果你不收集collect这些结果，他们会积累，RabbitMQ最终会耗尽内存。\n结果后端现在被弃用了，所以你不应该再使用。如果你需要多个消费者访问结果，可以用RPC后端来做rpc风格的调用，或者一个持久化的后端。\n默认情况下结果在一天后失效。可以通过配置`result_expires`来降低这个有效期。\n\n如果你不需要任务结果，确保你设置了`ignore_result`选项。\n```python\n@app.task(ignore_result=True)\ndef mytask():\n    pass\n\nclass MyTask(Task):\n    ignore_result = True\n```\n\n### Celery可以和ActiveMQ/STOMP一起使用吗？\n答案：不能。\n\n### 不使用AMQP broker时，哪些特征不支持了？\n不完全列表：\n- 远程控制命令（仅由Redis支持）\n- 事件监控在所有的虚拟传输中可能不会工作\n- header和fanout（扇出，Redis支持） exchange types\n\n\n## 任务\n### 调用tasks时如何复用连接？\n答案：查看`broker_pool_limit`设置。v2.5+就默认开启连接池了。\n\n### 子进程中sudo反回了None\n有一个sudo的配置选项来使得不经过tty运行sudo的处理是非法的。\n```\nDefaults requiretty\n```\n如果你在`/etc/sudoers`文件中有这项配置，那worker作为守护进程跑的时候，任务将不能调用sudo。如果你想开启，你需要移除上面那一行。[http://timelordz.com/wiki/Apache_Sudo_Commands](http://timelordz.com/wiki/Apache_Sudo_Commands)\n\n\n### 为什么workers不能处理任务的时候还能将任务从队列中删除？\n答案：worker拒绝未知任务、错误编码的消息、不包含正确域field的消息（按照任务消息协议）。\n如果不拒绝这些，会导致重复传送，引发死循环。\n最近版本的RabbitMQ有能力配置一个dead-letter队列来交换，所以那些被拒的消息就被转移到了那里。\n\n### 我可以通过任务名称调用任务吗？\n答案：是的，用`app.send_task`。\n你也可以在任何语言中使用AMQP客户端通过名字调用一个任务：\n```\n>>> app.send_task('tasks.add', args=[2, 2], kwargs={})\n<AsyncResult: 373550e8-b9a0-4666-bc61-ace01fa4f91d>\n```\n\n### 我能设置当前任务的id吗？\n答案：是的，当前id以及更多内容在任务请求里都是可用的。\n```python\n@app.task(bind=True)\ndef mytask(self):\n    cache.set(self.request.id, \"Running\")\n```\n[Task Request](http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-request-info)\n如果你没有任务实例的引用，你可以使用`app.current_task`：\n```\n>>> app.current_task.request.id\n```\n但是需要注意，这可能是任何任务，一个被worker执行的任务，或者一个直接被任务调用的任务，或者一个急切eager调用的任务。（此处原文：But note that this will be any task, be it one executed by the worker, or a task called directly by that task, or a task called eagerly.）\n\n可以用`current_worker_task`得到特定的当前被执行的任务：\n```\n>>> app.current_worker_task.request.id\n```\n\n需要注意`current_task`, 和 `current_worker_task` 可能是None。\n\n\n### 我如何指定一个自定义的task_id？\n答案：能。\n```\n>>> task.apply_async(args, kwargs, task_id='…')\n```\n\n### 任务上可以使用装饰器吗？\n答案：能，但需要注意 [Basics的侧边栏](http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-basics)\n\n### 我能使用自然数作为task ids吗？\n答案：能。但是确保其是唯一的，因为两个相同id的任务的行为是未定义的。\n\n### 我能指定，一旦另一个task结束，马上运行一个task吗？\n答案：能。你可以在一个任务里面安全地启动一个任务。一个常用的模式是给任务加上回调：\n```python\nfrom celery.utils.log import get_task_logger\n\nlogger = get_task_logger(__name__)\n\n@app.task\ndef add(x, y):\n    return x + y\n\n@app.task(ignore_result=True)\ndef log_result(result):\n    logger.info(\"log_result got: %r\", result)\n```\n调用：\n```\n>>> (add.s(2, 2) | log_result.s()).delay()\n```\n获取更多信息：[Canvas: Designing Work-flows](http://docs.celeryproject.org/en/latest/userguide/canvas.html)\n\n### 我能取消任务的执行吗？\n答案：能。用`result.revoke()`:\n```\n>>> result = add.apply_async(args=[2, 2], countdown=120)\n>>> result.revoke()\n```\n或者，只有任务id时：\n```\n>>> from proj.celery import app\n>>> app.control.revoke(task_id)\n```\n后者也支持传入任务id列表作为参数。\n\n### 为什么我的远程控制命令被所有的workers接收到了？\n答案：为了接收到广播的远程控制命令，每一个worker节点基于其节点名创建了一个唯一的队列名。如果你有超过一个worker的主机名相同，控制命令将会在他们间循环接收。\n为解决这个问题，你可以用`-n`参数显式地为每个worker设置节点名：\n```\n$ celery -A proj worker -n worker1@%h\n$ celery -A proj worker -n worker2@%h\n```\n这里`%h`扩展成当前主机名。\n\n### 我能发送一些任务到限定的一些服务器上吗？\n答案：是的。你可以使用不同的消息路由拓扑，将任务路由到一个或多个worker上，而且一个worker实例可以绑定到多个队列。\n[Routing Tasks](http://docs.celeryproject.org/en/latest/userguide/routing.html)\n\n### 我能禁掉任务的预取prefetching吗？\n答案：可能！AMQP的属于prefetch令人疑惑，因为它只被用来描述任务预取限制(task prefetching limit)。没有涉及实际的预取。\n禁掉预取限制是可能的，但是那意味着worker会消费尽可能快地消费尽可能多的任务。\n[一个有关预取限制的讨论，和worker的配置设定:同一时间只预定一个任务](http://docs.celeryproject.org/en/latest/userguide/optimizing.html#optimizing-prefetch-limit)\n\n### 我可以在运行时改变周期任务的间隔时间吗？\n答案：可以。你可以使用Django的数据库调度器，或者你可以创建一个新的调度子类，覆写`is_due()`:\n```python\nfrom celery.schedules import schedule\n\nclass my_schedule(schedule):\n\n    def is_due(self, last_run_at):\n        return run_now, next_time_to_check\n```\n### Celery支持task优先级吗？\n答案：是的， RabbitMQv3.5.0+就支持优先级，Redis传输仿真实现了优先级支持。\n你也可以通过将高优先级任务路由到不同的worker中，从而把工作优先级排好。在真实世界中，这通常比每一个消息的优先级更为奏效。你可以使用速率限制（rate limiting）和单条消息优先级（per message priorities）的组合来实现响应式的系统。\n\n### 我应该使用重试retry还是acks_late？\n答案：看情况。用一个或者另一个都不是必要的，你可能想要使用两个。\n`Task.retry`用来重试任务，这是可以用`try`语句catch到可预知的错误（expected errors）的。AMQP事务不是用来处理这些错误的：如果任务引发了异常，仍然会被应答！\n\n如果某些原因worker在执行中挂掉了，你需要任务再次执行时，可以使用`acks_late`设置。没人知道worker挂掉了，这很重要，如果知道worker挂掉，通常有不可恢复的错误，需要人工介入（worker或者任务代码的bug）。\n理想情况下，你可以安全地重试任何失败的任务，但是有少数情况例外，假设有如下任务：\n```python\ndef process_upload(filename, tmpfile):\n    # Increment a file count stored in a database\n    increment_file_counter()\n    add_file_metadata_to_db(filename, tmpfile)\n    copy_file_to_destination(filename, tmpfile)\n```\n如果它在拷贝文件时挂掉了，我们会知道这里有个未完成状态存在。这不是个严格的教学场景，但你大概可以想象一些更为灾难性的场景。目前为止，编程较少的话则可靠性更弱。默认值是好的，需要它并且知道它们在干什么的用户仍然能开启`acks_late`（未来希望使用手动应答）。\n此外，`Task.retry`在AMQP事务中有不可用的特性：在重试中延迟，最大重试次数等。\n因此，可以对Python中的错误使用重试，如果你的任务是幂等的而且要求可靠性级别，结合`acks_late`一起使用。\n\n### 我可以计划让tasks在特定的时间执行吗？\n答案：可以。使用`Task.apply_async()`的eta参数。[周期任务](http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#guide-beat)\n\n### 我可以安全地关闭worker吗？\n答案：是的，使用`TERM`信号。这会告诉worker去结束所有当前执行的作业，然后尽可能快地关闭。只要完全关闭，实验性的传输中也不应该会有任务丢失。\n你决不应该通过`KILL`信号(`kill -9`)来停止worker，除非你试过几次`TERM`等了几分钟看有没有关闭。\n\n另外，确保你只是杀掉了worker的主进程，而不是它的任何子进程。如果你知道关闭worker所依赖的一个子进程正在执行一个任务，你可以给这个特定的子进程指定一个杀死信号（kill signal），这也意味着任务会被设定一个WorkerLostError状态，因此这个任务不会再执行了。\n\n如果你安装了`setproctitle`模块，指定进程类型很容易。\n```bash\n$ pip install setproctitle\n```\n安装这个库，你可以看到在ps命令的列表中看到进程类型，但是worker必须重启才能生效。\n\n[停止worker](http://docs.celeryproject.org/en/latest/userguide/workers.html#worker-stopping)\n\n### 我可以在平台的后端运行worker吗？\nAnswer: Yes, please see [Daemonization[(http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing.\n\n## Django\n### django-celery-beat创建的数据库表有什么目的？\n用到数据库后端定时器（database-backend schedule）的时候，从PeriodicTask的数据模型中取出周期任务计划有一些其他的辅助表 (IntervalSchedule, CrontabSchedule, PeriodicTasks)。\n\n### django-celery-results创建的数据库表有什么目的？\nDjango的数据库结果后端扩展需要两个额外的数据模型：TaskResult and GroupResult.\n\n## Windows\n### Celery支持Windows吗？\n答案：不。4.x版本以上就不支持Windows了。\n\n\n# 欢迎扫码加群交流\n![](http://opkk27k9n.bkt.clouddn.com/17-11-26/19293813.jpg)\n","source":"_posts/Celery_FAQ_4_1_Stable.md","raw":"---\ndate: 2017-11-25 01:41:16\nstatus: public\ntitle: Celery常见问题\nkeywords: \n- RabbitMQ\n- Redis\n- Celery\n- Python\n- 中间件\n- 消息队列\ntags: \n\ncategories: 翻译\n---\n\n## 译文出处\nhttp://docs.celeryproject.org/en/latest/faq.html\n\nThis document describes the current stable version of Celery (4.1).\n\n本文长期更新地址： [Celery4.1常见问题](http://blog.cannot.cc/Celery_FAQ_4_1_Stable.html)\n\n**术语翻译对照**\n\n|英文|中文|\n|---|---|\n|celery|celery|\n|worker|worker|\n|queue|队列|\n|message|消息|\n|task|任务|\n\n## 常规\n### 应该用Celery来处理什么样的事情？\n答案：[Queue everything and delight everyone](https://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/) ([我的译文参见]())解释了为什么你会需要在web的上下文中使用队列。\n\n这里是一些普遍的使用案例：\n- 在后台运行。例如For example, to finish the web request as soon as possible, then update the users page incrementally. This gives the user the impression of good performance and “snappiness”, even though the real work might actually take some time.\n- 在web请求结束后运行\n- 通过异步执行和重试，确保一些事情完成了\n- 制定周期任务\n\n以及一定程度上：\n- 分布式计算\n- 并行执行\n\n## 误解\n### Celery真的有50000行代码吗？\n答案：没有。这个和类似的庞大数字在各种场合经常被报道。\n- 核心：7141行代码\n- 测试：14209行\n- 后端，贡献，兼容性代码：9032行\n\n代码行数不是有用的度量标准，因此，即便Celery真的有50K行代码，你也不能从这个数字中得到任何结论。\n\n### Celery有很多依赖吗？\n一个普遍的批评是说Celery使用了太多的依赖。这种担忧背后的原理很难想象，特别是考虑到代码复用在现代软件开发中已经作为成熟的解决复杂性的方式，而且在使用诸如pip和PyPI包管理工具后引入依赖的开销非常低——安装和维护依赖的麻烦已经成为过去式了。\n\n一路上，Celery替换了一些依赖，现在的依赖列表如下：\n#### **celery**\n- kombu\nKombu是Celery生态系统的一部分，是用来发送和接收messages的库。也是使得Celery支持如此多不同的message brokers的库。Kombu也被用在OpenStack项目中，和其他许多项目中，验证了将其从Celery基础代码中分割出来的选择是有效的。\n\n- billiard\nbilliard是Python多进程模块的一个分叉fork，包含了许多性能和稳定性改善。有一天这些改善最终将会被合并到Python中。\n\nbilliard也被用来处理没有多进程模块的老版本python的兼容问题。\n\n- pytz\n提供时区定义和相关工具。\n#### kombu\nKombu依赖于下面的包：\n- amqp\n\n纯Python实现的amqp客户端。AMQP作为默认broker是很自然的依赖。\n\n>>Note:\n为了解决流行的配置选择的依赖，Celery定义了许多“bundle”包（捆绑安装^_^）。[详见](http://docs.celeryproject.org/en/latest/getting-started/introduction.html#bundles)\n\n### Celery是heavy-weight，很重的吗？\nCelery在内存足迹（memory footprint）和性能上造成了非常轻微的开销。但是请注意，默认配置并未在时间或空间上进行优化，[优化](http://docs.celeryproject.org/en/latest/userguide/optimizing.html#guide-optimizing)。\n\n### Celery依赖于pickle（序列化库）吗？\n答案：不，Celery可以支持任何序列化策略。\n我们內建支持JSON、YAML、Pickle和msgpack。每个任务都和一种content type挂钩，因此你甚至可以一个任务用pickle，另一个用JSON。默认的序列化支持是pickle，但是从4.0版本起，是JSON。如果你需要发送复杂的Python对象作为任务参数，你可以使用pickle作为序列化格式，但是需要注意[Notes in Serializers](http://docs.celeryproject.org/en/latest/userguide/security.html#security-serializers)。\n\n如果你需要和其他语言通信，你应该使用合适于任务的序列化格式，通常意味着不能用pickle了。\n你可以设置一个全局的默认序列化器serializer，默认的serializer用于特定的任务，或者发送单个任务 instance的时候决定用什么serializer。\n\n### Celery只支持Django吗？\n答案：不。\n\n### 我必须使用AMQP/RabbitMQ吗？\n答案：不，尽管使用RabbitMQ是推荐的，你也可以使用Redis，SQS，或者Qpid。更多参见[broker](http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html#brokers)\n\nRedis作为broker表现不如AMQP，但是RabbitMQ作为broker，Redis作为结果存储的组合方式很常用。如果你有严格的可靠性要求，最好使用RabbitMQ，或者其他AMQP broker。一些transports也用轮询（polling），因此他们可能会消耗更多的资源。但是，如果你因为某些原因不能使用AMQP，可以放心使用这些替代品，在大部分场景下都能工作良好，而且以上不是为Celery量身定制的。如果你之前使用Redis/database作为队列也工作得很好，那现在也能。你一直可以到需要的时候再升级。\n\n\n### Celery是多语言的吗？\n答案：是。\nworker是用Python实现的。如果某门语言有AMQP客户端，那用这门语言创建一个worker不需要做太多事情。一个Celery的worker只是一个连接broker来处理messages的程序。\n\n而且，有另一种方式来做到语言独立，就是用REST的任务，这样你的任务就不是函数而是url了。有这个信息，你甚至可以创建一个简单的web服务器开启代码预加载。简单地暴露一个表现一个操作的端点endpoint，再创建一个任务，这个任务只是将一个HTTP请求表现给那个端点。\n\n\n## 解决问题\n### MySQL抛出死锁错误，怎么办？\n答案：MySQL有默认的隔离级别设置为REPEATABLE-READ（可重复读），如果你并不真正需要它，可以设置为READ-COMMITTED（读提交）。你可以通过在my.cnf中加入：\n```conf\n[mysqld]\ntransaction-isolation = READ-COMMMITTED\n```\n更多有关InnoDB的事务模型，参见[MySQL - The InnoDB Transaction Model and Locking ](https://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html).\n\n### worker什么都不做，hanging挂起了\n答案：参见MySQL死锁，或者 Task.delay\n\n### 任务结果返回不可靠\n答案：如果你使用数据库后端存储结果，特别是MySQL，可能是死锁。参见上上个问题。\n\n### 为什么`Task.delay/apply*`这些调用之后worker只是挂起？\n答案： 一些AMQP客户端有一个bug，如果当前用户无法认证、密码不匹配或者用户没有访问指定虚拟主机的权限，就会挂起。检查broker的日志（RabbitMQ的在/var/log/rabbitmq/rabbit.log），通常会有消息描述原因。\n\n### 兼容FreeBSD系统吗？\n答案：看情况。\nWhen using the RabbitMQ (AMQP) and Redis transports it should work out of the box.\n\nFor other transports the compatibility prefork pool is used and requires a working POSIX semaphore implementation, this is enabled in FreeBSD by default since FreeBSD 8.x. For older version of FreeBSD, you have to enable POSIX semaphores in the kernel and manually recompile billiard.\n\nLuckily, Viktor Petersson has written a tutorial to get you started with Celery on FreeBSD here: http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/\n\n### 遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？\n答案：MySQL死锁。\n\n### 我的任务为什么没有被处理？\n答案：用RabbitMQ的话，你可以通过运行如下命令看有多少个消费者当前在接收任务：\n```bash\n$ rabbitmqctl list_queues -p <myvhost> name messages consumers\nListing queues ...\ncelery     2891    2\n```\n以上输出表明任务-队列里有2891条messages在等待被处理，而且有两个消费者正在处理他们。\n\n队列从未被清空的一个原因可能是你有一个过期的worker进程劫持了这些messages。如果这个worker没有被正确地杀掉，就有可能发生这种情况。\n\n当一个message被一个worker接收到了，这个worker在标记该message被处理前会等待被应答。这个worker不会重发message给另一个消费者，直到该消费者被正确地关闭。\n如果你遇到这个问题，你必须手动杀掉所有的worker并重启：\n```bash\n$ pkill 'celery worker'\n\n$ # - If you don't have pkill use:\n$ # ps auxww | grep 'celery worker' | awk '{print $2}' | xargs kill\n```\n你可能必须等一会儿，知道所有的worker都结束了正在执行的任务。如果仍然长时间挂起，你可以强制杀掉：\n```bash\n$ pkill -9 'celery worker'\n\n$ # - If you don't have pkill use:\n$ # ps auxww | grep 'celery worker' | awk '{print $2}' | xargs kill -9\n```\n\n### 我的任务为什么不会运行？\n答案：可能有语法错误导致任务模块没有被导入。\n你可以看看通过手动执行任务，Celery能不能运行该任务：\n```\n>>> from myapp.tasks import MyPeriodicTask\n>>> MyPeriodicTask.delay()\n```\n观察worker的日志文件，是否可以找到该任务，或者有没有其他错误发生。\n\n### 我的定时任务为什么不会运行？\n答案：参见上一个问题。\n\n### 我怎么清理所有的等待中任务？\n答案：你可以使用`celery purge`命令来清理所有的已配置的任务队列。\n```bash\n$ celery -A proj purge\n```\n或者在代码中：\n```\n>>> from proj.celery import app\n>>> app.control.purge()\n1753\n```\n如果你只是想清理特定队列中的消息，你必须使用AMQP API，或者`celery amqp`的功能：\n```bash\n$ celery -A proj amqp queue.purge <queue name>\n```\n1753是被清理的消息数。\n\n你也可以开启`--purge`选项去启动worker，worker启动的时候就会清理消息。\n\n### 我清理了message，但是队列队列中仍然有消息残留？\n答案：只要任务真的被执行了，任务就被应答（从队列中移除）了。在worker接收到一个任务之后，在真正被执行前需要一点时间，特别是如果有大量任务已经在等待执行。没有被应答的消息，会被worker保持，直到消息关闭和broker（AMQP服务器）的连接。当连接关闭时（比如，因为worker停止了），任务会被broker重发给下一个可用的worker（或者在worker重启后又发给它），因此正确地清理等待任务的队列需要停掉所有的worker，然后再用`celery.control.purge`清理任务。\n\n## 结果\n### 如果我有一个id指向一个任务，怎么得到任务结果？\n答案：用`task.AsyncResult`。\n```\n>>> result = my_task.AsyncResult(task_id)\n>>> result.get()\n```\n这会用任务的当前结果后端(result backend)返回一个[AsyncResult](http://docs.celeryproject.org/en/latest/reference/celery.result.html#celery.result.AsyncResult)的实例。\n如果你需要指定一个自定义的结果后端，或者你想使用当前应用的默认后端，你可以使用`app.AsyncResult`:\n```\n>>> result = app.AsyncResult(task_id)\n>>> result.get()\n```\n\n## 安全\n### 使用pickle不是有安全隐患吗？\n答案：事实上，自从Celery4.0起，默认的序列化器是现在的JSON，就确保了人们有意识地选择序列化器并且意识到了这一担忧。\n防范未认证授权的worker、数据库和其他传输pickled数据的服务接入是必要的。\n注意到这不仅仅是你应该意识到有关Celery的问题，例如Django也使用pickle作为其缓存客户端。\n对任务消息，你可以设置`task_serializer`为`json`或者`yaml`，而不是pickle。\n类似地可以设置`result_serializer`。\n\n### message是否可以加密？\n答案：一些AMQPworker支持使用SSL（包括RabbitMQ），你可以通过`broker_use_ssl`开启这一功能。\n给消息加入额外的加密和安全性也是可能的，如果你有需求，应该联系邮件列表。\n\n### 以root用户运行worker是安全的吗？\n答案：不是！\n我们现在还没有发觉任何安全问题，但是认为安全问题不存在就太天真了，因此推荐以非特权用户运行Celery服务（celery woker， celery beat， celeryev等）。\n\n## Brokers\n### 为什么RabbitMQ崩溃了？\n答案：RabbitMQ如果用光内存就会崩溃。未来版本的RabbitMQ会修复这一个问题。https://www.rabbitmq.com/faq.html#node-runs-out-of-memory\n\n>>注意：\n这已经不再是问题，RabbitMQ2.0+包含了一个新的固件，对内存不足错误是容忍的。因此推荐RabbitMQ2.1+版本配合Celery使用。如果你还在使用老版本，而且还遇到崩溃问题，赶紧升级吧。\n\nCelery的错误配置最终也会导致老版本RabbitMQ的崩溃。即便不崩溃，也会消耗大量的资源，因此意识到这一普遍陷阱很重要。\n\n- 事件Events\n加上`-E`选项运行worker将会在worker内部事件发生时发送消息。\n事件应该只在你有一个活跃的监控器消费事件的时候才被开启，否则你需要定期清理事件队列。\n\n- AMQP 后端结果\n在使用AMQP结果后端运行的时候，每个任务结果都会作为消息发送。如果你不收集collect这些结果，他们会积累，RabbitMQ最终会耗尽内存。\n结果后端现在被弃用了，所以你不应该再使用。如果你需要多个消费者访问结果，可以用RPC后端来做rpc风格的调用，或者一个持久化的后端。\n默认情况下结果在一天后失效。可以通过配置`result_expires`来降低这个有效期。\n\n如果你不需要任务结果，确保你设置了`ignore_result`选项。\n```python\n@app.task(ignore_result=True)\ndef mytask():\n    pass\n\nclass MyTask(Task):\n    ignore_result = True\n```\n\n### Celery可以和ActiveMQ/STOMP一起使用吗？\n答案：不能。\n\n### 不使用AMQP broker时，哪些特征不支持了？\n不完全列表：\n- 远程控制命令（仅由Redis支持）\n- 事件监控在所有的虚拟传输中可能不会工作\n- header和fanout（扇出，Redis支持） exchange types\n\n\n## 任务\n### 调用tasks时如何复用连接？\n答案：查看`broker_pool_limit`设置。v2.5+就默认开启连接池了。\n\n### 子进程中sudo反回了None\n有一个sudo的配置选项来使得不经过tty运行sudo的处理是非法的。\n```\nDefaults requiretty\n```\n如果你在`/etc/sudoers`文件中有这项配置，那worker作为守护进程跑的时候，任务将不能调用sudo。如果你想开启，你需要移除上面那一行。[http://timelordz.com/wiki/Apache_Sudo_Commands](http://timelordz.com/wiki/Apache_Sudo_Commands)\n\n\n### 为什么workers不能处理任务的时候还能将任务从队列中删除？\n答案：worker拒绝未知任务、错误编码的消息、不包含正确域field的消息（按照任务消息协议）。\n如果不拒绝这些，会导致重复传送，引发死循环。\n最近版本的RabbitMQ有能力配置一个dead-letter队列来交换，所以那些被拒的消息就被转移到了那里。\n\n### 我可以通过任务名称调用任务吗？\n答案：是的，用`app.send_task`。\n你也可以在任何语言中使用AMQP客户端通过名字调用一个任务：\n```\n>>> app.send_task('tasks.add', args=[2, 2], kwargs={})\n<AsyncResult: 373550e8-b9a0-4666-bc61-ace01fa4f91d>\n```\n\n### 我能设置当前任务的id吗？\n答案：是的，当前id以及更多内容在任务请求里都是可用的。\n```python\n@app.task(bind=True)\ndef mytask(self):\n    cache.set(self.request.id, \"Running\")\n```\n[Task Request](http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-request-info)\n如果你没有任务实例的引用，你可以使用`app.current_task`：\n```\n>>> app.current_task.request.id\n```\n但是需要注意，这可能是任何任务，一个被worker执行的任务，或者一个直接被任务调用的任务，或者一个急切eager调用的任务。（此处原文：But note that this will be any task, be it one executed by the worker, or a task called directly by that task, or a task called eagerly.）\n\n可以用`current_worker_task`得到特定的当前被执行的任务：\n```\n>>> app.current_worker_task.request.id\n```\n\n需要注意`current_task`, 和 `current_worker_task` 可能是None。\n\n\n### 我如何指定一个自定义的task_id？\n答案：能。\n```\n>>> task.apply_async(args, kwargs, task_id='…')\n```\n\n### 任务上可以使用装饰器吗？\n答案：能，但需要注意 [Basics的侧边栏](http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-basics)\n\n### 我能使用自然数作为task ids吗？\n答案：能。但是确保其是唯一的，因为两个相同id的任务的行为是未定义的。\n\n### 我能指定，一旦另一个task结束，马上运行一个task吗？\n答案：能。你可以在一个任务里面安全地启动一个任务。一个常用的模式是给任务加上回调：\n```python\nfrom celery.utils.log import get_task_logger\n\nlogger = get_task_logger(__name__)\n\n@app.task\ndef add(x, y):\n    return x + y\n\n@app.task(ignore_result=True)\ndef log_result(result):\n    logger.info(\"log_result got: %r\", result)\n```\n调用：\n```\n>>> (add.s(2, 2) | log_result.s()).delay()\n```\n获取更多信息：[Canvas: Designing Work-flows](http://docs.celeryproject.org/en/latest/userguide/canvas.html)\n\n### 我能取消任务的执行吗？\n答案：能。用`result.revoke()`:\n```\n>>> result = add.apply_async(args=[2, 2], countdown=120)\n>>> result.revoke()\n```\n或者，只有任务id时：\n```\n>>> from proj.celery import app\n>>> app.control.revoke(task_id)\n```\n后者也支持传入任务id列表作为参数。\n\n### 为什么我的远程控制命令被所有的workers接收到了？\n答案：为了接收到广播的远程控制命令，每一个worker节点基于其节点名创建了一个唯一的队列名。如果你有超过一个worker的主机名相同，控制命令将会在他们间循环接收。\n为解决这个问题，你可以用`-n`参数显式地为每个worker设置节点名：\n```\n$ celery -A proj worker -n worker1@%h\n$ celery -A proj worker -n worker2@%h\n```\n这里`%h`扩展成当前主机名。\n\n### 我能发送一些任务到限定的一些服务器上吗？\n答案：是的。你可以使用不同的消息路由拓扑，将任务路由到一个或多个worker上，而且一个worker实例可以绑定到多个队列。\n[Routing Tasks](http://docs.celeryproject.org/en/latest/userguide/routing.html)\n\n### 我能禁掉任务的预取prefetching吗？\n答案：可能！AMQP的属于prefetch令人疑惑，因为它只被用来描述任务预取限制(task prefetching limit)。没有涉及实际的预取。\n禁掉预取限制是可能的，但是那意味着worker会消费尽可能快地消费尽可能多的任务。\n[一个有关预取限制的讨论，和worker的配置设定:同一时间只预定一个任务](http://docs.celeryproject.org/en/latest/userguide/optimizing.html#optimizing-prefetch-limit)\n\n### 我可以在运行时改变周期任务的间隔时间吗？\n答案：可以。你可以使用Django的数据库调度器，或者你可以创建一个新的调度子类，覆写`is_due()`:\n```python\nfrom celery.schedules import schedule\n\nclass my_schedule(schedule):\n\n    def is_due(self, last_run_at):\n        return run_now, next_time_to_check\n```\n### Celery支持task优先级吗？\n答案：是的， RabbitMQv3.5.0+就支持优先级，Redis传输仿真实现了优先级支持。\n你也可以通过将高优先级任务路由到不同的worker中，从而把工作优先级排好。在真实世界中，这通常比每一个消息的优先级更为奏效。你可以使用速率限制（rate limiting）和单条消息优先级（per message priorities）的组合来实现响应式的系统。\n\n### 我应该使用重试retry还是acks_late？\n答案：看情况。用一个或者另一个都不是必要的，你可能想要使用两个。\n`Task.retry`用来重试任务，这是可以用`try`语句catch到可预知的错误（expected errors）的。AMQP事务不是用来处理这些错误的：如果任务引发了异常，仍然会被应答！\n\n如果某些原因worker在执行中挂掉了，你需要任务再次执行时，可以使用`acks_late`设置。没人知道worker挂掉了，这很重要，如果知道worker挂掉，通常有不可恢复的错误，需要人工介入（worker或者任务代码的bug）。\n理想情况下，你可以安全地重试任何失败的任务，但是有少数情况例外，假设有如下任务：\n```python\ndef process_upload(filename, tmpfile):\n    # Increment a file count stored in a database\n    increment_file_counter()\n    add_file_metadata_to_db(filename, tmpfile)\n    copy_file_to_destination(filename, tmpfile)\n```\n如果它在拷贝文件时挂掉了，我们会知道这里有个未完成状态存在。这不是个严格的教学场景，但你大概可以想象一些更为灾难性的场景。目前为止，编程较少的话则可靠性更弱。默认值是好的，需要它并且知道它们在干什么的用户仍然能开启`acks_late`（未来希望使用手动应答）。\n此外，`Task.retry`在AMQP事务中有不可用的特性：在重试中延迟，最大重试次数等。\n因此，可以对Python中的错误使用重试，如果你的任务是幂等的而且要求可靠性级别，结合`acks_late`一起使用。\n\n### 我可以计划让tasks在特定的时间执行吗？\n答案：可以。使用`Task.apply_async()`的eta参数。[周期任务](http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#guide-beat)\n\n### 我可以安全地关闭worker吗？\n答案：是的，使用`TERM`信号。这会告诉worker去结束所有当前执行的作业，然后尽可能快地关闭。只要完全关闭，实验性的传输中也不应该会有任务丢失。\n你决不应该通过`KILL`信号(`kill -9`)来停止worker，除非你试过几次`TERM`等了几分钟看有没有关闭。\n\n另外，确保你只是杀掉了worker的主进程，而不是它的任何子进程。如果你知道关闭worker所依赖的一个子进程正在执行一个任务，你可以给这个特定的子进程指定一个杀死信号（kill signal），这也意味着任务会被设定一个WorkerLostError状态，因此这个任务不会再执行了。\n\n如果你安装了`setproctitle`模块，指定进程类型很容易。\n```bash\n$ pip install setproctitle\n```\n安装这个库，你可以看到在ps命令的列表中看到进程类型，但是worker必须重启才能生效。\n\n[停止worker](http://docs.celeryproject.org/en/latest/userguide/workers.html#worker-stopping)\n\n### 我可以在平台的后端运行worker吗？\nAnswer: Yes, please see [Daemonization[(http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing.\n\n## Django\n### django-celery-beat创建的数据库表有什么目的？\n用到数据库后端定时器（database-backend schedule）的时候，从PeriodicTask的数据模型中取出周期任务计划有一些其他的辅助表 (IntervalSchedule, CrontabSchedule, PeriodicTasks)。\n\n### django-celery-results创建的数据库表有什么目的？\nDjango的数据库结果后端扩展需要两个额外的数据模型：TaskResult and GroupResult.\n\n## Windows\n### Celery支持Windows吗？\n答案：不。4.x版本以上就不支持Windows了。\n\n\n# 欢迎扫码加群交流\n![](http://opkk27k9n.bkt.clouddn.com/17-11-26/19293813.jpg)\n","slug":"Celery_FAQ_4_1_Stable","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89o0003c4xke7kwfr6i","content":"<h2 id=\"译文出处\"><a href=\"#译文出处\" class=\"headerlink\" title=\"译文出处\"></a>译文出处</h2><p><a href=\"http://docs.celeryproject.org/en/latest/faq.html\" target=\"_blank\" rel=\"noopener\">http://docs.celeryproject.org/en/latest/faq.html</a></p>\n<p>This document describes the current stable version of Celery (4.1).</p>\n<p>本文长期更新地址： <a href=\"http://blog.cannot.cc/Celery_FAQ_4_1_Stable.html\" target=\"_blank\" rel=\"noopener\">Celery4.1常见问题</a></p>\n<p><strong>术语翻译对照</strong></p>\n<table>\n<thead>\n<tr>\n<th>英文</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>celery</td>\n<td>celery</td>\n</tr>\n<tr>\n<td>worker</td>\n<td>worker</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>队列</td>\n</tr>\n<tr>\n<td>message</td>\n<td>消息</td>\n</tr>\n<tr>\n<td>task</td>\n<td>任务</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h2><h3 id=\"应该用Celery来处理什么样的事情？\"><a href=\"#应该用Celery来处理什么样的事情？\" class=\"headerlink\" title=\"应该用Celery来处理什么样的事情？\"></a>应该用Celery来处理什么样的事情？</h3><p>答案：<a href=\"https://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/\" target=\"_blank\" rel=\"noopener\">Queue everything and delight everyone</a> (<a href=\"\">我的译文参见</a>)解释了为什么你会需要在web的上下文中使用队列。</p>\n<p>这里是一些普遍的使用案例：</p>\n<ul>\n<li>在后台运行。例如For example, to finish the web request as soon as possible, then update the users page incrementally. This gives the user the impression of good performance and “snappiness”, even though the real work might actually take some time.</li>\n<li>在web请求结束后运行</li>\n<li>通过异步执行和重试，确保一些事情完成了</li>\n<li>制定周期任务</li>\n</ul>\n<p>以及一定程度上：</p>\n<ul>\n<li>分布式计算</li>\n<li>并行执行</li>\n</ul>\n<h2 id=\"误解\"><a href=\"#误解\" class=\"headerlink\" title=\"误解\"></a>误解</h2><h3 id=\"Celery真的有50000行代码吗？\"><a href=\"#Celery真的有50000行代码吗？\" class=\"headerlink\" title=\"Celery真的有50000行代码吗？\"></a>Celery真的有50000行代码吗？</h3><p>答案：没有。这个和类似的庞大数字在各种场合经常被报道。</p>\n<ul>\n<li>核心：7141行代码</li>\n<li>测试：14209行</li>\n<li>后端，贡献，兼容性代码：9032行</li>\n</ul>\n<p>代码行数不是有用的度量标准，因此，即便Celery真的有50K行代码，你也不能从这个数字中得到任何结论。</p>\n<h3 id=\"Celery有很多依赖吗？\"><a href=\"#Celery有很多依赖吗？\" class=\"headerlink\" title=\"Celery有很多依赖吗？\"></a>Celery有很多依赖吗？</h3><p>一个普遍的批评是说Celery使用了太多的依赖。这种担忧背后的原理很难想象，特别是考虑到代码复用在现代软件开发中已经作为成熟的解决复杂性的方式，而且在使用诸如pip和PyPI包管理工具后引入依赖的开销非常低——安装和维护依赖的麻烦已经成为过去式了。</p>\n<p>一路上，Celery替换了一些依赖，现在的依赖列表如下：</p>\n<h4 id=\"celery\"><a href=\"#celery\" class=\"headerlink\" title=\"celery\"></a><strong>celery</strong></h4><ul>\n<li><p>kombu<br>Kombu是Celery生态系统的一部分，是用来发送和接收messages的库。也是使得Celery支持如此多不同的message brokers的库。Kombu也被用在OpenStack项目中，和其他许多项目中，验证了将其从Celery基础代码中分割出来的选择是有效的。</p>\n</li>\n<li><p>billiard<br>billiard是Python多进程模块的一个分叉fork，包含了许多性能和稳定性改善。有一天这些改善最终将会被合并到Python中。</p>\n</li>\n</ul>\n<p>billiard也被用来处理没有多进程模块的老版本python的兼容问题。</p>\n<ul>\n<li>pytz<br>提供时区定义和相关工具。<h4 id=\"kombu\"><a href=\"#kombu\" class=\"headerlink\" title=\"kombu\"></a>kombu</h4>Kombu依赖于下面的包：</li>\n<li>amqp</li>\n</ul>\n<p>纯Python实现的amqp客户端。AMQP作为默认broker是很自然的依赖。</p>\n<blockquote>\n<blockquote>\n<p>Note:<br>为了解决流行的配置选择的依赖，Celery定义了许多“bundle”包（捆绑安装^_^）。<a href=\"http://docs.celeryproject.org/en/latest/getting-started/introduction.html#bundles\" target=\"_blank\" rel=\"noopener\">详见</a></p>\n</blockquote>\n</blockquote>\n<h3 id=\"Celery是heavy-weight，很重的吗？\"><a href=\"#Celery是heavy-weight，很重的吗？\" class=\"headerlink\" title=\"Celery是heavy-weight，很重的吗？\"></a>Celery是heavy-weight，很重的吗？</h3><p>Celery在内存足迹（memory footprint）和性能上造成了非常轻微的开销。但是请注意，默认配置并未在时间或空间上进行优化，<a href=\"http://docs.celeryproject.org/en/latest/userguide/optimizing.html#guide-optimizing\" target=\"_blank\" rel=\"noopener\">优化</a>。</p>\n<h3 id=\"Celery依赖于pickle（序列化库）吗？\"><a href=\"#Celery依赖于pickle（序列化库）吗？\" class=\"headerlink\" title=\"Celery依赖于pickle（序列化库）吗？\"></a>Celery依赖于pickle（序列化库）吗？</h3><p>答案：不，Celery可以支持任何序列化策略。<br>我们內建支持JSON、YAML、Pickle和msgpack。每个任务都和一种content type挂钩，因此你甚至可以一个任务用pickle，另一个用JSON。默认的序列化支持是pickle，但是从4.0版本起，是JSON。如果你需要发送复杂的Python对象作为任务参数，你可以使用pickle作为序列化格式，但是需要注意<a href=\"http://docs.celeryproject.org/en/latest/userguide/security.html#security-serializers\" target=\"_blank\" rel=\"noopener\">Notes in Serializers</a>。</p>\n<p>如果你需要和其他语言通信，你应该使用合适于任务的序列化格式，通常意味着不能用pickle了。<br>你可以设置一个全局的默认序列化器serializer，默认的serializer用于特定的任务，或者发送单个任务 instance的时候决定用什么serializer。</p>\n<h3 id=\"Celery只支持Django吗？\"><a href=\"#Celery只支持Django吗？\" class=\"headerlink\" title=\"Celery只支持Django吗？\"></a>Celery只支持Django吗？</h3><p>答案：不。</p>\n<h3 id=\"我必须使用AMQP-RabbitMQ吗？\"><a href=\"#我必须使用AMQP-RabbitMQ吗？\" class=\"headerlink\" title=\"我必须使用AMQP/RabbitMQ吗？\"></a>我必须使用AMQP/RabbitMQ吗？</h3><p>答案：不，尽管使用RabbitMQ是推荐的，你也可以使用Redis，SQS，或者Qpid。更多参见<a href=\"http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html#brokers\" target=\"_blank\" rel=\"noopener\">broker</a></p>\n<p>Redis作为broker表现不如AMQP，但是RabbitMQ作为broker，Redis作为结果存储的组合方式很常用。如果你有严格的可靠性要求，最好使用RabbitMQ，或者其他AMQP broker。一些transports也用轮询（polling），因此他们可能会消耗更多的资源。但是，如果你因为某些原因不能使用AMQP，可以放心使用这些替代品，在大部分场景下都能工作良好，而且以上不是为Celery量身定制的。如果你之前使用Redis/database作为队列也工作得很好，那现在也能。你一直可以到需要的时候再升级。</p>\n<h3 id=\"Celery是多语言的吗？\"><a href=\"#Celery是多语言的吗？\" class=\"headerlink\" title=\"Celery是多语言的吗？\"></a>Celery是多语言的吗？</h3><p>答案：是。<br>worker是用Python实现的。如果某门语言有AMQP客户端，那用这门语言创建一个worker不需要做太多事情。一个Celery的worker只是一个连接broker来处理messages的程序。</p>\n<p>而且，有另一种方式来做到语言独立，就是用REST的任务，这样你的任务就不是函数而是url了。有这个信息，你甚至可以创建一个简单的web服务器开启代码预加载。简单地暴露一个表现一个操作的端点endpoint，再创建一个任务，这个任务只是将一个HTTP请求表现给那个端点。</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"MySQL抛出死锁错误，怎么办？\"><a href=\"#MySQL抛出死锁错误，怎么办？\" class=\"headerlink\" title=\"MySQL抛出死锁错误，怎么办？\"></a>MySQL抛出死锁错误，怎么办？</h3><p>答案：MySQL有默认的隔离级别设置为REPEATABLE-READ（可重复读），如果你并不真正需要它，可以设置为READ-COMMITTED（读提交）。你可以通过在my.cnf中加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">transaction-isolation = READ-COMMMITTED</span><br></pre></td></tr></table></figure></p>\n<p>更多有关InnoDB的事务模型，参见<a href=\"https://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html\" target=\"_blank\" rel=\"noopener\">MySQL - The InnoDB Transaction Model and Locking </a>.</p>\n<h3 id=\"worker什么都不做，hanging挂起了\"><a href=\"#worker什么都不做，hanging挂起了\" class=\"headerlink\" title=\"worker什么都不做，hanging挂起了\"></a>worker什么都不做，hanging挂起了</h3><p>答案：参见MySQL死锁，或者 Task.delay</p>\n<h3 id=\"任务结果返回不可靠\"><a href=\"#任务结果返回不可靠\" class=\"headerlink\" title=\"任务结果返回不可靠\"></a>任务结果返回不可靠</h3><p>答案：如果你使用数据库后端存储结果，特别是MySQL，可能是死锁。参见上上个问题。</p>\n<h3 id=\"为什么Task-delay-apply-这些调用之后worker只是挂起？\"><a href=\"#为什么Task-delay-apply-这些调用之后worker只是挂起？\" class=\"headerlink\" title=\"为什么Task.delay/apply*这些调用之后worker只是挂起？\"></a>为什么<code>Task.delay/apply*</code>这些调用之后worker只是挂起？</h3><p>答案： 一些AMQP客户端有一个bug，如果当前用户无法认证、密码不匹配或者用户没有访问指定虚拟主机的权限，就会挂起。检查broker的日志（RabbitMQ的在/var/log/rabbitmq/rabbit.log），通常会有消息描述原因。</p>\n<h3 id=\"兼容FreeBSD系统吗？\"><a href=\"#兼容FreeBSD系统吗？\" class=\"headerlink\" title=\"兼容FreeBSD系统吗？\"></a>兼容FreeBSD系统吗？</h3><p>答案：看情况。<br>When using the RabbitMQ (AMQP) and Redis transports it should work out of the box.</p>\n<p>For other transports the compatibility prefork pool is used and requires a working POSIX semaphore implementation, this is enabled in FreeBSD by default since FreeBSD 8.x. For older version of FreeBSD, you have to enable POSIX semaphores in the kernel and manually recompile billiard.</p>\n<p>Luckily, Viktor Petersson has written a tutorial to get you started with Celery on FreeBSD here: <a href=\"http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/\" target=\"_blank\" rel=\"noopener\">http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/</a></p>\n<h3 id=\"遇到了完整性错误-IntegrityError-：Duplicate-Key-errors，什么原因？\"><a href=\"#遇到了完整性错误-IntegrityError-：Duplicate-Key-errors，什么原因？\" class=\"headerlink\" title=\"遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？\"></a>遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？</h3><p>答案：MySQL死锁。</p>\n<h3 id=\"我的任务为什么没有被处理？\"><a href=\"#我的任务为什么没有被处理？\" class=\"headerlink\" title=\"我的任务为什么没有被处理？\"></a>我的任务为什么没有被处理？</h3><p>答案：用RabbitMQ的话，你可以通过运行如下命令看有多少个消费者当前在接收任务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmqctl list_queues -p &lt;myvhost&gt; name messages consumers</span><br><span class=\"line\">Listing queues ...</span><br><span class=\"line\">celery     2891    2</span><br></pre></td></tr></table></figure></p>\n<p>以上输出表明任务-队列里有2891条messages在等待被处理，而且有两个消费者正在处理他们。</p>\n<p>队列从未被清空的一个原因可能是你有一个过期的worker进程劫持了这些messages。如果这个worker没有被正确地杀掉，就有可能发生这种情况。</p>\n<p>当一个message被一个worker接收到了，这个worker在标记该message被处理前会等待被应答。这个worker不会重发message给另一个消费者，直到该消费者被正确地关闭。<br>如果你遇到这个问题，你必须手动杀掉所有的worker并重启：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkill <span class=\"string\">'celery worker'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"comment\"># - If you don't have pkill use:</span></span><br><span class=\"line\">$ <span class=\"comment\"># ps auxww | grep 'celery worker' | awk '&#123;print $2&#125;' | xargs kill</span></span><br></pre></td></tr></table></figure></p>\n<p>你可能必须等一会儿，知道所有的worker都结束了正在执行的任务。如果仍然长时间挂起，你可以强制杀掉：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkill -9 <span class=\"string\">'celery worker'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"comment\"># - If you don't have pkill use:</span></span><br><span class=\"line\">$ <span class=\"comment\"># ps auxww | grep 'celery worker' | awk '&#123;print $2&#125;' | xargs kill -9</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我的任务为什么不会运行？\"><a href=\"#我的任务为什么不会运行？\" class=\"headerlink\" title=\"我的任务为什么不会运行？\"></a>我的任务为什么不会运行？</h3><p>答案：可能有语法错误导致任务模块没有被导入。<br>你可以看看通过手动执行任务，Celery能不能运行该任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from myapp.tasks import MyPeriodicTask</span><br><span class=\"line\">&gt;&gt;&gt; MyPeriodicTask.delay()</span><br></pre></td></tr></table></figure></p>\n<p>观察worker的日志文件，是否可以找到该任务，或者有没有其他错误发生。</p>\n<h3 id=\"我的定时任务为什么不会运行？\"><a href=\"#我的定时任务为什么不会运行？\" class=\"headerlink\" title=\"我的定时任务为什么不会运行？\"></a>我的定时任务为什么不会运行？</h3><p>答案：参见上一个问题。</p>\n<h3 id=\"我怎么清理所有的等待中任务？\"><a href=\"#我怎么清理所有的等待中任务？\" class=\"headerlink\" title=\"我怎么清理所有的等待中任务？\"></a>我怎么清理所有的等待中任务？</h3><p>答案：你可以使用<code>celery purge</code>命令来清理所有的已配置的任务队列。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj purge</span><br></pre></td></tr></table></figure></p>\n<p>或者在代码中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from proj.celery import app</span><br><span class=\"line\">&gt;&gt;&gt; app.control.purge()</span><br><span class=\"line\">1753</span><br></pre></td></tr></table></figure></p>\n<p>如果你只是想清理特定队列中的消息，你必须使用AMQP API，或者<code>celery amqp</code>的功能：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj amqp queue.purge &lt;queue name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1753是被清理的消息数。</p>\n<p>你也可以开启<code>--purge</code>选项去启动worker，worker启动的时候就会清理消息。</p>\n<h3 id=\"我清理了message，但是队列队列中仍然有消息残留？\"><a href=\"#我清理了message，但是队列队列中仍然有消息残留？\" class=\"headerlink\" title=\"我清理了message，但是队列队列中仍然有消息残留？\"></a>我清理了message，但是队列队列中仍然有消息残留？</h3><p>答案：只要任务真的被执行了，任务就被应答（从队列中移除）了。在worker接收到一个任务之后，在真正被执行前需要一点时间，特别是如果有大量任务已经在等待执行。没有被应答的消息，会被worker保持，直到消息关闭和broker（AMQP服务器）的连接。当连接关闭时（比如，因为worker停止了），任务会被broker重发给下一个可用的worker（或者在worker重启后又发给它），因此正确地清理等待任务的队列需要停掉所有的worker，然后再用<code>celery.control.purge</code>清理任务。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><h3 id=\"如果我有一个id指向一个任务，怎么得到任务结果？\"><a href=\"#如果我有一个id指向一个任务，怎么得到任务结果？\" class=\"headerlink\" title=\"如果我有一个id指向一个任务，怎么得到任务结果？\"></a>如果我有一个id指向一个任务，怎么得到任务结果？</h3><p>答案：用<code>task.AsyncResult</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = my_task.AsyncResult(task_id)</span><br><span class=\"line\">&gt;&gt;&gt; result.get()</span><br></pre></td></tr></table></figure></p>\n<p>这会用任务的当前结果后端(result backend)返回一个<a href=\"http://docs.celeryproject.org/en/latest/reference/celery.result.html#celery.result.AsyncResult\" target=\"_blank\" rel=\"noopener\">AsyncResult</a>的实例。<br>如果你需要指定一个自定义的结果后端，或者你想使用当前应用的默认后端，你可以使用<code>app.AsyncResult</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = app.AsyncResult(task_id)</span><br><span class=\"line\">&gt;&gt;&gt; result.get()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"使用pickle不是有安全隐患吗？\"><a href=\"#使用pickle不是有安全隐患吗？\" class=\"headerlink\" title=\"使用pickle不是有安全隐患吗？\"></a>使用pickle不是有安全隐患吗？</h3><p>答案：事实上，自从Celery4.0起，默认的序列化器是现在的JSON，就确保了人们有意识地选择序列化器并且意识到了这一担忧。<br>防范未认证授权的worker、数据库和其他传输pickled数据的服务接入是必要的。<br>注意到这不仅仅是你应该意识到有关Celery的问题，例如Django也使用pickle作为其缓存客户端。<br>对任务消息，你可以设置<code>task_serializer</code>为<code>json</code>或者<code>yaml</code>，而不是pickle。<br>类似地可以设置<code>result_serializer</code>。</p>\n<h3 id=\"message是否可以加密？\"><a href=\"#message是否可以加密？\" class=\"headerlink\" title=\"message是否可以加密？\"></a>message是否可以加密？</h3><p>答案：一些AMQPworker支持使用SSL（包括RabbitMQ），你可以通过<code>broker_use_ssl</code>开启这一功能。<br>给消息加入额外的加密和安全性也是可能的，如果你有需求，应该联系邮件列表。</p>\n<h3 id=\"以root用户运行worker是安全的吗？\"><a href=\"#以root用户运行worker是安全的吗？\" class=\"headerlink\" title=\"以root用户运行worker是安全的吗？\"></a>以root用户运行worker是安全的吗？</h3><p>答案：不是！<br>我们现在还没有发觉任何安全问题，但是认为安全问题不存在就太天真了，因此推荐以非特权用户运行Celery服务（celery woker， celery beat， celeryev等）。</p>\n<h2 id=\"Brokers\"><a href=\"#Brokers\" class=\"headerlink\" title=\"Brokers\"></a>Brokers</h2><h3 id=\"为什么RabbitMQ崩溃了？\"><a href=\"#为什么RabbitMQ崩溃了？\" class=\"headerlink\" title=\"为什么RabbitMQ崩溃了？\"></a>为什么RabbitMQ崩溃了？</h3><p>答案：RabbitMQ如果用光内存就会崩溃。未来版本的RabbitMQ会修复这一个问题。<a href=\"https://www.rabbitmq.com/faq.html#node-runs-out-of-memory\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/faq.html#node-runs-out-of-memory</a></p>\n<blockquote>\n<blockquote>\n<p>注意：<br>这已经不再是问题，RabbitMQ2.0+包含了一个新的固件，对内存不足错误是容忍的。因此推荐RabbitMQ2.1+版本配合Celery使用。如果你还在使用老版本，而且还遇到崩溃问题，赶紧升级吧。</p>\n</blockquote>\n</blockquote>\n<p>Celery的错误配置最终也会导致老版本RabbitMQ的崩溃。即便不崩溃，也会消耗大量的资源，因此意识到这一普遍陷阱很重要。</p>\n<ul>\n<li><p>事件Events<br>加上<code>-E</code>选项运行worker将会在worker内部事件发生时发送消息。<br>事件应该只在你有一个活跃的监控器消费事件的时候才被开启，否则你需要定期清理事件队列。</p>\n</li>\n<li><p>AMQP 后端结果<br>在使用AMQP结果后端运行的时候，每个任务结果都会作为消息发送。如果你不收集collect这些结果，他们会积累，RabbitMQ最终会耗尽内存。<br>结果后端现在被弃用了，所以你不应该再使用。如果你需要多个消费者访问结果，可以用RPC后端来做rpc风格的调用，或者一个持久化的后端。<br>默认情况下结果在一天后失效。可以通过配置<code>result_expires</code>来降低这个有效期。</p>\n</li>\n</ul>\n<p>如果你不需要任务结果，确保你设置了<code>ignore_result</code>选项。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.task(ignore_result=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mytask</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span><span class=\"params\">(Task)</span>:</span></span><br><span class=\"line\">    ignore_result = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Celery可以和ActiveMQ-STOMP一起使用吗？\"><a href=\"#Celery可以和ActiveMQ-STOMP一起使用吗？\" class=\"headerlink\" title=\"Celery可以和ActiveMQ/STOMP一起使用吗？\"></a>Celery可以和ActiveMQ/STOMP一起使用吗？</h3><p>答案：不能。</p>\n<h3 id=\"不使用AMQP-broker时，哪些特征不支持了？\"><a href=\"#不使用AMQP-broker时，哪些特征不支持了？\" class=\"headerlink\" title=\"不使用AMQP broker时，哪些特征不支持了？\"></a>不使用AMQP broker时，哪些特征不支持了？</h3><p>不完全列表：</p>\n<ul>\n<li>远程控制命令（仅由Redis支持）</li>\n<li>事件监控在所有的虚拟传输中可能不会工作</li>\n<li>header和fanout（扇出，Redis支持） exchange types</li>\n</ul>\n<h2 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h2><h3 id=\"调用tasks时如何复用连接？\"><a href=\"#调用tasks时如何复用连接？\" class=\"headerlink\" title=\"调用tasks时如何复用连接？\"></a>调用tasks时如何复用连接？</h3><p>答案：查看<code>broker_pool_limit</code>设置。v2.5+就默认开启连接池了。</p>\n<h3 id=\"子进程中sudo反回了None\"><a href=\"#子进程中sudo反回了None\" class=\"headerlink\" title=\"子进程中sudo反回了None\"></a>子进程中sudo反回了None</h3><p>有一个sudo的配置选项来使得不经过tty运行sudo的处理是非法的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults requiretty</span><br></pre></td></tr></table></figure></p>\n<p>如果你在<code>/etc/sudoers</code>文件中有这项配置，那worker作为守护进程跑的时候，任务将不能调用sudo。如果你想开启，你需要移除上面那一行。<a href=\"http://timelordz.com/wiki/Apache_Sudo_Commands\" target=\"_blank\" rel=\"noopener\">http://timelordz.com/wiki/Apache_Sudo_Commands</a></p>\n<h3 id=\"为什么workers不能处理任务的时候还能将任务从队列中删除？\"><a href=\"#为什么workers不能处理任务的时候还能将任务从队列中删除？\" class=\"headerlink\" title=\"为什么workers不能处理任务的时候还能将任务从队列中删除？\"></a>为什么workers不能处理任务的时候还能将任务从队列中删除？</h3><p>答案：worker拒绝未知任务、错误编码的消息、不包含正确域field的消息（按照任务消息协议）。<br>如果不拒绝这些，会导致重复传送，引发死循环。<br>最近版本的RabbitMQ有能力配置一个dead-letter队列来交换，所以那些被拒的消息就被转移到了那里。</p>\n<h3 id=\"我可以通过任务名称调用任务吗？\"><a href=\"#我可以通过任务名称调用任务吗？\" class=\"headerlink\" title=\"我可以通过任务名称调用任务吗？\"></a>我可以通过任务名称调用任务吗？</h3><p>答案：是的，用<code>app.send_task</code>。<br>你也可以在任何语言中使用AMQP客户端通过名字调用一个任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.send_task(&apos;tasks.add&apos;, args=[2, 2], kwargs=&#123;&#125;)</span><br><span class=\"line\">&lt;AsyncResult: 373550e8-b9a0-4666-bc61-ace01fa4f91d&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我能设置当前任务的id吗？\"><a href=\"#我能设置当前任务的id吗？\" class=\"headerlink\" title=\"我能设置当前任务的id吗？\"></a>我能设置当前任务的id吗？</h3><p>答案：是的，当前id以及更多内容在任务请求里都是可用的。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.task(bind=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mytask</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    cache.set(self.request.id, <span class=\"string\">\"Running\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-request-info\" target=\"_blank\" rel=\"noopener\">Task Request</a><br>如果你没有任务实例的引用，你可以使用<code>app.current_task</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.current_task.request.id</span><br></pre></td></tr></table></figure></p>\n<p>但是需要注意，这可能是任何任务，一个被worker执行的任务，或者一个直接被任务调用的任务，或者一个急切eager调用的任务。（此处原文：But note that this will be any task, be it one executed by the worker, or a task called directly by that task, or a task called eagerly.）</p>\n<p>可以用<code>current_worker_task</code>得到特定的当前被执行的任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.current_worker_task.request.id</span><br></pre></td></tr></table></figure></p>\n<p>需要注意<code>current_task</code>, 和 <code>current_worker_task</code> 可能是None。</p>\n<h3 id=\"我如何指定一个自定义的task-id？\"><a href=\"#我如何指定一个自定义的task-id？\" class=\"headerlink\" title=\"我如何指定一个自定义的task_id？\"></a>我如何指定一个自定义的task_id？</h3><p>答案：能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; task.apply_async(args, kwargs, task_id=&apos;…&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任务上可以使用装饰器吗？\"><a href=\"#任务上可以使用装饰器吗？\" class=\"headerlink\" title=\"任务上可以使用装饰器吗？\"></a>任务上可以使用装饰器吗？</h3><p>答案：能，但需要注意 <a href=\"http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-basics\" target=\"_blank\" rel=\"noopener\">Basics的侧边栏</a></p>\n<h3 id=\"我能使用自然数作为task-ids吗？\"><a href=\"#我能使用自然数作为task-ids吗？\" class=\"headerlink\" title=\"我能使用自然数作为task ids吗？\"></a>我能使用自然数作为task ids吗？</h3><p>答案：能。但是确保其是唯一的，因为两个相同id的任务的行为是未定义的。</p>\n<h3 id=\"我能指定，一旦另一个task结束，马上运行一个task吗？\"><a href=\"#我能指定，一旦另一个task结束，马上运行一个task吗？\" class=\"headerlink\" title=\"我能指定，一旦另一个task结束，马上运行一个task吗？\"></a>我能指定，一旦另一个task结束，马上运行一个task吗？</h3><p>答案：能。你可以在一个任务里面安全地启动一个任务。一个常用的模式是给任务加上回调：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery.utils.log <span class=\"keyword\">import</span> get_task_logger</span><br><span class=\"line\"></span><br><span class=\"line\">logger = get_task_logger(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task(ignore_result=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log_result</span><span class=\"params\">(result)</span>:</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">\"log_result got: %r\"</span>, result)</span><br></pre></td></tr></table></figure></p>\n<p>调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; (add.s(2, 2) | log_result.s()).delay()</span><br></pre></td></tr></table></figure></p>\n<p>获取更多信息：<a href=\"http://docs.celeryproject.org/en/latest/userguide/canvas.html\" target=\"_blank\" rel=\"noopener\">Canvas: Designing Work-flows</a></p>\n<h3 id=\"我能取消任务的执行吗？\"><a href=\"#我能取消任务的执行吗？\" class=\"headerlink\" title=\"我能取消任务的执行吗？\"></a>我能取消任务的执行吗？</h3><p>答案：能。用<code>result.revoke()</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = add.apply_async(args=[2, 2], countdown=120)</span><br><span class=\"line\">&gt;&gt;&gt; result.revoke()</span><br></pre></td></tr></table></figure></p>\n<p>或者，只有任务id时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from proj.celery import app</span><br><span class=\"line\">&gt;&gt;&gt; app.control.revoke(task_id)</span><br></pre></td></tr></table></figure></p>\n<p>后者也支持传入任务id列表作为参数。</p>\n<h3 id=\"为什么我的远程控制命令被所有的workers接收到了？\"><a href=\"#为什么我的远程控制命令被所有的workers接收到了？\" class=\"headerlink\" title=\"为什么我的远程控制命令被所有的workers接收到了？\"></a>为什么我的远程控制命令被所有的workers接收到了？</h3><p>答案：为了接收到广播的远程控制命令，每一个worker节点基于其节点名创建了一个唯一的队列名。如果你有超过一个worker的主机名相同，控制命令将会在他们间循环接收。<br>为解决这个问题，你可以用<code>-n</code>参数显式地为每个worker设置节点名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj worker -n worker1@%h</span><br><span class=\"line\">$ celery -A proj worker -n worker2@%h</span><br></pre></td></tr></table></figure></p>\n<p>这里<code>%h</code>扩展成当前主机名。</p>\n<h3 id=\"我能发送一些任务到限定的一些服务器上吗？\"><a href=\"#我能发送一些任务到限定的一些服务器上吗？\" class=\"headerlink\" title=\"我能发送一些任务到限定的一些服务器上吗？\"></a>我能发送一些任务到限定的一些服务器上吗？</h3><p>答案：是的。你可以使用不同的消息路由拓扑，将任务路由到一个或多个worker上，而且一个worker实例可以绑定到多个队列。<br><a href=\"http://docs.celeryproject.org/en/latest/userguide/routing.html\" target=\"_blank\" rel=\"noopener\">Routing Tasks</a></p>\n<h3 id=\"我能禁掉任务的预取prefetching吗？\"><a href=\"#我能禁掉任务的预取prefetching吗？\" class=\"headerlink\" title=\"我能禁掉任务的预取prefetching吗？\"></a>我能禁掉任务的预取prefetching吗？</h3><p>答案：可能！AMQP的属于prefetch令人疑惑，因为它只被用来描述任务预取限制(task prefetching limit)。没有涉及实际的预取。<br>禁掉预取限制是可能的，但是那意味着worker会消费尽可能快地消费尽可能多的任务。<br><a href=\"http://docs.celeryproject.org/en/latest/userguide/optimizing.html#optimizing-prefetch-limit\" target=\"_blank\" rel=\"noopener\">一个有关预取限制的讨论，和worker的配置设定:同一时间只预定一个任务</a></p>\n<h3 id=\"我可以在运行时改变周期任务的间隔时间吗？\"><a href=\"#我可以在运行时改变周期任务的间隔时间吗？\" class=\"headerlink\" title=\"我可以在运行时改变周期任务的间隔时间吗？\"></a>我可以在运行时改变周期任务的间隔时间吗？</h3><p>答案：可以。你可以使用Django的数据库调度器，或者你可以创建一个新的调度子类，覆写<code>is_due()</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery.schedules <span class=\"keyword\">import</span> schedule</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_schedule</span><span class=\"params\">(schedule)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_due</span><span class=\"params\">(self, last_run_at)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> run_now, next_time_to_check</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Celery支持task优先级吗？\"><a href=\"#Celery支持task优先级吗？\" class=\"headerlink\" title=\"Celery支持task优先级吗？\"></a>Celery支持task优先级吗？</h3><p>答案：是的， RabbitMQv3.5.0+就支持优先级，Redis传输仿真实现了优先级支持。<br>你也可以通过将高优先级任务路由到不同的worker中，从而把工作优先级排好。在真实世界中，这通常比每一个消息的优先级更为奏效。你可以使用速率限制（rate limiting）和单条消息优先级（per message priorities）的组合来实现响应式的系统。</p>\n<h3 id=\"我应该使用重试retry还是acks-late？\"><a href=\"#我应该使用重试retry还是acks-late？\" class=\"headerlink\" title=\"我应该使用重试retry还是acks_late？\"></a>我应该使用重试retry还是acks_late？</h3><p>答案：看情况。用一个或者另一个都不是必要的，你可能想要使用两个。<br><code>Task.retry</code>用来重试任务，这是可以用<code>try</code>语句catch到可预知的错误（expected errors）的。AMQP事务不是用来处理这些错误的：如果任务引发了异常，仍然会被应答！</p>\n<p>如果某些原因worker在执行中挂掉了，你需要任务再次执行时，可以使用<code>acks_late</code>设置。没人知道worker挂掉了，这很重要，如果知道worker挂掉，通常有不可恢复的错误，需要人工介入（worker或者任务代码的bug）。<br>理想情况下，你可以安全地重试任何失败的任务，但是有少数情况例外，假设有如下任务：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_upload</span><span class=\"params\">(filename, tmpfile)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Increment a file count stored in a database</span></span><br><span class=\"line\">    increment_file_counter()</span><br><span class=\"line\">    add_file_metadata_to_db(filename, tmpfile)</span><br><span class=\"line\">    copy_file_to_destination(filename, tmpfile)</span><br></pre></td></tr></table></figure></p>\n<p>如果它在拷贝文件时挂掉了，我们会知道这里有个未完成状态存在。这不是个严格的教学场景，但你大概可以想象一些更为灾难性的场景。目前为止，编程较少的话则可靠性更弱。默认值是好的，需要它并且知道它们在干什么的用户仍然能开启<code>acks_late</code>（未来希望使用手动应答）。<br>此外，<code>Task.retry</code>在AMQP事务中有不可用的特性：在重试中延迟，最大重试次数等。<br>因此，可以对Python中的错误使用重试，如果你的任务是幂等的而且要求可靠性级别，结合<code>acks_late</code>一起使用。</p>\n<h3 id=\"我可以计划让tasks在特定的时间执行吗？\"><a href=\"#我可以计划让tasks在特定的时间执行吗？\" class=\"headerlink\" title=\"我可以计划让tasks在特定的时间执行吗？\"></a>我可以计划让tasks在特定的时间执行吗？</h3><p>答案：可以。使用<code>Task.apply_async()</code>的eta参数。<a href=\"http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#guide-beat\" target=\"_blank\" rel=\"noopener\">周期任务</a></p>\n<h3 id=\"我可以安全地关闭worker吗？\"><a href=\"#我可以安全地关闭worker吗？\" class=\"headerlink\" title=\"我可以安全地关闭worker吗？\"></a>我可以安全地关闭worker吗？</h3><p>答案：是的，使用<code>TERM</code>信号。这会告诉worker去结束所有当前执行的作业，然后尽可能快地关闭。只要完全关闭，实验性的传输中也不应该会有任务丢失。<br>你决不应该通过<code>KILL</code>信号(<code>kill -9</code>)来停止worker，除非你试过几次<code>TERM</code>等了几分钟看有没有关闭。</p>\n<p>另外，确保你只是杀掉了worker的主进程，而不是它的任何子进程。如果你知道关闭worker所依赖的一个子进程正在执行一个任务，你可以给这个特定的子进程指定一个杀死信号（kill signal），这也意味着任务会被设定一个WorkerLostError状态，因此这个任务不会再执行了。</p>\n<p>如果你安装了<code>setproctitle</code>模块，指定进程类型很容易。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install setproctitle</span><br></pre></td></tr></table></figure></p>\n<p>安装这个库，你可以看到在ps命令的列表中看到进程类型，但是worker必须重启才能生效。</p>\n<p><a href=\"http://docs.celeryproject.org/en/latest/userguide/workers.html#worker-stopping\" target=\"_blank\" rel=\"noopener\">停止worker</a></p>\n<h3 id=\"我可以在平台的后端运行worker吗？\"><a href=\"#我可以在平台的后端运行worker吗？\" class=\"headerlink\" title=\"我可以在平台的后端运行worker吗？\"></a>我可以在平台的后端运行worker吗？</h3><p>Answer: Yes, please see [Daemonization[(<a href=\"http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing\" target=\"_blank\" rel=\"noopener\">http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing</a>.</p>\n<h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><h3 id=\"django-celery-beat创建的数据库表有什么目的？\"><a href=\"#django-celery-beat创建的数据库表有什么目的？\" class=\"headerlink\" title=\"django-celery-beat创建的数据库表有什么目的？\"></a>django-celery-beat创建的数据库表有什么目的？</h3><p>用到数据库后端定时器（database-backend schedule）的时候，从PeriodicTask的数据模型中取出周期任务计划有一些其他的辅助表 (IntervalSchedule, CrontabSchedule, PeriodicTasks)。</p>\n<h3 id=\"django-celery-results创建的数据库表有什么目的？\"><a href=\"#django-celery-results创建的数据库表有什么目的？\" class=\"headerlink\" title=\"django-celery-results创建的数据库表有什么目的？\"></a>django-celery-results创建的数据库表有什么目的？</h3><p>Django的数据库结果后端扩展需要两个额外的数据模型：TaskResult and GroupResult.</p>\n<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"Celery支持Windows吗？\"><a href=\"#Celery支持Windows吗？\" class=\"headerlink\" title=\"Celery支持Windows吗？\"></a>Celery支持Windows吗？</h3><p>答案：不。4.x版本以上就不支持Windows了。</p>\n<h1 id=\"欢迎扫码加群交流\"><a href=\"#欢迎扫码加群交流\" class=\"headerlink\" title=\"欢迎扫码加群交流\"></a>欢迎扫码加群交流</h1><p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-11-26/19293813.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"译文出处\"><a href=\"#译文出处\" class=\"headerlink\" title=\"译文出处\"></a>译文出处</h2><p><a href=\"http://docs.celeryproject.org/en/latest/faq.html\" target=\"_blank\" rel=\"noopener\">http://docs.celeryproject.org/en/latest/faq.html</a></p>\n<p>This document describes the current stable version of Celery (4.1).</p>\n<p>本文长期更新地址： <a href=\"http://blog.cannot.cc/Celery_FAQ_4_1_Stable.html\" target=\"_blank\" rel=\"noopener\">Celery4.1常见问题</a></p>\n<p><strong>术语翻译对照</strong></p>\n<table>\n<thead>\n<tr>\n<th>英文</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>celery</td>\n<td>celery</td>\n</tr>\n<tr>\n<td>worker</td>\n<td>worker</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>队列</td>\n</tr>\n<tr>\n<td>message</td>\n<td>消息</td>\n</tr>\n<tr>\n<td>task</td>\n<td>任务</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h2><h3 id=\"应该用Celery来处理什么样的事情？\"><a href=\"#应该用Celery来处理什么样的事情？\" class=\"headerlink\" title=\"应该用Celery来处理什么样的事情？\"></a>应该用Celery来处理什么样的事情？</h3><p>答案：<a href=\"https://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/\" target=\"_blank\" rel=\"noopener\">Queue everything and delight everyone</a> (<a href=\"\">我的译文参见</a>)解释了为什么你会需要在web的上下文中使用队列。</p>\n<p>这里是一些普遍的使用案例：</p>\n<ul>\n<li>在后台运行。例如For example, to finish the web request as soon as possible, then update the users page incrementally. This gives the user the impression of good performance and “snappiness”, even though the real work might actually take some time.</li>\n<li>在web请求结束后运行</li>\n<li>通过异步执行和重试，确保一些事情完成了</li>\n<li>制定周期任务</li>\n</ul>\n<p>以及一定程度上：</p>\n<ul>\n<li>分布式计算</li>\n<li>并行执行</li>\n</ul>\n<h2 id=\"误解\"><a href=\"#误解\" class=\"headerlink\" title=\"误解\"></a>误解</h2><h3 id=\"Celery真的有50000行代码吗？\"><a href=\"#Celery真的有50000行代码吗？\" class=\"headerlink\" title=\"Celery真的有50000行代码吗？\"></a>Celery真的有50000行代码吗？</h3><p>答案：没有。这个和类似的庞大数字在各种场合经常被报道。</p>\n<ul>\n<li>核心：7141行代码</li>\n<li>测试：14209行</li>\n<li>后端，贡献，兼容性代码：9032行</li>\n</ul>\n<p>代码行数不是有用的度量标准，因此，即便Celery真的有50K行代码，你也不能从这个数字中得到任何结论。</p>\n<h3 id=\"Celery有很多依赖吗？\"><a href=\"#Celery有很多依赖吗？\" class=\"headerlink\" title=\"Celery有很多依赖吗？\"></a>Celery有很多依赖吗？</h3><p>一个普遍的批评是说Celery使用了太多的依赖。这种担忧背后的原理很难想象，特别是考虑到代码复用在现代软件开发中已经作为成熟的解决复杂性的方式，而且在使用诸如pip和PyPI包管理工具后引入依赖的开销非常低——安装和维护依赖的麻烦已经成为过去式了。</p>\n<p>一路上，Celery替换了一些依赖，现在的依赖列表如下：</p>\n<h4 id=\"celery\"><a href=\"#celery\" class=\"headerlink\" title=\"celery\"></a><strong>celery</strong></h4><ul>\n<li><p>kombu<br>Kombu是Celery生态系统的一部分，是用来发送和接收messages的库。也是使得Celery支持如此多不同的message brokers的库。Kombu也被用在OpenStack项目中，和其他许多项目中，验证了将其从Celery基础代码中分割出来的选择是有效的。</p>\n</li>\n<li><p>billiard<br>billiard是Python多进程模块的一个分叉fork，包含了许多性能和稳定性改善。有一天这些改善最终将会被合并到Python中。</p>\n</li>\n</ul>\n<p>billiard也被用来处理没有多进程模块的老版本python的兼容问题。</p>\n<ul>\n<li>pytz<br>提供时区定义和相关工具。<h4 id=\"kombu\"><a href=\"#kombu\" class=\"headerlink\" title=\"kombu\"></a>kombu</h4>Kombu依赖于下面的包：</li>\n<li>amqp</li>\n</ul>\n<p>纯Python实现的amqp客户端。AMQP作为默认broker是很自然的依赖。</p>\n<blockquote>\n<blockquote>\n<p>Note:<br>为了解决流行的配置选择的依赖，Celery定义了许多“bundle”包（捆绑安装^_^）。<a href=\"http://docs.celeryproject.org/en/latest/getting-started/introduction.html#bundles\" target=\"_blank\" rel=\"noopener\">详见</a></p>\n</blockquote>\n</blockquote>\n<h3 id=\"Celery是heavy-weight，很重的吗？\"><a href=\"#Celery是heavy-weight，很重的吗？\" class=\"headerlink\" title=\"Celery是heavy-weight，很重的吗？\"></a>Celery是heavy-weight，很重的吗？</h3><p>Celery在内存足迹（memory footprint）和性能上造成了非常轻微的开销。但是请注意，默认配置并未在时间或空间上进行优化，<a href=\"http://docs.celeryproject.org/en/latest/userguide/optimizing.html#guide-optimizing\" target=\"_blank\" rel=\"noopener\">优化</a>。</p>\n<h3 id=\"Celery依赖于pickle（序列化库）吗？\"><a href=\"#Celery依赖于pickle（序列化库）吗？\" class=\"headerlink\" title=\"Celery依赖于pickle（序列化库）吗？\"></a>Celery依赖于pickle（序列化库）吗？</h3><p>答案：不，Celery可以支持任何序列化策略。<br>我们內建支持JSON、YAML、Pickle和msgpack。每个任务都和一种content type挂钩，因此你甚至可以一个任务用pickle，另一个用JSON。默认的序列化支持是pickle，但是从4.0版本起，是JSON。如果你需要发送复杂的Python对象作为任务参数，你可以使用pickle作为序列化格式，但是需要注意<a href=\"http://docs.celeryproject.org/en/latest/userguide/security.html#security-serializers\" target=\"_blank\" rel=\"noopener\">Notes in Serializers</a>。</p>\n<p>如果你需要和其他语言通信，你应该使用合适于任务的序列化格式，通常意味着不能用pickle了。<br>你可以设置一个全局的默认序列化器serializer，默认的serializer用于特定的任务，或者发送单个任务 instance的时候决定用什么serializer。</p>\n<h3 id=\"Celery只支持Django吗？\"><a href=\"#Celery只支持Django吗？\" class=\"headerlink\" title=\"Celery只支持Django吗？\"></a>Celery只支持Django吗？</h3><p>答案：不。</p>\n<h3 id=\"我必须使用AMQP-RabbitMQ吗？\"><a href=\"#我必须使用AMQP-RabbitMQ吗？\" class=\"headerlink\" title=\"我必须使用AMQP/RabbitMQ吗？\"></a>我必须使用AMQP/RabbitMQ吗？</h3><p>答案：不，尽管使用RabbitMQ是推荐的，你也可以使用Redis，SQS，或者Qpid。更多参见<a href=\"http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html#brokers\" target=\"_blank\" rel=\"noopener\">broker</a></p>\n<p>Redis作为broker表现不如AMQP，但是RabbitMQ作为broker，Redis作为结果存储的组合方式很常用。如果你有严格的可靠性要求，最好使用RabbitMQ，或者其他AMQP broker。一些transports也用轮询（polling），因此他们可能会消耗更多的资源。但是，如果你因为某些原因不能使用AMQP，可以放心使用这些替代品，在大部分场景下都能工作良好，而且以上不是为Celery量身定制的。如果你之前使用Redis/database作为队列也工作得很好，那现在也能。你一直可以到需要的时候再升级。</p>\n<h3 id=\"Celery是多语言的吗？\"><a href=\"#Celery是多语言的吗？\" class=\"headerlink\" title=\"Celery是多语言的吗？\"></a>Celery是多语言的吗？</h3><p>答案：是。<br>worker是用Python实现的。如果某门语言有AMQP客户端，那用这门语言创建一个worker不需要做太多事情。一个Celery的worker只是一个连接broker来处理messages的程序。</p>\n<p>而且，有另一种方式来做到语言独立，就是用REST的任务，这样你的任务就不是函数而是url了。有这个信息，你甚至可以创建一个简单的web服务器开启代码预加载。简单地暴露一个表现一个操作的端点endpoint，再创建一个任务，这个任务只是将一个HTTP请求表现给那个端点。</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"MySQL抛出死锁错误，怎么办？\"><a href=\"#MySQL抛出死锁错误，怎么办？\" class=\"headerlink\" title=\"MySQL抛出死锁错误，怎么办？\"></a>MySQL抛出死锁错误，怎么办？</h3><p>答案：MySQL有默认的隔离级别设置为REPEATABLE-READ（可重复读），如果你并不真正需要它，可以设置为READ-COMMITTED（读提交）。你可以通过在my.cnf中加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">transaction-isolation = READ-COMMMITTED</span><br></pre></td></tr></table></figure></p>\n<p>更多有关InnoDB的事务模型，参见<a href=\"https://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html\" target=\"_blank\" rel=\"noopener\">MySQL - The InnoDB Transaction Model and Locking </a>.</p>\n<h3 id=\"worker什么都不做，hanging挂起了\"><a href=\"#worker什么都不做，hanging挂起了\" class=\"headerlink\" title=\"worker什么都不做，hanging挂起了\"></a>worker什么都不做，hanging挂起了</h3><p>答案：参见MySQL死锁，或者 Task.delay</p>\n<h3 id=\"任务结果返回不可靠\"><a href=\"#任务结果返回不可靠\" class=\"headerlink\" title=\"任务结果返回不可靠\"></a>任务结果返回不可靠</h3><p>答案：如果你使用数据库后端存储结果，特别是MySQL，可能是死锁。参见上上个问题。</p>\n<h3 id=\"为什么Task-delay-apply-这些调用之后worker只是挂起？\"><a href=\"#为什么Task-delay-apply-这些调用之后worker只是挂起？\" class=\"headerlink\" title=\"为什么Task.delay/apply*这些调用之后worker只是挂起？\"></a>为什么<code>Task.delay/apply*</code>这些调用之后worker只是挂起？</h3><p>答案： 一些AMQP客户端有一个bug，如果当前用户无法认证、密码不匹配或者用户没有访问指定虚拟主机的权限，就会挂起。检查broker的日志（RabbitMQ的在/var/log/rabbitmq/rabbit.log），通常会有消息描述原因。</p>\n<h3 id=\"兼容FreeBSD系统吗？\"><a href=\"#兼容FreeBSD系统吗？\" class=\"headerlink\" title=\"兼容FreeBSD系统吗？\"></a>兼容FreeBSD系统吗？</h3><p>答案：看情况。<br>When using the RabbitMQ (AMQP) and Redis transports it should work out of the box.</p>\n<p>For other transports the compatibility prefork pool is used and requires a working POSIX semaphore implementation, this is enabled in FreeBSD by default since FreeBSD 8.x. For older version of FreeBSD, you have to enable POSIX semaphores in the kernel and manually recompile billiard.</p>\n<p>Luckily, Viktor Petersson has written a tutorial to get you started with Celery on FreeBSD here: <a href=\"http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/\" target=\"_blank\" rel=\"noopener\">http://www.playingwithwire.com/2009/10/how-to-get-celeryd-to-work-on-freebsd/</a></p>\n<h3 id=\"遇到了完整性错误-IntegrityError-：Duplicate-Key-errors，什么原因？\"><a href=\"#遇到了完整性错误-IntegrityError-：Duplicate-Key-errors，什么原因？\" class=\"headerlink\" title=\"遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？\"></a>遇到了完整性错误(IntegrityError)：Duplicate Key errors，什么原因？</h3><p>答案：MySQL死锁。</p>\n<h3 id=\"我的任务为什么没有被处理？\"><a href=\"#我的任务为什么没有被处理？\" class=\"headerlink\" title=\"我的任务为什么没有被处理？\"></a>我的任务为什么没有被处理？</h3><p>答案：用RabbitMQ的话，你可以通过运行如下命令看有多少个消费者当前在接收任务：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmqctl list_queues -p &lt;myvhost&gt; name messages consumers</span><br><span class=\"line\">Listing queues ...</span><br><span class=\"line\">celery     2891    2</span><br></pre></td></tr></table></figure></p>\n<p>以上输出表明任务-队列里有2891条messages在等待被处理，而且有两个消费者正在处理他们。</p>\n<p>队列从未被清空的一个原因可能是你有一个过期的worker进程劫持了这些messages。如果这个worker没有被正确地杀掉，就有可能发生这种情况。</p>\n<p>当一个message被一个worker接收到了，这个worker在标记该message被处理前会等待被应答。这个worker不会重发message给另一个消费者，直到该消费者被正确地关闭。<br>如果你遇到这个问题，你必须手动杀掉所有的worker并重启：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkill <span class=\"string\">'celery worker'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"comment\"># - If you don't have pkill use:</span></span><br><span class=\"line\">$ <span class=\"comment\"># ps auxww | grep 'celery worker' | awk '&#123;print $2&#125;' | xargs kill</span></span><br></pre></td></tr></table></figure></p>\n<p>你可能必须等一会儿，知道所有的worker都结束了正在执行的任务。如果仍然长时间挂起，你可以强制杀掉：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkill -9 <span class=\"string\">'celery worker'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"comment\"># - If you don't have pkill use:</span></span><br><span class=\"line\">$ <span class=\"comment\"># ps auxww | grep 'celery worker' | awk '&#123;print $2&#125;' | xargs kill -9</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我的任务为什么不会运行？\"><a href=\"#我的任务为什么不会运行？\" class=\"headerlink\" title=\"我的任务为什么不会运行？\"></a>我的任务为什么不会运行？</h3><p>答案：可能有语法错误导致任务模块没有被导入。<br>你可以看看通过手动执行任务，Celery能不能运行该任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from myapp.tasks import MyPeriodicTask</span><br><span class=\"line\">&gt;&gt;&gt; MyPeriodicTask.delay()</span><br></pre></td></tr></table></figure></p>\n<p>观察worker的日志文件，是否可以找到该任务，或者有没有其他错误发生。</p>\n<h3 id=\"我的定时任务为什么不会运行？\"><a href=\"#我的定时任务为什么不会运行？\" class=\"headerlink\" title=\"我的定时任务为什么不会运行？\"></a>我的定时任务为什么不会运行？</h3><p>答案：参见上一个问题。</p>\n<h3 id=\"我怎么清理所有的等待中任务？\"><a href=\"#我怎么清理所有的等待中任务？\" class=\"headerlink\" title=\"我怎么清理所有的等待中任务？\"></a>我怎么清理所有的等待中任务？</h3><p>答案：你可以使用<code>celery purge</code>命令来清理所有的已配置的任务队列。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj purge</span><br></pre></td></tr></table></figure></p>\n<p>或者在代码中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from proj.celery import app</span><br><span class=\"line\">&gt;&gt;&gt; app.control.purge()</span><br><span class=\"line\">1753</span><br></pre></td></tr></table></figure></p>\n<p>如果你只是想清理特定队列中的消息，你必须使用AMQP API，或者<code>celery amqp</code>的功能：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj amqp queue.purge &lt;queue name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1753是被清理的消息数。</p>\n<p>你也可以开启<code>--purge</code>选项去启动worker，worker启动的时候就会清理消息。</p>\n<h3 id=\"我清理了message，但是队列队列中仍然有消息残留？\"><a href=\"#我清理了message，但是队列队列中仍然有消息残留？\" class=\"headerlink\" title=\"我清理了message，但是队列队列中仍然有消息残留？\"></a>我清理了message，但是队列队列中仍然有消息残留？</h3><p>答案：只要任务真的被执行了，任务就被应答（从队列中移除）了。在worker接收到一个任务之后，在真正被执行前需要一点时间，特别是如果有大量任务已经在等待执行。没有被应答的消息，会被worker保持，直到消息关闭和broker（AMQP服务器）的连接。当连接关闭时（比如，因为worker停止了），任务会被broker重发给下一个可用的worker（或者在worker重启后又发给它），因此正确地清理等待任务的队列需要停掉所有的worker，然后再用<code>celery.control.purge</code>清理任务。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><h3 id=\"如果我有一个id指向一个任务，怎么得到任务结果？\"><a href=\"#如果我有一个id指向一个任务，怎么得到任务结果？\" class=\"headerlink\" title=\"如果我有一个id指向一个任务，怎么得到任务结果？\"></a>如果我有一个id指向一个任务，怎么得到任务结果？</h3><p>答案：用<code>task.AsyncResult</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = my_task.AsyncResult(task_id)</span><br><span class=\"line\">&gt;&gt;&gt; result.get()</span><br></pre></td></tr></table></figure></p>\n<p>这会用任务的当前结果后端(result backend)返回一个<a href=\"http://docs.celeryproject.org/en/latest/reference/celery.result.html#celery.result.AsyncResult\" target=\"_blank\" rel=\"noopener\">AsyncResult</a>的实例。<br>如果你需要指定一个自定义的结果后端，或者你想使用当前应用的默认后端，你可以使用<code>app.AsyncResult</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = app.AsyncResult(task_id)</span><br><span class=\"line\">&gt;&gt;&gt; result.get()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><h3 id=\"使用pickle不是有安全隐患吗？\"><a href=\"#使用pickle不是有安全隐患吗？\" class=\"headerlink\" title=\"使用pickle不是有安全隐患吗？\"></a>使用pickle不是有安全隐患吗？</h3><p>答案：事实上，自从Celery4.0起，默认的序列化器是现在的JSON，就确保了人们有意识地选择序列化器并且意识到了这一担忧。<br>防范未认证授权的worker、数据库和其他传输pickled数据的服务接入是必要的。<br>注意到这不仅仅是你应该意识到有关Celery的问题，例如Django也使用pickle作为其缓存客户端。<br>对任务消息，你可以设置<code>task_serializer</code>为<code>json</code>或者<code>yaml</code>，而不是pickle。<br>类似地可以设置<code>result_serializer</code>。</p>\n<h3 id=\"message是否可以加密？\"><a href=\"#message是否可以加密？\" class=\"headerlink\" title=\"message是否可以加密？\"></a>message是否可以加密？</h3><p>答案：一些AMQPworker支持使用SSL（包括RabbitMQ），你可以通过<code>broker_use_ssl</code>开启这一功能。<br>给消息加入额外的加密和安全性也是可能的，如果你有需求，应该联系邮件列表。</p>\n<h3 id=\"以root用户运行worker是安全的吗？\"><a href=\"#以root用户运行worker是安全的吗？\" class=\"headerlink\" title=\"以root用户运行worker是安全的吗？\"></a>以root用户运行worker是安全的吗？</h3><p>答案：不是！<br>我们现在还没有发觉任何安全问题，但是认为安全问题不存在就太天真了，因此推荐以非特权用户运行Celery服务（celery woker， celery beat， celeryev等）。</p>\n<h2 id=\"Brokers\"><a href=\"#Brokers\" class=\"headerlink\" title=\"Brokers\"></a>Brokers</h2><h3 id=\"为什么RabbitMQ崩溃了？\"><a href=\"#为什么RabbitMQ崩溃了？\" class=\"headerlink\" title=\"为什么RabbitMQ崩溃了？\"></a>为什么RabbitMQ崩溃了？</h3><p>答案：RabbitMQ如果用光内存就会崩溃。未来版本的RabbitMQ会修复这一个问题。<a href=\"https://www.rabbitmq.com/faq.html#node-runs-out-of-memory\" target=\"_blank\" rel=\"noopener\">https://www.rabbitmq.com/faq.html#node-runs-out-of-memory</a></p>\n<blockquote>\n<blockquote>\n<p>注意：<br>这已经不再是问题，RabbitMQ2.0+包含了一个新的固件，对内存不足错误是容忍的。因此推荐RabbitMQ2.1+版本配合Celery使用。如果你还在使用老版本，而且还遇到崩溃问题，赶紧升级吧。</p>\n</blockquote>\n</blockquote>\n<p>Celery的错误配置最终也会导致老版本RabbitMQ的崩溃。即便不崩溃，也会消耗大量的资源，因此意识到这一普遍陷阱很重要。</p>\n<ul>\n<li><p>事件Events<br>加上<code>-E</code>选项运行worker将会在worker内部事件发生时发送消息。<br>事件应该只在你有一个活跃的监控器消费事件的时候才被开启，否则你需要定期清理事件队列。</p>\n</li>\n<li><p>AMQP 后端结果<br>在使用AMQP结果后端运行的时候，每个任务结果都会作为消息发送。如果你不收集collect这些结果，他们会积累，RabbitMQ最终会耗尽内存。<br>结果后端现在被弃用了，所以你不应该再使用。如果你需要多个消费者访问结果，可以用RPC后端来做rpc风格的调用，或者一个持久化的后端。<br>默认情况下结果在一天后失效。可以通过配置<code>result_expires</code>来降低这个有效期。</p>\n</li>\n</ul>\n<p>如果你不需要任务结果，确保你设置了<code>ignore_result</code>选项。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.task(ignore_result=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mytask</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span><span class=\"params\">(Task)</span>:</span></span><br><span class=\"line\">    ignore_result = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Celery可以和ActiveMQ-STOMP一起使用吗？\"><a href=\"#Celery可以和ActiveMQ-STOMP一起使用吗？\" class=\"headerlink\" title=\"Celery可以和ActiveMQ/STOMP一起使用吗？\"></a>Celery可以和ActiveMQ/STOMP一起使用吗？</h3><p>答案：不能。</p>\n<h3 id=\"不使用AMQP-broker时，哪些特征不支持了？\"><a href=\"#不使用AMQP-broker时，哪些特征不支持了？\" class=\"headerlink\" title=\"不使用AMQP broker时，哪些特征不支持了？\"></a>不使用AMQP broker时，哪些特征不支持了？</h3><p>不完全列表：</p>\n<ul>\n<li>远程控制命令（仅由Redis支持）</li>\n<li>事件监控在所有的虚拟传输中可能不会工作</li>\n<li>header和fanout（扇出，Redis支持） exchange types</li>\n</ul>\n<h2 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h2><h3 id=\"调用tasks时如何复用连接？\"><a href=\"#调用tasks时如何复用连接？\" class=\"headerlink\" title=\"调用tasks时如何复用连接？\"></a>调用tasks时如何复用连接？</h3><p>答案：查看<code>broker_pool_limit</code>设置。v2.5+就默认开启连接池了。</p>\n<h3 id=\"子进程中sudo反回了None\"><a href=\"#子进程中sudo反回了None\" class=\"headerlink\" title=\"子进程中sudo反回了None\"></a>子进程中sudo反回了None</h3><p>有一个sudo的配置选项来使得不经过tty运行sudo的处理是非法的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults requiretty</span><br></pre></td></tr></table></figure></p>\n<p>如果你在<code>/etc/sudoers</code>文件中有这项配置，那worker作为守护进程跑的时候，任务将不能调用sudo。如果你想开启，你需要移除上面那一行。<a href=\"http://timelordz.com/wiki/Apache_Sudo_Commands\" target=\"_blank\" rel=\"noopener\">http://timelordz.com/wiki/Apache_Sudo_Commands</a></p>\n<h3 id=\"为什么workers不能处理任务的时候还能将任务从队列中删除？\"><a href=\"#为什么workers不能处理任务的时候还能将任务从队列中删除？\" class=\"headerlink\" title=\"为什么workers不能处理任务的时候还能将任务从队列中删除？\"></a>为什么workers不能处理任务的时候还能将任务从队列中删除？</h3><p>答案：worker拒绝未知任务、错误编码的消息、不包含正确域field的消息（按照任务消息协议）。<br>如果不拒绝这些，会导致重复传送，引发死循环。<br>最近版本的RabbitMQ有能力配置一个dead-letter队列来交换，所以那些被拒的消息就被转移到了那里。</p>\n<h3 id=\"我可以通过任务名称调用任务吗？\"><a href=\"#我可以通过任务名称调用任务吗？\" class=\"headerlink\" title=\"我可以通过任务名称调用任务吗？\"></a>我可以通过任务名称调用任务吗？</h3><p>答案：是的，用<code>app.send_task</code>。<br>你也可以在任何语言中使用AMQP客户端通过名字调用一个任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.send_task(&apos;tasks.add&apos;, args=[2, 2], kwargs=&#123;&#125;)</span><br><span class=\"line\">&lt;AsyncResult: 373550e8-b9a0-4666-bc61-ace01fa4f91d&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"我能设置当前任务的id吗？\"><a href=\"#我能设置当前任务的id吗？\" class=\"headerlink\" title=\"我能设置当前任务的id吗？\"></a>我能设置当前任务的id吗？</h3><p>答案：是的，当前id以及更多内容在任务请求里都是可用的。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.task(bind=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mytask</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    cache.set(self.request.id, <span class=\"string\">\"Running\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-request-info\" target=\"_blank\" rel=\"noopener\">Task Request</a><br>如果你没有任务实例的引用，你可以使用<code>app.current_task</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.current_task.request.id</span><br></pre></td></tr></table></figure></p>\n<p>但是需要注意，这可能是任何任务，一个被worker执行的任务，或者一个直接被任务调用的任务，或者一个急切eager调用的任务。（此处原文：But note that this will be any task, be it one executed by the worker, or a task called directly by that task, or a task called eagerly.）</p>\n<p>可以用<code>current_worker_task</code>得到特定的当前被执行的任务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; app.current_worker_task.request.id</span><br></pre></td></tr></table></figure></p>\n<p>需要注意<code>current_task</code>, 和 <code>current_worker_task</code> 可能是None。</p>\n<h3 id=\"我如何指定一个自定义的task-id？\"><a href=\"#我如何指定一个自定义的task-id？\" class=\"headerlink\" title=\"我如何指定一个自定义的task_id？\"></a>我如何指定一个自定义的task_id？</h3><p>答案：能。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; task.apply_async(args, kwargs, task_id=&apos;…&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任务上可以使用装饰器吗？\"><a href=\"#任务上可以使用装饰器吗？\" class=\"headerlink\" title=\"任务上可以使用装饰器吗？\"></a>任务上可以使用装饰器吗？</h3><p>答案：能，但需要注意 <a href=\"http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-basics\" target=\"_blank\" rel=\"noopener\">Basics的侧边栏</a></p>\n<h3 id=\"我能使用自然数作为task-ids吗？\"><a href=\"#我能使用自然数作为task-ids吗？\" class=\"headerlink\" title=\"我能使用自然数作为task ids吗？\"></a>我能使用自然数作为task ids吗？</h3><p>答案：能。但是确保其是唯一的，因为两个相同id的任务的行为是未定义的。</p>\n<h3 id=\"我能指定，一旦另一个task结束，马上运行一个task吗？\"><a href=\"#我能指定，一旦另一个task结束，马上运行一个task吗？\" class=\"headerlink\" title=\"我能指定，一旦另一个task结束，马上运行一个task吗？\"></a>我能指定，一旦另一个task结束，马上运行一个task吗？</h3><p>答案：能。你可以在一个任务里面安全地启动一个任务。一个常用的模式是给任务加上回调：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery.utils.log <span class=\"keyword\">import</span> get_task_logger</span><br><span class=\"line\"></span><br><span class=\"line\">logger = get_task_logger(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.task(ignore_result=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log_result</span><span class=\"params\">(result)</span>:</span></span><br><span class=\"line\">    logger.info(<span class=\"string\">\"log_result got: %r\"</span>, result)</span><br></pre></td></tr></table></figure></p>\n<p>调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; (add.s(2, 2) | log_result.s()).delay()</span><br></pre></td></tr></table></figure></p>\n<p>获取更多信息：<a href=\"http://docs.celeryproject.org/en/latest/userguide/canvas.html\" target=\"_blank\" rel=\"noopener\">Canvas: Designing Work-flows</a></p>\n<h3 id=\"我能取消任务的执行吗？\"><a href=\"#我能取消任务的执行吗？\" class=\"headerlink\" title=\"我能取消任务的执行吗？\"></a>我能取消任务的执行吗？</h3><p>答案：能。用<code>result.revoke()</code>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; result = add.apply_async(args=[2, 2], countdown=120)</span><br><span class=\"line\">&gt;&gt;&gt; result.revoke()</span><br></pre></td></tr></table></figure></p>\n<p>或者，只有任务id时：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from proj.celery import app</span><br><span class=\"line\">&gt;&gt;&gt; app.control.revoke(task_id)</span><br></pre></td></tr></table></figure></p>\n<p>后者也支持传入任务id列表作为参数。</p>\n<h3 id=\"为什么我的远程控制命令被所有的workers接收到了？\"><a href=\"#为什么我的远程控制命令被所有的workers接收到了？\" class=\"headerlink\" title=\"为什么我的远程控制命令被所有的workers接收到了？\"></a>为什么我的远程控制命令被所有的workers接收到了？</h3><p>答案：为了接收到广播的远程控制命令，每一个worker节点基于其节点名创建了一个唯一的队列名。如果你有超过一个worker的主机名相同，控制命令将会在他们间循环接收。<br>为解决这个问题，你可以用<code>-n</code>参数显式地为每个worker设置节点名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ celery -A proj worker -n worker1@%h</span><br><span class=\"line\">$ celery -A proj worker -n worker2@%h</span><br></pre></td></tr></table></figure></p>\n<p>这里<code>%h</code>扩展成当前主机名。</p>\n<h3 id=\"我能发送一些任务到限定的一些服务器上吗？\"><a href=\"#我能发送一些任务到限定的一些服务器上吗？\" class=\"headerlink\" title=\"我能发送一些任务到限定的一些服务器上吗？\"></a>我能发送一些任务到限定的一些服务器上吗？</h3><p>答案：是的。你可以使用不同的消息路由拓扑，将任务路由到一个或多个worker上，而且一个worker实例可以绑定到多个队列。<br><a href=\"http://docs.celeryproject.org/en/latest/userguide/routing.html\" target=\"_blank\" rel=\"noopener\">Routing Tasks</a></p>\n<h3 id=\"我能禁掉任务的预取prefetching吗？\"><a href=\"#我能禁掉任务的预取prefetching吗？\" class=\"headerlink\" title=\"我能禁掉任务的预取prefetching吗？\"></a>我能禁掉任务的预取prefetching吗？</h3><p>答案：可能！AMQP的属于prefetch令人疑惑，因为它只被用来描述任务预取限制(task prefetching limit)。没有涉及实际的预取。<br>禁掉预取限制是可能的，但是那意味着worker会消费尽可能快地消费尽可能多的任务。<br><a href=\"http://docs.celeryproject.org/en/latest/userguide/optimizing.html#optimizing-prefetch-limit\" target=\"_blank\" rel=\"noopener\">一个有关预取限制的讨论，和worker的配置设定:同一时间只预定一个任务</a></p>\n<h3 id=\"我可以在运行时改变周期任务的间隔时间吗？\"><a href=\"#我可以在运行时改变周期任务的间隔时间吗？\" class=\"headerlink\" title=\"我可以在运行时改变周期任务的间隔时间吗？\"></a>我可以在运行时改变周期任务的间隔时间吗？</h3><p>答案：可以。你可以使用Django的数据库调度器，或者你可以创建一个新的调度子类，覆写<code>is_due()</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery.schedules <span class=\"keyword\">import</span> schedule</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_schedule</span><span class=\"params\">(schedule)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_due</span><span class=\"params\">(self, last_run_at)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> run_now, next_time_to_check</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Celery支持task优先级吗？\"><a href=\"#Celery支持task优先级吗？\" class=\"headerlink\" title=\"Celery支持task优先级吗？\"></a>Celery支持task优先级吗？</h3><p>答案：是的， RabbitMQv3.5.0+就支持优先级，Redis传输仿真实现了优先级支持。<br>你也可以通过将高优先级任务路由到不同的worker中，从而把工作优先级排好。在真实世界中，这通常比每一个消息的优先级更为奏效。你可以使用速率限制（rate limiting）和单条消息优先级（per message priorities）的组合来实现响应式的系统。</p>\n<h3 id=\"我应该使用重试retry还是acks-late？\"><a href=\"#我应该使用重试retry还是acks-late？\" class=\"headerlink\" title=\"我应该使用重试retry还是acks_late？\"></a>我应该使用重试retry还是acks_late？</h3><p>答案：看情况。用一个或者另一个都不是必要的，你可能想要使用两个。<br><code>Task.retry</code>用来重试任务，这是可以用<code>try</code>语句catch到可预知的错误（expected errors）的。AMQP事务不是用来处理这些错误的：如果任务引发了异常，仍然会被应答！</p>\n<p>如果某些原因worker在执行中挂掉了，你需要任务再次执行时，可以使用<code>acks_late</code>设置。没人知道worker挂掉了，这很重要，如果知道worker挂掉，通常有不可恢复的错误，需要人工介入（worker或者任务代码的bug）。<br>理想情况下，你可以安全地重试任何失败的任务，但是有少数情况例外，假设有如下任务：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_upload</span><span class=\"params\">(filename, tmpfile)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Increment a file count stored in a database</span></span><br><span class=\"line\">    increment_file_counter()</span><br><span class=\"line\">    add_file_metadata_to_db(filename, tmpfile)</span><br><span class=\"line\">    copy_file_to_destination(filename, tmpfile)</span><br></pre></td></tr></table></figure></p>\n<p>如果它在拷贝文件时挂掉了，我们会知道这里有个未完成状态存在。这不是个严格的教学场景，但你大概可以想象一些更为灾难性的场景。目前为止，编程较少的话则可靠性更弱。默认值是好的，需要它并且知道它们在干什么的用户仍然能开启<code>acks_late</code>（未来希望使用手动应答）。<br>此外，<code>Task.retry</code>在AMQP事务中有不可用的特性：在重试中延迟，最大重试次数等。<br>因此，可以对Python中的错误使用重试，如果你的任务是幂等的而且要求可靠性级别，结合<code>acks_late</code>一起使用。</p>\n<h3 id=\"我可以计划让tasks在特定的时间执行吗？\"><a href=\"#我可以计划让tasks在特定的时间执行吗？\" class=\"headerlink\" title=\"我可以计划让tasks在特定的时间执行吗？\"></a>我可以计划让tasks在特定的时间执行吗？</h3><p>答案：可以。使用<code>Task.apply_async()</code>的eta参数。<a href=\"http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#guide-beat\" target=\"_blank\" rel=\"noopener\">周期任务</a></p>\n<h3 id=\"我可以安全地关闭worker吗？\"><a href=\"#我可以安全地关闭worker吗？\" class=\"headerlink\" title=\"我可以安全地关闭worker吗？\"></a>我可以安全地关闭worker吗？</h3><p>答案：是的，使用<code>TERM</code>信号。这会告诉worker去结束所有当前执行的作业，然后尽可能快地关闭。只要完全关闭，实验性的传输中也不应该会有任务丢失。<br>你决不应该通过<code>KILL</code>信号(<code>kill -9</code>)来停止worker，除非你试过几次<code>TERM</code>等了几分钟看有没有关闭。</p>\n<p>另外，确保你只是杀掉了worker的主进程，而不是它的任何子进程。如果你知道关闭worker所依赖的一个子进程正在执行一个任务，你可以给这个特定的子进程指定一个杀死信号（kill signal），这也意味着任务会被设定一个WorkerLostError状态，因此这个任务不会再执行了。</p>\n<p>如果你安装了<code>setproctitle</code>模块，指定进程类型很容易。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install setproctitle</span><br></pre></td></tr></table></figure></p>\n<p>安装这个库，你可以看到在ps命令的列表中看到进程类型，但是worker必须重启才能生效。</p>\n<p><a href=\"http://docs.celeryproject.org/en/latest/userguide/workers.html#worker-stopping\" target=\"_blank\" rel=\"noopener\">停止worker</a></p>\n<h3 id=\"我可以在平台的后端运行worker吗？\"><a href=\"#我可以在平台的后端运行worker吗？\" class=\"headerlink\" title=\"我可以在平台的后端运行worker吗？\"></a>我可以在平台的后端运行worker吗？</h3><p>Answer: Yes, please see [Daemonization[(<a href=\"http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing\" target=\"_blank\" rel=\"noopener\">http://docs.celeryproject.org/en/latest/userguide/daemonizing.html#daemonizing</a>.</p>\n<h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><h3 id=\"django-celery-beat创建的数据库表有什么目的？\"><a href=\"#django-celery-beat创建的数据库表有什么目的？\" class=\"headerlink\" title=\"django-celery-beat创建的数据库表有什么目的？\"></a>django-celery-beat创建的数据库表有什么目的？</h3><p>用到数据库后端定时器（database-backend schedule）的时候，从PeriodicTask的数据模型中取出周期任务计划有一些其他的辅助表 (IntervalSchedule, CrontabSchedule, PeriodicTasks)。</p>\n<h3 id=\"django-celery-results创建的数据库表有什么目的？\"><a href=\"#django-celery-results创建的数据库表有什么目的？\" class=\"headerlink\" title=\"django-celery-results创建的数据库表有什么目的？\"></a>django-celery-results创建的数据库表有什么目的？</h3><p>Django的数据库结果后端扩展需要两个额外的数据模型：TaskResult and GroupResult.</p>\n<h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"Celery支持Windows吗？\"><a href=\"#Celery支持Windows吗？\" class=\"headerlink\" title=\"Celery支持Windows吗？\"></a>Celery支持Windows吗？</h3><p>答案：不。4.x版本以上就不支持Windows了。</p>\n<h1 id=\"欢迎扫码加群交流\"><a href=\"#欢迎扫码加群交流\" class=\"headerlink\" title=\"欢迎扫码加群交流\"></a>欢迎扫码加群交流</h1><p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-11-26/19293813.jpg\" alt=\"\"></p>\n"},{"date":"2016-03-08T15:43:00.000Z","status":"public","title":"C语言入门奇葩说-0","keywords":["C语言","入门","教程"],"_content":"\n# About\n！！！**这个部分略过也没有大碍的。可以直接从关于读书开始看起。**！！！\n\n有个小伙伴加电脑白痴说要考二级，问我要不要报培训班。我听了当然觉得很愚蠢。如果我没有考过C语言的二级，我或许不敢发表什么定性的评价。\n可是我是考过计算机等级考试二级C语言的男人啊。\n当然没必要报啥培训班了。我当时就想说，C语言啊，还不如我来教呢。\n我当然不是什么大神，离大神大概有银河系的思念的距离吧。\n\n但是既然有这个想法，肯定是有我的考虑的。\n第一个，也是最重要的原因，最近在读一本C语言的书，赵岩的《C语言点滴》。这本书可以说很大程度上改变了我对C语言教材、参考书的刻板看法。\n因为这本书实在是太有趣了。具体介绍这里就不展开了。\n所以这本书也就激励我，用这本书的思维，去述说C语言，让一个完全没有概念的小白理解C语言。\n因为，白居易说得好啊。\n白居易说了啥我也不知道。我只知道白居易的诗有个很大很大的特点。\n\n另外吧，从去年年底开始接触的一些东西，基本上都是用的C/C++。自然还要接触很多，更加需要温习、深入。\n而且老师当时就说了，你们应该把这些个项目的工作原理跟你们父母讲得明白，那才是真的明白了。\n\n还有吧，感慨自己学C语言时间太短，未能及时领悟它的博大精深，又走了许多弯路。主要也是因为自己当初缺乏指导。\n\n**下面简单说下我当初的入门之旅吧。** 也算是我写给自己的一个回顾吧。\n## 计算机背景知识\n首先当然要介绍这个，可以说这个是必要的先修知识。毕竟C语言可是跑在计算机（包括许多你不认为是计算机的小小的计算机）上的。\n小学一年级的拼音学得很好。\n大概四年级的时候把小学阶段的字都差不多认全了。\n小学五年级开始上网。网吧。单机游戏。侠盗飞车，CS，暴力摩托。QQ加陌生人好友聊天。（这时候拼音学的好就派上用场了）这时候好像学校也开了电脑课，好像就是老师在上面讲些最基础的知识和PPT,WORD这样的基本操作，我印象最深刻的就是看到老师用五笔打字，按了四个键就出来一大串字，觉得好牛啊。后来自己操作的时候就去做PPT（其实就是创建一个PPT文件然后写个标题画个图，反正不懂随便点点）。\n六年级开始逛门户网站。那时候热爱军事，战斗机。\n大概就是小学毕业那会嚷嚷着想买个游戏机。家里人不肯。后来折衷买了个学习机。其实就是带键盘的游戏机。\n那时候我老姐差不多上大学了。她让我去练打字，学五笔。\n花了一个月把五笔学会了。当时我真的挺佩服自己的，因为五笔字根口诀并不会背，只是跟着打字软件学习，但是大部分字都能打得出来。以及后来我不会什么方法却学会了拧魔方差不多一个道理，我用的是模糊记忆法。（其实平常读书也都是这样浑浑噩噩）\n初中电脑课我就一直玩金山打字那个警察追小偷，不断刷新纪录。\n初二的时候老姐把不要的电脑给我了。我玩了一个暑假的游戏，各种小游戏、单机游戏玩了个遍差不多（因为家里从来没有网）。暑假快结束的时候发现一个超好玩的篮球游戏。\n然后我的整个初三就在玩这一个游戏。在学校住宿，晚上请假回来玩游戏。有时候还通宵（我的人生第一个通宵啊）。通宵怕老妈知道我在玩电脑，就把电脑放在被窝里面玩，好热啊，电脑温度太高，然后就崩了几回。我只记得一次是我拿去修的，重装系统。当时电脑店里面那个口吃问我装win7还是xp，我问有什么区别，他说win7是新出的系统，xp要稳定些，我说那xp吧。看他一点也不熟练地给我装系统，满屏幕全他妈是我看不懂的英文，我好佩服这个口吃（好像还有点瘸）。他要价30块。我借口说没带那么多，给了26，他也收了。\n然后顺理成章的成绩直线下降，对学习也越来越没有兴趣。那时候顺便还用酷狗播放器制作歌词，改编歌词放进去，然后拷贝到电子词典里面放歌看歌词，好不快活。\n高中继续玩那个游戏。不过一中离家太远了，我又不能把笔记本带学校去。去网吧也基本上去的是高中旁边的学校。\n初三之后就再也没有练过打字了，后面所有对电脑的接触就是上网，看新闻，打游戏。\n大一说不让带电脑。一开始也没敢带。国庆时候回去把电脑带来了，还是打那个游戏。打了这么多年都不会腻，我觉得这一定是真爱。\n高二暑假买了个智能手机，高三玩手机比较多，毕竟那时候老班对手机比较宽容。高二开始看美剧，第一部就是《越狱》，无法自拔。高三为了练听力，看《生活大爆炸》。\n忘了说一点，大学之前的网吧上网经历，我因为有一台不能联网的笔记本，和一个可以放音乐的电子词典，和一个手机，所以我每次都带了U盘，去下载视频啊音乐啊小说啊之类的东西。所以这个经历也成为了我的一个习惯。现在看来还是不错的经历。因为那时候就把很多下载网站摸得还算比较熟了。像国内大部分下载站，都有无数的广告诱惑你去下载，我那时候上了无数的当，自然就摸得很清楚了。但是由于英语水平有限，对国外的网站基本从未接触过。\n大一继续打游戏看美剧。大一上那段时间，一有时间在寝室里面呆着我就看美剧。\n快期末的时候电脑挂了。拿去检查说可能是主板坏了，要修的话划不来，毕竟是这么老旧的电脑了。幸好在期末之前一段时间挂了，我有时间复习，所以那次期末考也是目前为止大学考得最好的……\n大一寒假的时候，研究生班主任在班群里面说，下学期要学C语言了啊，然后发了一个PDF，让我们看看。我好奇地打开看了下，**一脸大写的萌逼啊有木有**。所以后来我特别能体会新手的痛苦。\n我大概看了那本书的第一章，看完之后完全不知道这是在说啥。所以就没看了。\n大一下开学后不久我买了电脑。对电脑完全不懂啊，我姐也不太懂。问同学买了啥，那给我来个同款吧。\n\n## 学校开的C语言课\n\n开始上C语言课了。我住东边，上课在西边。我又是**一脸大写的萌逼**啊。老师鼓励带电脑上课，我特么不难背么。一台笔记本也有几公斤啊。\n第一次C语言上机课很快就开始了。我拿了还没翻过的教科书去上课。按照老师指示的，打开VC6.0,新建一个cpp文件，往编辑框里面写代码。——我当然不会写什么代码，我照着书的例子敲的。然后照指示保存，再按一个键（这个键的功能就是编译+运行，这个之后再说），妈蛋结果不通过，报了好多error。我当时就怒了，**辛辛苦苦照着教科书打字那么久，结果却不能运行！！！**\n当时隔壁坐了个编程大神。大一认识的时候他说他高中就参加过编程比赛拿过奖，一来就说准备转计算机学院的。我问他这个程序咋不能运行啊。他看了一下，帮我又编辑（其实没有修改一个字符，全都是排列组合的操作）了一番，然后就运行成功了。\n我当时就佩服得五体投地。\n这也让我开始不迷信书籍。\n事实证明，**所有的示例代码都是有一定的前提假设才是正确的** **所有的示例代码都是有一定的前提假设才是正确的**  **所有的示例代码都是有一定的前提假设才是正确的**\n自此发奋学习C语言。\n第一件事当然就是回到自己的电脑上把VC6.0给装了。这个应该来说是很多人学习C语言的第一步，但是却难倒了很多人。\n**因为VC6.0是一款很老的软件，在当前主流的操作系统win7,win8.1（那时候win10还没正式出来）里面不能不经修改地正常运行。**\n这是一个兼容性问题。但是网上的解决办法也很多。因为有之前在网吧搜资源下载的经历，我肯定直接百度，百度经验第一篇就成功帮我解决了这个问题。VC6.0顺利地跑在了我的win8.1上。\n\n然后就是看书，但是因为前车之鉴，我并没有把书上的代码敲一遍跑一下试试。\n不过我花了两周时间（上课也看）把教科书的前面大部分看完了。这之后老师开始每周布置编程题作业。我其实也并不会做那些题目。代码都是靠百度。\n不过能顺利把作业交了不就好了么。当时很多人连百度都没用上，直接把别人的作业改个名字就交了。\n大概又过了两三周，把教科书看完了。\n之后就没学了。平常作业就是百度一下，然后缝缝补补。\n这时听了个讲座，有个学长说他一个寒假自学了C++，觉得C++真的好有用。我学了C还没觉得C多有用，所以这时候我就跑去学习C++。当时也是机缘巧合，正好混了个工作室，在工作室里面玩的时候看到里面有一本C++的大部头书，老外写的，中国人翻译的。就借来看。大概看了个把月，把大部分看完了。又过了快一个月，全部看完了。这回我把书上的示例代码都敲过一遍。有的可以运行，也有的有点问题。但是我都没管。把书看完了就行了。\n前面没有说的一点就是，我上过四次C语言课之后，大家都觉得老师讲得太水了，就不去上课了。上机课也太水了，其实是让我们做编程作业的。但是大家都是百度，去机房和在宿舍没啥区别，所以后来也就不去上机了。\n\n## 关于读书\n\n**那么我是怎么在短时间内读完C和C++的书呢？**\n简单总结就是：\n1. 不求甚解\n2. 自以为是\n3. 换位思考\n\n这个总结太简洁了，所以下面还是展开来说。\n\n### 不求甚解\n\n这个应该很好懂。因为C语言的教科书实在是晦涩难懂，这其中犹以某些国内教材为甚。相比之下，国外教材更加通俗易懂，深入浅出。但是老外的思维方式和观念和我们不太一样。\n说直白点就是人家的思维更加现代化，虽然没吃过猪肉，但是见过猪跑。这时候人家再来学吃猪肉，就知道哪个是前腿子肉，哪个是后腿子肉了不是。\n\n那么到底啥是不求甚解？现阶段我能说的就是，这个C语言也是一门语言，和英语汉语没有什么根本的不一样，没有那么多为什么，不要问那么多为什么。都是极少数语言天才和一群优秀的语言大师约定俗成的。\n\n### 自以为是\n\n这个本来是个贬义词。但我用来表达一个概念就是，C语言里面有些 **数据结构** 和 **算法**，有点抽象。\n抽象最考验人的智商了对不。\n所以这个时候就需要自以为是了。是不是真的你想的那样其实不重要，重要的是你根据书中的描述或者别人的正确的描述，在你自己的脑海中自以为是起来。\n\n### 换位思考\n前面说C语言也是一门语言，语言是用来交流的，只不过C语言是人与计算机交流，普通语言是人与人之间交流。注意，**我说的是人与计算机交流，而不是计算机与计算机交流。**这个概念我认为很重要。因为只有这样，**对人来说，C语言才具有它的可读性。**\n**可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性**\n重要的事情可不能只是说三遍。\n可读性是对人这一方面强调的。这个有点像你自己说的话除了让别人能听懂以外，你自己也得能听懂吧。\n那计算机呢？\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n重要的事情还是得多说几遍。\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n前辈们在0和1的基础上设计了很多相对而言简单易懂易用的概念，这个是必须要了解的（深刻理解就有点强人所难了）。注意这里说的是相对而言。\n所以你要换位思考，计算机的思维方式是怎样的。\n计算机的时间很单纯，没有人间那么多的弯弯绕绕。**对就是对，错就是错，没有模糊选项，只有可选项。**\n\n# Begin and End\n\n前面的About都是一大堆写给自己看的废话。\n现在正式开始吧。\n我列个学习计划提纲大概如下：\n\n## BEGIN\n\n0、学习使用搜索引擎。\n你一定注意到了，这个序号是0。你一定在想为什么，哈哈。这是极有趣的一个预演。\n因为在编程的世界，表示第一个的序号不是1，而是0。\n关于搜索引擎，这个非常非常重要。\n建议使用Google。鉴于国内Google被墙，可以考虑翻墙，或者使用国内某些网站提供的谷歌镜像。（这里肯定有你听不懂的，是时候使用搜索引擎了）\n这里推荐两个提供镜像的网址：（很稳定）\n<www.lesou.us>      <wwww.so.chongbuluo.com>\n除了Google之外，必应也还不错。必应的网址是:<www.bing.com>。微软出品。\n除了必应以外，百度吧。你不知道，百度一下。\n除了百度以外，还是算了吧。\n搜索引擎的使用也有一定的方法，在知乎上看到过很好的回答。这里就不赘述了（反正说得也没人家好）。\n关于搜索引擎能干嘛，重要性有多大。我就不吹牛逼了。\n因为我吹得再大也没有实际的大。\n\n1、提前熟悉计算机、编程方面的常用词语、术语、概念、说法。\n免得后面像刘姥姥进了大观园一样一脸傻逼样。\n熟悉的方法没别的，去网上的跟C语言、编程、计算机、科技、通信有关的网站、论坛、贴吧之类的，随便逛逛，一定能找到很多不熟悉的说法，然后百度一下。在之后的学习中也是一样的，看到某个说法觉得陌生，就百度一下。\n噢，**这个包括相应的英文版本，并且以英文说法为主要参考。**\n\n2、搭建开发环境。\n注意了啊，我已经开始使用这方面的用语了。所谓搭建开发环境呢，用你能理解的说法就是**在你的电脑（Computer)的操作系统(Operating System)上安装微软公司（Microsoft Corporation)的VC6.0。这个软件貌似在微软官网不太能找到了，现实生产环境中也没人用，但是没关系。中国的教育阵线力量是很强大的，考试用的是这个软件，网上一搜就有一大把，还附带安装说明。\n\n搭建之后熟悉这个软件的菜单位置、基本操作。\n\n3、准备入门书籍。\n当然大部分学习还是要靠现成的教材的。对初学者来说，一本书就已经够了。但是我的入门教材就是学校的教科书，还是特别老又没有名气的那种。所以也不知道哪本最好。不过很有名气的有两本，国内一个是**谭浩强的C语言（这个好像还有视频可以在网上下载到）**，国外一个是那本最经典的啥啥啥，名字忘了但是就是两个**C语言创始人之一编写的那本**。国外还有一个专业的计算机类书籍出版社叫O'Reily，凡是这个出版社的书籍，基本上可以说是世界上最顶尖的水平，这个水平包括了很强的可读性、权威性、正确性。**（国内很多教材都是敷衍了事出版的，而且作者在写书方面能力匮乏，错误很多，又不好懂）**\n怎么准备呢？\n使用搜索引擎下载电子档（一般来说就是pdf格式的）；书店买书；图书馆借书；同学借书。（如果有教材的话，一本教材就够了）\n另外推荐一个小甲鱼C语言教学视频。这个讲师讲得还算有趣，可以试着看几集，看自己是否有兴趣。\n哦，忘了一本书了，叫嗨翻C语言，老外写的。听名字就知道了，图文并茂，有声有色。这本我只翻过，没有看过，但是应该还行。如果有在图书馆看到这本书，可以试试。\n\n4、一边看示例程序，一边看书。\n这里我想表达的重点在这里。\n我最中意的方法就是，带有特定目的（最经典的例如从1加到100）的一段小程序，争取读懂。而且是要没看过书的也要争取读懂。\n因为前面说过，C语言本身就强调可读性。\n**我会挑选一些程序，详细注释，穿插所涉及的知识点，以供阅读学习。即便没有预习过教材中的有关知识点也没关系。**\n**并且我会强调二级考试的重点。**\n\n5、看二级考试的参考书。\n这个书没别的，就一本。专为考试而生。考前借来看看就行了。\n如果前面第5步做得不错的话，这一步可以省略，或者敷衍了事。\n注意我说的是前面的第5步，其实序号是4。\n因为这一部分只占到了考试的10%，又全都是选择题。而且在前面的学习中，已经可以掌握一部分这方面的内容。 \n\n6、'\\0'\nC语言中字符串的结束符是这个。\n\n\n## 提问\n\n第一步，向自己提问；\n第二步，向教科书提问；\n第三步，向搜索引擎提问；\n第四步，向周围的人提问，比如我。\n\n提问要明确自己到底要知道要搞懂的是什么。\n提问要注意方式方法，遇到什么情况，要说清楚说详细说具体，而且要挑重点挑关键点强调，这样才方便别人解答。\n举个例子，比较常见的令初学者头疼的就是那个VC6.0报错。提问至少需要提供两方面内容，一个是源代码，一个是报错内容。\n\n## END\n\n这篇文章大概有两个用处，一个是给我本人自己回顾历史，一个是给要准备二级C语言考试的人消遣。\n文章中很多没有说明白的，很多说漏的，很多说错的，这在所难免。有些也是我故意略去的，比如学习编程需要很好的英文阅读水平。这点没有强调是因为我觉得对于二级C语言考试来说，这个完全可以忽略。\n但是有些对二级考试不重要的我又挑出来说了，是因为我觉得这些很重要，在任何场景下。比如使用搜索引擎。\n老的程序员有个说法，以前说\n>程序 = 数据结构 + 算法\n现在是\n>程序 = 搜索引擎 + 英语\n\n这篇文章通篇说得太泛。这不要紧，说具体不是本文的目的。后面我会继续写具体。当然是在另外一些文章里面了，但是同样是发表在这个网站。\n由于这个网站对文章的管理方式，我决定之后的文章都采用这样的命名方式：\n\n```c:n\n// SetTie.cpp\n/* 给文章设置一个统一规范的标题。*/\n\n/* 这个示例程序基本包含了C语言的精华。对正准备入门但还没迈开脚的人来说，读不懂是正常的。但是呢，记得运用前面是三个方法：不求甚解自以为是换位思考。 */\n\n/* 哎呀忘了介绍了，这个/* 和 * /是写注释的地方，\n在这两个符号里面随便写啥都行。我把后面那个中间加了个空格，因为如果不加的话，这个注释就Over了这不是我想看到的。*/\n\n// 这个//嘛，也是写注释的地方，但是呢，只能在这一行里面写。\n\n#include<stdio.h>   \n// 包含头文件，以使用头文件中的内容。以.h作为文件后缀名。stdio.h是标准(std=standard)输入输出(io=input,output)头文件。\n\n#define ARTICLES 20\n // 宏定义。对于某些固定的常量，比如我要写的文章总数20，我用一个ARTICLE表示。就是“定义ARTICLE为20”\n#define STR_LEN 100\n //和上面一样，这次定义的是一个字符串长度\n \nint SetTitle();\n// 函数声明，这里可以不写函数主体。这个函数比较复杂，我也不会写。所以就是简单表示一下含义。\n\nint main()// main()是固定的，是整个程序的entry入口。\n{\n    int i = 0;\n    // 定义一个整型变量（就是整数）i，并赋值(assign)为0。i这个字母通常用来做循环计数，第一次循环，第二次循环……\n    \n    // 循环头。for后面的括号里面，第一个i=0是初始条件，第二个i<ARTICLE是循环终止判断条件，不满足这个条件的时候循环终止；第三个i++是每次循环的后面都要执行的一个操作，一般就是i++这样的，表示循环次数+1。\n    for(i=0;l++;i<ARTICLES)\n    SetTitle(\"C语言入门奇葩说-%d\",i);\n    //这行代码按标准需要用一个大括号括起来，但是因为只有一行，大括号可以省略。这里是调用了前面声明的那个函数。将我的文章标题设置为《C语言奇葩说-0》、《C语言奇葩说-1》、《C语言奇葩说-2》……\n    \n    char string[STR_LEN] = \"上面那个SetTitle()函数啊，有点像我这个printf()函数呢\";    \n    \n    printf(\"%s\",string);//这个函数是初学阶段最重要最常用的一个函数，没有之一。作用就是打印（print,是打印显示到输出设备比如屏幕上的）。\n    \n    \n    return 0;\n    //有没有发现函数名字前面都有一个单词，main()前面是int，就要返回一个int整型数。一般来说，程序正常结束的话就返回一个0，异常就返回-1。\n}//~the end of main()\nint SetTitle()//一般来说，这一行就和前面那个声明一模一样，直接复制粘贴就行了\n{\n    ...//这个函数我是真的不知道怎么写\n}//~the end of SetTile()\n//~the end of SetTitle.cpp\n```","source":"_posts/C语言入门奇葩说-0.md","raw":"---\ndate: 2016-03-08 23:43\nstatus: public\ntitle: C语言入门奇葩说-0\nkeywords: \n- C语言\n- 入门\n- 教程\ntags: \n- C语言\n- 入门\ncategories: Language\n \n---\n\n# About\n！！！**这个部分略过也没有大碍的。可以直接从关于读书开始看起。**！！！\n\n有个小伙伴加电脑白痴说要考二级，问我要不要报培训班。我听了当然觉得很愚蠢。如果我没有考过C语言的二级，我或许不敢发表什么定性的评价。\n可是我是考过计算机等级考试二级C语言的男人啊。\n当然没必要报啥培训班了。我当时就想说，C语言啊，还不如我来教呢。\n我当然不是什么大神，离大神大概有银河系的思念的距离吧。\n\n但是既然有这个想法，肯定是有我的考虑的。\n第一个，也是最重要的原因，最近在读一本C语言的书，赵岩的《C语言点滴》。这本书可以说很大程度上改变了我对C语言教材、参考书的刻板看法。\n因为这本书实在是太有趣了。具体介绍这里就不展开了。\n所以这本书也就激励我，用这本书的思维，去述说C语言，让一个完全没有概念的小白理解C语言。\n因为，白居易说得好啊。\n白居易说了啥我也不知道。我只知道白居易的诗有个很大很大的特点。\n\n另外吧，从去年年底开始接触的一些东西，基本上都是用的C/C++。自然还要接触很多，更加需要温习、深入。\n而且老师当时就说了，你们应该把这些个项目的工作原理跟你们父母讲得明白，那才是真的明白了。\n\n还有吧，感慨自己学C语言时间太短，未能及时领悟它的博大精深，又走了许多弯路。主要也是因为自己当初缺乏指导。\n\n**下面简单说下我当初的入门之旅吧。** 也算是我写给自己的一个回顾吧。\n## 计算机背景知识\n首先当然要介绍这个，可以说这个是必要的先修知识。毕竟C语言可是跑在计算机（包括许多你不认为是计算机的小小的计算机）上的。\n小学一年级的拼音学得很好。\n大概四年级的时候把小学阶段的字都差不多认全了。\n小学五年级开始上网。网吧。单机游戏。侠盗飞车，CS，暴力摩托。QQ加陌生人好友聊天。（这时候拼音学的好就派上用场了）这时候好像学校也开了电脑课，好像就是老师在上面讲些最基础的知识和PPT,WORD这样的基本操作，我印象最深刻的就是看到老师用五笔打字，按了四个键就出来一大串字，觉得好牛啊。后来自己操作的时候就去做PPT（其实就是创建一个PPT文件然后写个标题画个图，反正不懂随便点点）。\n六年级开始逛门户网站。那时候热爱军事，战斗机。\n大概就是小学毕业那会嚷嚷着想买个游戏机。家里人不肯。后来折衷买了个学习机。其实就是带键盘的游戏机。\n那时候我老姐差不多上大学了。她让我去练打字，学五笔。\n花了一个月把五笔学会了。当时我真的挺佩服自己的，因为五笔字根口诀并不会背，只是跟着打字软件学习，但是大部分字都能打得出来。以及后来我不会什么方法却学会了拧魔方差不多一个道理，我用的是模糊记忆法。（其实平常读书也都是这样浑浑噩噩）\n初中电脑课我就一直玩金山打字那个警察追小偷，不断刷新纪录。\n初二的时候老姐把不要的电脑给我了。我玩了一个暑假的游戏，各种小游戏、单机游戏玩了个遍差不多（因为家里从来没有网）。暑假快结束的时候发现一个超好玩的篮球游戏。\n然后我的整个初三就在玩这一个游戏。在学校住宿，晚上请假回来玩游戏。有时候还通宵（我的人生第一个通宵啊）。通宵怕老妈知道我在玩电脑，就把电脑放在被窝里面玩，好热啊，电脑温度太高，然后就崩了几回。我只记得一次是我拿去修的，重装系统。当时电脑店里面那个口吃问我装win7还是xp，我问有什么区别，他说win7是新出的系统，xp要稳定些，我说那xp吧。看他一点也不熟练地给我装系统，满屏幕全他妈是我看不懂的英文，我好佩服这个口吃（好像还有点瘸）。他要价30块。我借口说没带那么多，给了26，他也收了。\n然后顺理成章的成绩直线下降，对学习也越来越没有兴趣。那时候顺便还用酷狗播放器制作歌词，改编歌词放进去，然后拷贝到电子词典里面放歌看歌词，好不快活。\n高中继续玩那个游戏。不过一中离家太远了，我又不能把笔记本带学校去。去网吧也基本上去的是高中旁边的学校。\n初三之后就再也没有练过打字了，后面所有对电脑的接触就是上网，看新闻，打游戏。\n大一说不让带电脑。一开始也没敢带。国庆时候回去把电脑带来了，还是打那个游戏。打了这么多年都不会腻，我觉得这一定是真爱。\n高二暑假买了个智能手机，高三玩手机比较多，毕竟那时候老班对手机比较宽容。高二开始看美剧，第一部就是《越狱》，无法自拔。高三为了练听力，看《生活大爆炸》。\n忘了说一点，大学之前的网吧上网经历，我因为有一台不能联网的笔记本，和一个可以放音乐的电子词典，和一个手机，所以我每次都带了U盘，去下载视频啊音乐啊小说啊之类的东西。所以这个经历也成为了我的一个习惯。现在看来还是不错的经历。因为那时候就把很多下载网站摸得还算比较熟了。像国内大部分下载站，都有无数的广告诱惑你去下载，我那时候上了无数的当，自然就摸得很清楚了。但是由于英语水平有限，对国外的网站基本从未接触过。\n大一继续打游戏看美剧。大一上那段时间，一有时间在寝室里面呆着我就看美剧。\n快期末的时候电脑挂了。拿去检查说可能是主板坏了，要修的话划不来，毕竟是这么老旧的电脑了。幸好在期末之前一段时间挂了，我有时间复习，所以那次期末考也是目前为止大学考得最好的……\n大一寒假的时候，研究生班主任在班群里面说，下学期要学C语言了啊，然后发了一个PDF，让我们看看。我好奇地打开看了下，**一脸大写的萌逼啊有木有**。所以后来我特别能体会新手的痛苦。\n我大概看了那本书的第一章，看完之后完全不知道这是在说啥。所以就没看了。\n大一下开学后不久我买了电脑。对电脑完全不懂啊，我姐也不太懂。问同学买了啥，那给我来个同款吧。\n\n## 学校开的C语言课\n\n开始上C语言课了。我住东边，上课在西边。我又是**一脸大写的萌逼**啊。老师鼓励带电脑上课，我特么不难背么。一台笔记本也有几公斤啊。\n第一次C语言上机课很快就开始了。我拿了还没翻过的教科书去上课。按照老师指示的，打开VC6.0,新建一个cpp文件，往编辑框里面写代码。——我当然不会写什么代码，我照着书的例子敲的。然后照指示保存，再按一个键（这个键的功能就是编译+运行，这个之后再说），妈蛋结果不通过，报了好多error。我当时就怒了，**辛辛苦苦照着教科书打字那么久，结果却不能运行！！！**\n当时隔壁坐了个编程大神。大一认识的时候他说他高中就参加过编程比赛拿过奖，一来就说准备转计算机学院的。我问他这个程序咋不能运行啊。他看了一下，帮我又编辑（其实没有修改一个字符，全都是排列组合的操作）了一番，然后就运行成功了。\n我当时就佩服得五体投地。\n这也让我开始不迷信书籍。\n事实证明，**所有的示例代码都是有一定的前提假设才是正确的** **所有的示例代码都是有一定的前提假设才是正确的**  **所有的示例代码都是有一定的前提假设才是正确的**\n自此发奋学习C语言。\n第一件事当然就是回到自己的电脑上把VC6.0给装了。这个应该来说是很多人学习C语言的第一步，但是却难倒了很多人。\n**因为VC6.0是一款很老的软件，在当前主流的操作系统win7,win8.1（那时候win10还没正式出来）里面不能不经修改地正常运行。**\n这是一个兼容性问题。但是网上的解决办法也很多。因为有之前在网吧搜资源下载的经历，我肯定直接百度，百度经验第一篇就成功帮我解决了这个问题。VC6.0顺利地跑在了我的win8.1上。\n\n然后就是看书，但是因为前车之鉴，我并没有把书上的代码敲一遍跑一下试试。\n不过我花了两周时间（上课也看）把教科书的前面大部分看完了。这之后老师开始每周布置编程题作业。我其实也并不会做那些题目。代码都是靠百度。\n不过能顺利把作业交了不就好了么。当时很多人连百度都没用上，直接把别人的作业改个名字就交了。\n大概又过了两三周，把教科书看完了。\n之后就没学了。平常作业就是百度一下，然后缝缝补补。\n这时听了个讲座，有个学长说他一个寒假自学了C++，觉得C++真的好有用。我学了C还没觉得C多有用，所以这时候我就跑去学习C++。当时也是机缘巧合，正好混了个工作室，在工作室里面玩的时候看到里面有一本C++的大部头书，老外写的，中国人翻译的。就借来看。大概看了个把月，把大部分看完了。又过了快一个月，全部看完了。这回我把书上的示例代码都敲过一遍。有的可以运行，也有的有点问题。但是我都没管。把书看完了就行了。\n前面没有说的一点就是，我上过四次C语言课之后，大家都觉得老师讲得太水了，就不去上课了。上机课也太水了，其实是让我们做编程作业的。但是大家都是百度，去机房和在宿舍没啥区别，所以后来也就不去上机了。\n\n## 关于读书\n\n**那么我是怎么在短时间内读完C和C++的书呢？**\n简单总结就是：\n1. 不求甚解\n2. 自以为是\n3. 换位思考\n\n这个总结太简洁了，所以下面还是展开来说。\n\n### 不求甚解\n\n这个应该很好懂。因为C语言的教科书实在是晦涩难懂，这其中犹以某些国内教材为甚。相比之下，国外教材更加通俗易懂，深入浅出。但是老外的思维方式和观念和我们不太一样。\n说直白点就是人家的思维更加现代化，虽然没吃过猪肉，但是见过猪跑。这时候人家再来学吃猪肉，就知道哪个是前腿子肉，哪个是后腿子肉了不是。\n\n那么到底啥是不求甚解？现阶段我能说的就是，这个C语言也是一门语言，和英语汉语没有什么根本的不一样，没有那么多为什么，不要问那么多为什么。都是极少数语言天才和一群优秀的语言大师约定俗成的。\n\n### 自以为是\n\n这个本来是个贬义词。但我用来表达一个概念就是，C语言里面有些 **数据结构** 和 **算法**，有点抽象。\n抽象最考验人的智商了对不。\n所以这个时候就需要自以为是了。是不是真的你想的那样其实不重要，重要的是你根据书中的描述或者别人的正确的描述，在你自己的脑海中自以为是起来。\n\n### 换位思考\n前面说C语言也是一门语言，语言是用来交流的，只不过C语言是人与计算机交流，普通语言是人与人之间交流。注意，**我说的是人与计算机交流，而不是计算机与计算机交流。**这个概念我认为很重要。因为只有这样，**对人来说，C语言才具有它的可读性。**\n**可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性**\n重要的事情可不能只是说三遍。\n可读性是对人这一方面强调的。这个有点像你自己说的话除了让别人能听懂以外，你自己也得能听懂吧。\n那计算机呢？\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n**众所周知，计算机处理的只是0和1。**\n重要的事情还是得多说几遍。\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n**计算机的世界就是0和1的世界。**\n前辈们在0和1的基础上设计了很多相对而言简单易懂易用的概念，这个是必须要了解的（深刻理解就有点强人所难了）。注意这里说的是相对而言。\n所以你要换位思考，计算机的思维方式是怎样的。\n计算机的时间很单纯，没有人间那么多的弯弯绕绕。**对就是对，错就是错，没有模糊选项，只有可选项。**\n\n# Begin and End\n\n前面的About都是一大堆写给自己看的废话。\n现在正式开始吧。\n我列个学习计划提纲大概如下：\n\n## BEGIN\n\n0、学习使用搜索引擎。\n你一定注意到了，这个序号是0。你一定在想为什么，哈哈。这是极有趣的一个预演。\n因为在编程的世界，表示第一个的序号不是1，而是0。\n关于搜索引擎，这个非常非常重要。\n建议使用Google。鉴于国内Google被墙，可以考虑翻墙，或者使用国内某些网站提供的谷歌镜像。（这里肯定有你听不懂的，是时候使用搜索引擎了）\n这里推荐两个提供镜像的网址：（很稳定）\n<www.lesou.us>      <wwww.so.chongbuluo.com>\n除了Google之外，必应也还不错。必应的网址是:<www.bing.com>。微软出品。\n除了必应以外，百度吧。你不知道，百度一下。\n除了百度以外，还是算了吧。\n搜索引擎的使用也有一定的方法，在知乎上看到过很好的回答。这里就不赘述了（反正说得也没人家好）。\n关于搜索引擎能干嘛，重要性有多大。我就不吹牛逼了。\n因为我吹得再大也没有实际的大。\n\n1、提前熟悉计算机、编程方面的常用词语、术语、概念、说法。\n免得后面像刘姥姥进了大观园一样一脸傻逼样。\n熟悉的方法没别的，去网上的跟C语言、编程、计算机、科技、通信有关的网站、论坛、贴吧之类的，随便逛逛，一定能找到很多不熟悉的说法，然后百度一下。在之后的学习中也是一样的，看到某个说法觉得陌生，就百度一下。\n噢，**这个包括相应的英文版本，并且以英文说法为主要参考。**\n\n2、搭建开发环境。\n注意了啊，我已经开始使用这方面的用语了。所谓搭建开发环境呢，用你能理解的说法就是**在你的电脑（Computer)的操作系统(Operating System)上安装微软公司（Microsoft Corporation)的VC6.0。这个软件貌似在微软官网不太能找到了，现实生产环境中也没人用，但是没关系。中国的教育阵线力量是很强大的，考试用的是这个软件，网上一搜就有一大把，还附带安装说明。\n\n搭建之后熟悉这个软件的菜单位置、基本操作。\n\n3、准备入门书籍。\n当然大部分学习还是要靠现成的教材的。对初学者来说，一本书就已经够了。但是我的入门教材就是学校的教科书，还是特别老又没有名气的那种。所以也不知道哪本最好。不过很有名气的有两本，国内一个是**谭浩强的C语言（这个好像还有视频可以在网上下载到）**，国外一个是那本最经典的啥啥啥，名字忘了但是就是两个**C语言创始人之一编写的那本**。国外还有一个专业的计算机类书籍出版社叫O'Reily，凡是这个出版社的书籍，基本上可以说是世界上最顶尖的水平，这个水平包括了很强的可读性、权威性、正确性。**（国内很多教材都是敷衍了事出版的，而且作者在写书方面能力匮乏，错误很多，又不好懂）**\n怎么准备呢？\n使用搜索引擎下载电子档（一般来说就是pdf格式的）；书店买书；图书馆借书；同学借书。（如果有教材的话，一本教材就够了）\n另外推荐一个小甲鱼C语言教学视频。这个讲师讲得还算有趣，可以试着看几集，看自己是否有兴趣。\n哦，忘了一本书了，叫嗨翻C语言，老外写的。听名字就知道了，图文并茂，有声有色。这本我只翻过，没有看过，但是应该还行。如果有在图书馆看到这本书，可以试试。\n\n4、一边看示例程序，一边看书。\n这里我想表达的重点在这里。\n我最中意的方法就是，带有特定目的（最经典的例如从1加到100）的一段小程序，争取读懂。而且是要没看过书的也要争取读懂。\n因为前面说过，C语言本身就强调可读性。\n**我会挑选一些程序，详细注释，穿插所涉及的知识点，以供阅读学习。即便没有预习过教材中的有关知识点也没关系。**\n**并且我会强调二级考试的重点。**\n\n5、看二级考试的参考书。\n这个书没别的，就一本。专为考试而生。考前借来看看就行了。\n如果前面第5步做得不错的话，这一步可以省略，或者敷衍了事。\n注意我说的是前面的第5步，其实序号是4。\n因为这一部分只占到了考试的10%，又全都是选择题。而且在前面的学习中，已经可以掌握一部分这方面的内容。 \n\n6、'\\0'\nC语言中字符串的结束符是这个。\n\n\n## 提问\n\n第一步，向自己提问；\n第二步，向教科书提问；\n第三步，向搜索引擎提问；\n第四步，向周围的人提问，比如我。\n\n提问要明确自己到底要知道要搞懂的是什么。\n提问要注意方式方法，遇到什么情况，要说清楚说详细说具体，而且要挑重点挑关键点强调，这样才方便别人解答。\n举个例子，比较常见的令初学者头疼的就是那个VC6.0报错。提问至少需要提供两方面内容，一个是源代码，一个是报错内容。\n\n## END\n\n这篇文章大概有两个用处，一个是给我本人自己回顾历史，一个是给要准备二级C语言考试的人消遣。\n文章中很多没有说明白的，很多说漏的，很多说错的，这在所难免。有些也是我故意略去的，比如学习编程需要很好的英文阅读水平。这点没有强调是因为我觉得对于二级C语言考试来说，这个完全可以忽略。\n但是有些对二级考试不重要的我又挑出来说了，是因为我觉得这些很重要，在任何场景下。比如使用搜索引擎。\n老的程序员有个说法，以前说\n>程序 = 数据结构 + 算法\n现在是\n>程序 = 搜索引擎 + 英语\n\n这篇文章通篇说得太泛。这不要紧，说具体不是本文的目的。后面我会继续写具体。当然是在另外一些文章里面了，但是同样是发表在这个网站。\n由于这个网站对文章的管理方式，我决定之后的文章都采用这样的命名方式：\n\n```c:n\n// SetTie.cpp\n/* 给文章设置一个统一规范的标题。*/\n\n/* 这个示例程序基本包含了C语言的精华。对正准备入门但还没迈开脚的人来说，读不懂是正常的。但是呢，记得运用前面是三个方法：不求甚解自以为是换位思考。 */\n\n/* 哎呀忘了介绍了，这个/* 和 * /是写注释的地方，\n在这两个符号里面随便写啥都行。我把后面那个中间加了个空格，因为如果不加的话，这个注释就Over了这不是我想看到的。*/\n\n// 这个//嘛，也是写注释的地方，但是呢，只能在这一行里面写。\n\n#include<stdio.h>   \n// 包含头文件，以使用头文件中的内容。以.h作为文件后缀名。stdio.h是标准(std=standard)输入输出(io=input,output)头文件。\n\n#define ARTICLES 20\n // 宏定义。对于某些固定的常量，比如我要写的文章总数20，我用一个ARTICLE表示。就是“定义ARTICLE为20”\n#define STR_LEN 100\n //和上面一样，这次定义的是一个字符串长度\n \nint SetTitle();\n// 函数声明，这里可以不写函数主体。这个函数比较复杂，我也不会写。所以就是简单表示一下含义。\n\nint main()// main()是固定的，是整个程序的entry入口。\n{\n    int i = 0;\n    // 定义一个整型变量（就是整数）i，并赋值(assign)为0。i这个字母通常用来做循环计数，第一次循环，第二次循环……\n    \n    // 循环头。for后面的括号里面，第一个i=0是初始条件，第二个i<ARTICLE是循环终止判断条件，不满足这个条件的时候循环终止；第三个i++是每次循环的后面都要执行的一个操作，一般就是i++这样的，表示循环次数+1。\n    for(i=0;l++;i<ARTICLES)\n    SetTitle(\"C语言入门奇葩说-%d\",i);\n    //这行代码按标准需要用一个大括号括起来，但是因为只有一行，大括号可以省略。这里是调用了前面声明的那个函数。将我的文章标题设置为《C语言奇葩说-0》、《C语言奇葩说-1》、《C语言奇葩说-2》……\n    \n    char string[STR_LEN] = \"上面那个SetTitle()函数啊，有点像我这个printf()函数呢\";    \n    \n    printf(\"%s\",string);//这个函数是初学阶段最重要最常用的一个函数，没有之一。作用就是打印（print,是打印显示到输出设备比如屏幕上的）。\n    \n    \n    return 0;\n    //有没有发现函数名字前面都有一个单词，main()前面是int，就要返回一个int整型数。一般来说，程序正常结束的话就返回一个0，异常就返回-1。\n}//~the end of main()\nint SetTitle()//一般来说，这一行就和前面那个声明一模一样，直接复制粘贴就行了\n{\n    ...//这个函数我是真的不知道怎么写\n}//~the end of SetTile()\n//~the end of SetTitle.cpp\n```","slug":"C语言入门奇葩说-0","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89s0006c4xk7n3criq1","content":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><p>！！！<strong>这个部分略过也没有大碍的。可以直接从关于读书开始看起。</strong>！！！</p>\n<p>有个小伙伴加电脑白痴说要考二级，问我要不要报培训班。我听了当然觉得很愚蠢。如果我没有考过C语言的二级，我或许不敢发表什么定性的评价。<br>可是我是考过计算机等级考试二级C语言的男人啊。<br>当然没必要报啥培训班了。我当时就想说，C语言啊，还不如我来教呢。<br>我当然不是什么大神，离大神大概有银河系的思念的距离吧。</p>\n<p>但是既然有这个想法，肯定是有我的考虑的。<br>第一个，也是最重要的原因，最近在读一本C语言的书，赵岩的《C语言点滴》。这本书可以说很大程度上改变了我对C语言教材、参考书的刻板看法。<br>因为这本书实在是太有趣了。具体介绍这里就不展开了。<br>所以这本书也就激励我，用这本书的思维，去述说C语言，让一个完全没有概念的小白理解C语言。<br>因为，白居易说得好啊。<br>白居易说了啥我也不知道。我只知道白居易的诗有个很大很大的特点。</p>\n<p>另外吧，从去年年底开始接触的一些东西，基本上都是用的C/C++。自然还要接触很多，更加需要温习、深入。<br>而且老师当时就说了，你们应该把这些个项目的工作原理跟你们父母讲得明白，那才是真的明白了。</p>\n<p>还有吧，感慨自己学C语言时间太短，未能及时领悟它的博大精深，又走了许多弯路。主要也是因为自己当初缺乏指导。</p>\n<p><strong>下面简单说下我当初的入门之旅吧。</strong> 也算是我写给自己的一个回顾吧。</p>\n<h2 id=\"计算机背景知识\"><a href=\"#计算机背景知识\" class=\"headerlink\" title=\"计算机背景知识\"></a>计算机背景知识</h2><p>首先当然要介绍这个，可以说这个是必要的先修知识。毕竟C语言可是跑在计算机（包括许多你不认为是计算机的小小的计算机）上的。<br>小学一年级的拼音学得很好。<br>大概四年级的时候把小学阶段的字都差不多认全了。<br>小学五年级开始上网。网吧。单机游戏。侠盗飞车，CS，暴力摩托。QQ加陌生人好友聊天。（这时候拼音学的好就派上用场了）这时候好像学校也开了电脑课，好像就是老师在上面讲些最基础的知识和PPT,WORD这样的基本操作，我印象最深刻的就是看到老师用五笔打字，按了四个键就出来一大串字，觉得好牛啊。后来自己操作的时候就去做PPT（其实就是创建一个PPT文件然后写个标题画个图，反正不懂随便点点）。<br>六年级开始逛门户网站。那时候热爱军事，战斗机。<br>大概就是小学毕业那会嚷嚷着想买个游戏机。家里人不肯。后来折衷买了个学习机。其实就是带键盘的游戏机。<br>那时候我老姐差不多上大学了。她让我去练打字，学五笔。<br>花了一个月把五笔学会了。当时我真的挺佩服自己的，因为五笔字根口诀并不会背，只是跟着打字软件学习，但是大部分字都能打得出来。以及后来我不会什么方法却学会了拧魔方差不多一个道理，我用的是模糊记忆法。（其实平常读书也都是这样浑浑噩噩）<br>初中电脑课我就一直玩金山打字那个警察追小偷，不断刷新纪录。<br>初二的时候老姐把不要的电脑给我了。我玩了一个暑假的游戏，各种小游戏、单机游戏玩了个遍差不多（因为家里从来没有网）。暑假快结束的时候发现一个超好玩的篮球游戏。<br>然后我的整个初三就在玩这一个游戏。在学校住宿，晚上请假回来玩游戏。有时候还通宵（我的人生第一个通宵啊）。通宵怕老妈知道我在玩电脑，就把电脑放在被窝里面玩，好热啊，电脑温度太高，然后就崩了几回。我只记得一次是我拿去修的，重装系统。当时电脑店里面那个口吃问我装win7还是xp，我问有什么区别，他说win7是新出的系统，xp要稳定些，我说那xp吧。看他一点也不熟练地给我装系统，满屏幕全他妈是我看不懂的英文，我好佩服这个口吃（好像还有点瘸）。他要价30块。我借口说没带那么多，给了26，他也收了。<br>然后顺理成章的成绩直线下降，对学习也越来越没有兴趣。那时候顺便还用酷狗播放器制作歌词，改编歌词放进去，然后拷贝到电子词典里面放歌看歌词，好不快活。<br>高中继续玩那个游戏。不过一中离家太远了，我又不能把笔记本带学校去。去网吧也基本上去的是高中旁边的学校。<br>初三之后就再也没有练过打字了，后面所有对电脑的接触就是上网，看新闻，打游戏。<br>大一说不让带电脑。一开始也没敢带。国庆时候回去把电脑带来了，还是打那个游戏。打了这么多年都不会腻，我觉得这一定是真爱。<br>高二暑假买了个智能手机，高三玩手机比较多，毕竟那时候老班对手机比较宽容。高二开始看美剧，第一部就是《越狱》，无法自拔。高三为了练听力，看《生活大爆炸》。<br>忘了说一点，大学之前的网吧上网经历，我因为有一台不能联网的笔记本，和一个可以放音乐的电子词典，和一个手机，所以我每次都带了U盘，去下载视频啊音乐啊小说啊之类的东西。所以这个经历也成为了我的一个习惯。现在看来还是不错的经历。因为那时候就把很多下载网站摸得还算比较熟了。像国内大部分下载站，都有无数的广告诱惑你去下载，我那时候上了无数的当，自然就摸得很清楚了。但是由于英语水平有限，对国外的网站基本从未接触过。<br>大一继续打游戏看美剧。大一上那段时间，一有时间在寝室里面呆着我就看美剧。<br>快期末的时候电脑挂了。拿去检查说可能是主板坏了，要修的话划不来，毕竟是这么老旧的电脑了。幸好在期末之前一段时间挂了，我有时间复习，所以那次期末考也是目前为止大学考得最好的……<br>大一寒假的时候，研究生班主任在班群里面说，下学期要学C语言了啊，然后发了一个PDF，让我们看看。我好奇地打开看了下，<strong>一脸大写的萌逼啊有木有</strong>。所以后来我特别能体会新手的痛苦。<br>我大概看了那本书的第一章，看完之后完全不知道这是在说啥。所以就没看了。<br>大一下开学后不久我买了电脑。对电脑完全不懂啊，我姐也不太懂。问同学买了啥，那给我来个同款吧。</p>\n<h2 id=\"学校开的C语言课\"><a href=\"#学校开的C语言课\" class=\"headerlink\" title=\"学校开的C语言课\"></a>学校开的C语言课</h2><p>开始上C语言课了。我住东边，上课在西边。我又是<strong>一脸大写的萌逼</strong>啊。老师鼓励带电脑上课，我特么不难背么。一台笔记本也有几公斤啊。<br>第一次C语言上机课很快就开始了。我拿了还没翻过的教科书去上课。按照老师指示的，打开VC6.0,新建一个cpp文件，往编辑框里面写代码。——我当然不会写什么代码，我照着书的例子敲的。然后照指示保存，再按一个键（这个键的功能就是编译+运行，这个之后再说），妈蛋结果不通过，报了好多error。我当时就怒了，<strong>辛辛苦苦照着教科书打字那么久，结果却不能运行！！！</strong><br>当时隔壁坐了个编程大神。大一认识的时候他说他高中就参加过编程比赛拿过奖，一来就说准备转计算机学院的。我问他这个程序咋不能运行啊。他看了一下，帮我又编辑（其实没有修改一个字符，全都是排列组合的操作）了一番，然后就运行成功了。<br>我当时就佩服得五体投地。<br>这也让我开始不迷信书籍。<br>事实证明，<strong>所有的示例代码都是有一定的前提假设才是正确的</strong> <strong>所有的示例代码都是有一定的前提假设才是正确的</strong>  <strong>所有的示例代码都是有一定的前提假设才是正确的</strong><br>自此发奋学习C语言。<br>第一件事当然就是回到自己的电脑上把VC6.0给装了。这个应该来说是很多人学习C语言的第一步，但是却难倒了很多人。<br><strong>因为VC6.0是一款很老的软件，在当前主流的操作系统win7,win8.1（那时候win10还没正式出来）里面不能不经修改地正常运行。</strong><br>这是一个兼容性问题。但是网上的解决办法也很多。因为有之前在网吧搜资源下载的经历，我肯定直接百度，百度经验第一篇就成功帮我解决了这个问题。VC6.0顺利地跑在了我的win8.1上。</p>\n<p>然后就是看书，但是因为前车之鉴，我并没有把书上的代码敲一遍跑一下试试。<br>不过我花了两周时间（上课也看）把教科书的前面大部分看完了。这之后老师开始每周布置编程题作业。我其实也并不会做那些题目。代码都是靠百度。<br>不过能顺利把作业交了不就好了么。当时很多人连百度都没用上，直接把别人的作业改个名字就交了。<br>大概又过了两三周，把教科书看完了。<br>之后就没学了。平常作业就是百度一下，然后缝缝补补。<br>这时听了个讲座，有个学长说他一个寒假自学了C++，觉得C++真的好有用。我学了C还没觉得C多有用，所以这时候我就跑去学习C++。当时也是机缘巧合，正好混了个工作室，在工作室里面玩的时候看到里面有一本C++的大部头书，老外写的，中国人翻译的。就借来看。大概看了个把月，把大部分看完了。又过了快一个月，全部看完了。这回我把书上的示例代码都敲过一遍。有的可以运行，也有的有点问题。但是我都没管。把书看完了就行了。<br>前面没有说的一点就是，我上过四次C语言课之后，大家都觉得老师讲得太水了，就不去上课了。上机课也太水了，其实是让我们做编程作业的。但是大家都是百度，去机房和在宿舍没啥区别，所以后来也就不去上机了。</p>\n<h2 id=\"关于读书\"><a href=\"#关于读书\" class=\"headerlink\" title=\"关于读书\"></a>关于读书</h2><p><strong>那么我是怎么在短时间内读完C和C++的书呢？</strong><br>简单总结就是：</p>\n<ol>\n<li>不求甚解</li>\n<li>自以为是</li>\n<li>换位思考</li>\n</ol>\n<p>这个总结太简洁了，所以下面还是展开来说。</p>\n<h3 id=\"不求甚解\"><a href=\"#不求甚解\" class=\"headerlink\" title=\"不求甚解\"></a>不求甚解</h3><p>这个应该很好懂。因为C语言的教科书实在是晦涩难懂，这其中犹以某些国内教材为甚。相比之下，国外教材更加通俗易懂，深入浅出。但是老外的思维方式和观念和我们不太一样。<br>说直白点就是人家的思维更加现代化，虽然没吃过猪肉，但是见过猪跑。这时候人家再来学吃猪肉，就知道哪个是前腿子肉，哪个是后腿子肉了不是。</p>\n<p>那么到底啥是不求甚解？现阶段我能说的就是，这个C语言也是一门语言，和英语汉语没有什么根本的不一样，没有那么多为什么，不要问那么多为什么。都是极少数语言天才和一群优秀的语言大师约定俗成的。</p>\n<h3 id=\"自以为是\"><a href=\"#自以为是\" class=\"headerlink\" title=\"自以为是\"></a>自以为是</h3><p>这个本来是个贬义词。但我用来表达一个概念就是，C语言里面有些 <strong>数据结构</strong> 和 <strong>算法</strong>，有点抽象。<br>抽象最考验人的智商了对不。<br>所以这个时候就需要自以为是了。是不是真的你想的那样其实不重要，重要的是你根据书中的描述或者别人的正确的描述，在你自己的脑海中自以为是起来。</p>\n<h3 id=\"换位思考\"><a href=\"#换位思考\" class=\"headerlink\" title=\"换位思考\"></a>换位思考</h3><p>前面说C语言也是一门语言，语言是用来交流的，只不过C语言是人与计算机交流，普通语言是人与人之间交流。注意，<strong>我说的是人与计算机交流，而不是计算机与计算机交流。</strong>这个概念我认为很重要。因为只有这样，<strong>对人来说，C语言才具有它的可读性。</strong><br><strong>可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性</strong><br>重要的事情可不能只是说三遍。<br>可读性是对人这一方面强调的。这个有点像你自己说的话除了让别人能听懂以外，你自己也得能听懂吧。<br>那计算机呢？<br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br>重要的事情还是得多说几遍。<br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br>前辈们在0和1的基础上设计了很多相对而言简单易懂易用的概念，这个是必须要了解的（深刻理解就有点强人所难了）。注意这里说的是相对而言。<br>所以你要换位思考，计算机的思维方式是怎样的。<br>计算机的时间很单纯，没有人间那么多的弯弯绕绕。<strong>对就是对，错就是错，没有模糊选项，只有可选项。</strong></p>\n<h1 id=\"Begin-and-End\"><a href=\"#Begin-and-End\" class=\"headerlink\" title=\"Begin and End\"></a>Begin and End</h1><p>前面的About都是一大堆写给自己看的废话。<br>现在正式开始吧。<br>我列个学习计划提纲大概如下：</p>\n<h2 id=\"BEGIN\"><a href=\"#BEGIN\" class=\"headerlink\" title=\"BEGIN\"></a>BEGIN</h2><p>0、学习使用搜索引擎。<br>你一定注意到了，这个序号是0。你一定在想为什么，哈哈。这是极有趣的一个预演。<br>因为在编程的世界，表示第一个的序号不是1，而是0。<br>关于搜索引擎，这个非常非常重要。<br>建议使用Google。鉴于国内Google被墙，可以考虑翻墙，或者使用国内某些网站提供的谷歌镜像。（这里肯定有你听不懂的，是时候使用搜索引擎了）<br>这里推荐两个提供镜像的网址：（很稳定）</p>\n<p>&lt;<a href=\"http://www.lesou.us&gt;\" target=\"_blank\" rel=\"noopener\">www.lesou.us&gt;</a>      &lt;w<a href=\"http://www.so.chongbuluo.com&gt;\" target=\"_blank\" rel=\"noopener\">www.so.chongbuluo.com&gt;</a><br>除了Google之外，必应也还不错。必应的网址是:&lt;<a href=\"http://www.bing.com&gt;。微软出品。\" target=\"_blank\" rel=\"noopener\">www.bing.com&gt;。微软出品。</a><br>除了必应以外，百度吧。你不知道，百度一下。<br>除了百度以外，还是算了吧。<br>搜索引擎的使用也有一定的方法，在知乎上看到过很好的回答。这里就不赘述了（反正说得也没人家好）。<br>关于搜索引擎能干嘛，重要性有多大。我就不吹牛逼了。<br>因为我吹得再大也没有实际的大。</p>\n<p>1、提前熟悉计算机、编程方面的常用词语、术语、概念、说法。<br>免得后面像刘姥姥进了大观园一样一脸傻逼样。<br>熟悉的方法没别的，去网上的跟C语言、编程、计算机、科技、通信有关的网站、论坛、贴吧之类的，随便逛逛，一定能找到很多不熟悉的说法，然后百度一下。在之后的学习中也是一样的，看到某个说法觉得陌生，就百度一下。<br>噢，<strong>这个包括相应的英文版本，并且以英文说法为主要参考。</strong></p>\n<p>2、搭建开发环境。<br>注意了啊，我已经开始使用这方面的用语了。所谓搭建开发环境呢，用你能理解的说法就是**在你的电脑（Computer)的操作系统(Operating System)上安装微软公司（Microsoft Corporation)的VC6.0。这个软件貌似在微软官网不太能找到了，现实生产环境中也没人用，但是没关系。中国的教育阵线力量是很强大的，考试用的是这个软件，网上一搜就有一大把，还附带安装说明。</p>\n<p>搭建之后熟悉这个软件的菜单位置、基本操作。</p>\n<p>3、准备入门书籍。<br>当然大部分学习还是要靠现成的教材的。对初学者来说，一本书就已经够了。但是我的入门教材就是学校的教科书，还是特别老又没有名气的那种。所以也不知道哪本最好。不过很有名气的有两本，国内一个是<strong>谭浩强的C语言（这个好像还有视频可以在网上下载到）</strong>，国外一个是那本最经典的啥啥啥，名字忘了但是就是两个<strong>C语言创始人之一编写的那本</strong>。国外还有一个专业的计算机类书籍出版社叫O’Reily，凡是这个出版社的书籍，基本上可以说是世界上最顶尖的水平，这个水平包括了很强的可读性、权威性、正确性。<strong>（国内很多教材都是敷衍了事出版的，而且作者在写书方面能力匮乏，错误很多，又不好懂）</strong><br>怎么准备呢？<br>使用搜索引擎下载电子档（一般来说就是pdf格式的）；书店买书；图书馆借书；同学借书。（如果有教材的话，一本教材就够了）<br>另外推荐一个小甲鱼C语言教学视频。这个讲师讲得还算有趣，可以试着看几集，看自己是否有兴趣。<br>哦，忘了一本书了，叫嗨翻C语言，老外写的。听名字就知道了，图文并茂，有声有色。这本我只翻过，没有看过，但是应该还行。如果有在图书馆看到这本书，可以试试。</p>\n<p>4、一边看示例程序，一边看书。<br>这里我想表达的重点在这里。<br>我最中意的方法就是，带有特定目的（最经典的例如从1加到100）的一段小程序，争取读懂。而且是要没看过书的也要争取读懂。<br>因为前面说过，C语言本身就强调可读性。<br><strong>我会挑选一些程序，详细注释，穿插所涉及的知识点，以供阅读学习。即便没有预习过教材中的有关知识点也没关系。</strong><br><strong>并且我会强调二级考试的重点。</strong></p>\n<p>5、看二级考试的参考书。<br>这个书没别的，就一本。专为考试而生。考前借来看看就行了。<br>如果前面第5步做得不错的话，这一步可以省略，或者敷衍了事。<br>注意我说的是前面的第5步，其实序号是4。<br>因为这一部分只占到了考试的10%，又全都是选择题。而且在前面的学习中，已经可以掌握一部分这方面的内容。 </p>\n<p>6、’\\0’<br>C语言中字符串的结束符是这个。</p>\n<h2 id=\"提问\"><a href=\"#提问\" class=\"headerlink\" title=\"提问\"></a>提问</h2><p>第一步，向自己提问；<br>第二步，向教科书提问；<br>第三步，向搜索引擎提问；<br>第四步，向周围的人提问，比如我。</p>\n<p>提问要明确自己到底要知道要搞懂的是什么。<br>提问要注意方式方法，遇到什么情况，要说清楚说详细说具体，而且要挑重点挑关键点强调，这样才方便别人解答。<br>举个例子，比较常见的令初学者头疼的就是那个VC6.0报错。提问至少需要提供两方面内容，一个是源代码，一个是报错内容。</p>\n<h2 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h2><p>这篇文章大概有两个用处，一个是给我本人自己回顾历史，一个是给要准备二级C语言考试的人消遣。<br>文章中很多没有说明白的，很多说漏的，很多说错的，这在所难免。有些也是我故意略去的，比如学习编程需要很好的英文阅读水平。这点没有强调是因为我觉得对于二级C语言考试来说，这个完全可以忽略。<br>但是有些对二级考试不重要的我又挑出来说了，是因为我觉得这些很重要，在任何场景下。比如使用搜索引擎。<br>老的程序员有个说法，以前说</p>\n<blockquote>\n<p>程序 = 数据结构 + 算法<br>现在是<br>程序 = 搜索引擎 + 英语</p>\n</blockquote>\n<p>这篇文章通篇说得太泛。这不要紧，说具体不是本文的目的。后面我会继续写具体。当然是在另外一些文章里面了，但是同样是发表在这个网站。<br>由于这个网站对文章的管理方式，我决定之后的文章都采用这样的命名方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetTie.cpp</span><br><span class=\"line\">/* 给文章设置一个统一规范的标题。*/</span><br><span class=\"line\"></span><br><span class=\"line\">/* 这个示例程序基本包含了C语言的精华。对正准备入门但还没迈开脚的人来说，读不懂是正常的。但是呢，记得运用前面是三个方法：不求甚解自以为是换位思考。 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 哎呀忘了介绍了，这个/* 和 * /是写注释的地方，</span><br><span class=\"line\">在这两个符号里面随便写啥都行。我把后面那个中间加了个空格，因为如果不加的话，这个注释就Over了这不是我想看到的。*/</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个//嘛，也是写注释的地方，但是呢，只能在这一行里面写。</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;   </span><br><span class=\"line\">// 包含头文件，以使用头文件中的内容。以.h作为文件后缀名。stdio.h是标准(std=standard)输入输出(io=input,output)头文件。</span><br><span class=\"line\"></span><br><span class=\"line\">#define ARTICLES 20</span><br><span class=\"line\"> // 宏定义。对于某些固定的常量，比如我要写的文章总数20，我用一个ARTICLE表示。就是“定义ARTICLE为20”</span><br><span class=\"line\">#define STR_LEN 100</span><br><span class=\"line\"> //和上面一样，这次定义的是一个字符串长度</span><br><span class=\"line\"> </span><br><span class=\"line\">int SetTitle();</span><br><span class=\"line\">// 函数声明，这里可以不写函数主体。这个函数比较复杂，我也不会写。所以就是简单表示一下含义。</span><br><span class=\"line\"></span><br><span class=\"line\">int main()// main()是固定的，是整个程序的entry入口。</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    // 定义一个整型变量（就是整数）i，并赋值(assign)为0。i这个字母通常用来做循环计数，第一次循环，第二次循环……</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 循环头。for后面的括号里面，第一个i=0是初始条件，第二个i&lt;ARTICLE是循环终止判断条件，不满足这个条件的时候循环终止；第三个i++是每次循环的后面都要执行的一个操作，一般就是i++这样的，表示循环次数+1。</span><br><span class=\"line\">    for(i=0;l++;i&lt;ARTICLES)</span><br><span class=\"line\">    SetTitle(&quot;C语言入门奇葩说-%d&quot;,i);</span><br><span class=\"line\">    //这行代码按标准需要用一个大括号括起来，但是因为只有一行，大括号可以省略。这里是调用了前面声明的那个函数。将我的文章标题设置为《C语言奇葩说-0》、《C语言奇葩说-1》、《C语言奇葩说-2》……</span><br><span class=\"line\">    </span><br><span class=\"line\">    char string[STR_LEN] = &quot;上面那个SetTitle()函数啊，有点像我这个printf()函数呢&quot;;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;%s&quot;,string);//这个函数是初学阶段最重要最常用的一个函数，没有之一。作用就是打印（print,是打印显示到输出设备比如屏幕上的）。</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">    //有没有发现函数名字前面都有一个单词，main()前面是int，就要返回一个int整型数。一般来说，程序正常结束的话就返回一个0，异常就返回-1。</span><br><span class=\"line\">&#125;//~the end of main()</span><br><span class=\"line\">int SetTitle()//一般来说，这一行就和前面那个声明一模一样，直接复制粘贴就行了</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...//这个函数我是真的不知道怎么写</span><br><span class=\"line\">&#125;//~the end of SetTile()</span><br><span class=\"line\">//~the end of SetTitle.cpp</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><p>！！！<strong>这个部分略过也没有大碍的。可以直接从关于读书开始看起。</strong>！！！</p>\n<p>有个小伙伴加电脑白痴说要考二级，问我要不要报培训班。我听了当然觉得很愚蠢。如果我没有考过C语言的二级，我或许不敢发表什么定性的评价。<br>可是我是考过计算机等级考试二级C语言的男人啊。<br>当然没必要报啥培训班了。我当时就想说，C语言啊，还不如我来教呢。<br>我当然不是什么大神，离大神大概有银河系的思念的距离吧。</p>\n<p>但是既然有这个想法，肯定是有我的考虑的。<br>第一个，也是最重要的原因，最近在读一本C语言的书，赵岩的《C语言点滴》。这本书可以说很大程度上改变了我对C语言教材、参考书的刻板看法。<br>因为这本书实在是太有趣了。具体介绍这里就不展开了。<br>所以这本书也就激励我，用这本书的思维，去述说C语言，让一个完全没有概念的小白理解C语言。<br>因为，白居易说得好啊。<br>白居易说了啥我也不知道。我只知道白居易的诗有个很大很大的特点。</p>\n<p>另外吧，从去年年底开始接触的一些东西，基本上都是用的C/C++。自然还要接触很多，更加需要温习、深入。<br>而且老师当时就说了，你们应该把这些个项目的工作原理跟你们父母讲得明白，那才是真的明白了。</p>\n<p>还有吧，感慨自己学C语言时间太短，未能及时领悟它的博大精深，又走了许多弯路。主要也是因为自己当初缺乏指导。</p>\n<p><strong>下面简单说下我当初的入门之旅吧。</strong> 也算是我写给自己的一个回顾吧。</p>\n<h2 id=\"计算机背景知识\"><a href=\"#计算机背景知识\" class=\"headerlink\" title=\"计算机背景知识\"></a>计算机背景知识</h2><p>首先当然要介绍这个，可以说这个是必要的先修知识。毕竟C语言可是跑在计算机（包括许多你不认为是计算机的小小的计算机）上的。<br>小学一年级的拼音学得很好。<br>大概四年级的时候把小学阶段的字都差不多认全了。<br>小学五年级开始上网。网吧。单机游戏。侠盗飞车，CS，暴力摩托。QQ加陌生人好友聊天。（这时候拼音学的好就派上用场了）这时候好像学校也开了电脑课，好像就是老师在上面讲些最基础的知识和PPT,WORD这样的基本操作，我印象最深刻的就是看到老师用五笔打字，按了四个键就出来一大串字，觉得好牛啊。后来自己操作的时候就去做PPT（其实就是创建一个PPT文件然后写个标题画个图，反正不懂随便点点）。<br>六年级开始逛门户网站。那时候热爱军事，战斗机。<br>大概就是小学毕业那会嚷嚷着想买个游戏机。家里人不肯。后来折衷买了个学习机。其实就是带键盘的游戏机。<br>那时候我老姐差不多上大学了。她让我去练打字，学五笔。<br>花了一个月把五笔学会了。当时我真的挺佩服自己的，因为五笔字根口诀并不会背，只是跟着打字软件学习，但是大部分字都能打得出来。以及后来我不会什么方法却学会了拧魔方差不多一个道理，我用的是模糊记忆法。（其实平常读书也都是这样浑浑噩噩）<br>初中电脑课我就一直玩金山打字那个警察追小偷，不断刷新纪录。<br>初二的时候老姐把不要的电脑给我了。我玩了一个暑假的游戏，各种小游戏、单机游戏玩了个遍差不多（因为家里从来没有网）。暑假快结束的时候发现一个超好玩的篮球游戏。<br>然后我的整个初三就在玩这一个游戏。在学校住宿，晚上请假回来玩游戏。有时候还通宵（我的人生第一个通宵啊）。通宵怕老妈知道我在玩电脑，就把电脑放在被窝里面玩，好热啊，电脑温度太高，然后就崩了几回。我只记得一次是我拿去修的，重装系统。当时电脑店里面那个口吃问我装win7还是xp，我问有什么区别，他说win7是新出的系统，xp要稳定些，我说那xp吧。看他一点也不熟练地给我装系统，满屏幕全他妈是我看不懂的英文，我好佩服这个口吃（好像还有点瘸）。他要价30块。我借口说没带那么多，给了26，他也收了。<br>然后顺理成章的成绩直线下降，对学习也越来越没有兴趣。那时候顺便还用酷狗播放器制作歌词，改编歌词放进去，然后拷贝到电子词典里面放歌看歌词，好不快活。<br>高中继续玩那个游戏。不过一中离家太远了，我又不能把笔记本带学校去。去网吧也基本上去的是高中旁边的学校。<br>初三之后就再也没有练过打字了，后面所有对电脑的接触就是上网，看新闻，打游戏。<br>大一说不让带电脑。一开始也没敢带。国庆时候回去把电脑带来了，还是打那个游戏。打了这么多年都不会腻，我觉得这一定是真爱。<br>高二暑假买了个智能手机，高三玩手机比较多，毕竟那时候老班对手机比较宽容。高二开始看美剧，第一部就是《越狱》，无法自拔。高三为了练听力，看《生活大爆炸》。<br>忘了说一点，大学之前的网吧上网经历，我因为有一台不能联网的笔记本，和一个可以放音乐的电子词典，和一个手机，所以我每次都带了U盘，去下载视频啊音乐啊小说啊之类的东西。所以这个经历也成为了我的一个习惯。现在看来还是不错的经历。因为那时候就把很多下载网站摸得还算比较熟了。像国内大部分下载站，都有无数的广告诱惑你去下载，我那时候上了无数的当，自然就摸得很清楚了。但是由于英语水平有限，对国外的网站基本从未接触过。<br>大一继续打游戏看美剧。大一上那段时间，一有时间在寝室里面呆着我就看美剧。<br>快期末的时候电脑挂了。拿去检查说可能是主板坏了，要修的话划不来，毕竟是这么老旧的电脑了。幸好在期末之前一段时间挂了，我有时间复习，所以那次期末考也是目前为止大学考得最好的……<br>大一寒假的时候，研究生班主任在班群里面说，下学期要学C语言了啊，然后发了一个PDF，让我们看看。我好奇地打开看了下，<strong>一脸大写的萌逼啊有木有</strong>。所以后来我特别能体会新手的痛苦。<br>我大概看了那本书的第一章，看完之后完全不知道这是在说啥。所以就没看了。<br>大一下开学后不久我买了电脑。对电脑完全不懂啊，我姐也不太懂。问同学买了啥，那给我来个同款吧。</p>\n<h2 id=\"学校开的C语言课\"><a href=\"#学校开的C语言课\" class=\"headerlink\" title=\"学校开的C语言课\"></a>学校开的C语言课</h2><p>开始上C语言课了。我住东边，上课在西边。我又是<strong>一脸大写的萌逼</strong>啊。老师鼓励带电脑上课，我特么不难背么。一台笔记本也有几公斤啊。<br>第一次C语言上机课很快就开始了。我拿了还没翻过的教科书去上课。按照老师指示的，打开VC6.0,新建一个cpp文件，往编辑框里面写代码。——我当然不会写什么代码，我照着书的例子敲的。然后照指示保存，再按一个键（这个键的功能就是编译+运行，这个之后再说），妈蛋结果不通过，报了好多error。我当时就怒了，<strong>辛辛苦苦照着教科书打字那么久，结果却不能运行！！！</strong><br>当时隔壁坐了个编程大神。大一认识的时候他说他高中就参加过编程比赛拿过奖，一来就说准备转计算机学院的。我问他这个程序咋不能运行啊。他看了一下，帮我又编辑（其实没有修改一个字符，全都是排列组合的操作）了一番，然后就运行成功了。<br>我当时就佩服得五体投地。<br>这也让我开始不迷信书籍。<br>事实证明，<strong>所有的示例代码都是有一定的前提假设才是正确的</strong> <strong>所有的示例代码都是有一定的前提假设才是正确的</strong>  <strong>所有的示例代码都是有一定的前提假设才是正确的</strong><br>自此发奋学习C语言。<br>第一件事当然就是回到自己的电脑上把VC6.0给装了。这个应该来说是很多人学习C语言的第一步，但是却难倒了很多人。<br><strong>因为VC6.0是一款很老的软件，在当前主流的操作系统win7,win8.1（那时候win10还没正式出来）里面不能不经修改地正常运行。</strong><br>这是一个兼容性问题。但是网上的解决办法也很多。因为有之前在网吧搜资源下载的经历，我肯定直接百度，百度经验第一篇就成功帮我解决了这个问题。VC6.0顺利地跑在了我的win8.1上。</p>\n<p>然后就是看书，但是因为前车之鉴，我并没有把书上的代码敲一遍跑一下试试。<br>不过我花了两周时间（上课也看）把教科书的前面大部分看完了。这之后老师开始每周布置编程题作业。我其实也并不会做那些题目。代码都是靠百度。<br>不过能顺利把作业交了不就好了么。当时很多人连百度都没用上，直接把别人的作业改个名字就交了。<br>大概又过了两三周，把教科书看完了。<br>之后就没学了。平常作业就是百度一下，然后缝缝补补。<br>这时听了个讲座，有个学长说他一个寒假自学了C++，觉得C++真的好有用。我学了C还没觉得C多有用，所以这时候我就跑去学习C++。当时也是机缘巧合，正好混了个工作室，在工作室里面玩的时候看到里面有一本C++的大部头书，老外写的，中国人翻译的。就借来看。大概看了个把月，把大部分看完了。又过了快一个月，全部看完了。这回我把书上的示例代码都敲过一遍。有的可以运行，也有的有点问题。但是我都没管。把书看完了就行了。<br>前面没有说的一点就是，我上过四次C语言课之后，大家都觉得老师讲得太水了，就不去上课了。上机课也太水了，其实是让我们做编程作业的。但是大家都是百度，去机房和在宿舍没啥区别，所以后来也就不去上机了。</p>\n<h2 id=\"关于读书\"><a href=\"#关于读书\" class=\"headerlink\" title=\"关于读书\"></a>关于读书</h2><p><strong>那么我是怎么在短时间内读完C和C++的书呢？</strong><br>简单总结就是：</p>\n<ol>\n<li>不求甚解</li>\n<li>自以为是</li>\n<li>换位思考</li>\n</ol>\n<p>这个总结太简洁了，所以下面还是展开来说。</p>\n<h3 id=\"不求甚解\"><a href=\"#不求甚解\" class=\"headerlink\" title=\"不求甚解\"></a>不求甚解</h3><p>这个应该很好懂。因为C语言的教科书实在是晦涩难懂，这其中犹以某些国内教材为甚。相比之下，国外教材更加通俗易懂，深入浅出。但是老外的思维方式和观念和我们不太一样。<br>说直白点就是人家的思维更加现代化，虽然没吃过猪肉，但是见过猪跑。这时候人家再来学吃猪肉，就知道哪个是前腿子肉，哪个是后腿子肉了不是。</p>\n<p>那么到底啥是不求甚解？现阶段我能说的就是，这个C语言也是一门语言，和英语汉语没有什么根本的不一样，没有那么多为什么，不要问那么多为什么。都是极少数语言天才和一群优秀的语言大师约定俗成的。</p>\n<h3 id=\"自以为是\"><a href=\"#自以为是\" class=\"headerlink\" title=\"自以为是\"></a>自以为是</h3><p>这个本来是个贬义词。但我用来表达一个概念就是，C语言里面有些 <strong>数据结构</strong> 和 <strong>算法</strong>，有点抽象。<br>抽象最考验人的智商了对不。<br>所以这个时候就需要自以为是了。是不是真的你想的那样其实不重要，重要的是你根据书中的描述或者别人的正确的描述，在你自己的脑海中自以为是起来。</p>\n<h3 id=\"换位思考\"><a href=\"#换位思考\" class=\"headerlink\" title=\"换位思考\"></a>换位思考</h3><p>前面说C语言也是一门语言，语言是用来交流的，只不过C语言是人与计算机交流，普通语言是人与人之间交流。注意，<strong>我说的是人与计算机交流，而不是计算机与计算机交流。</strong>这个概念我认为很重要。因为只有这样，<strong>对人来说，C语言才具有它的可读性。</strong><br><strong>可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性可读性</strong><br>重要的事情可不能只是说三遍。<br>可读性是对人这一方面强调的。这个有点像你自己说的话除了让别人能听懂以外，你自己也得能听懂吧。<br>那计算机呢？<br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br><strong>众所周知，计算机处理的只是0和1。</strong><br>重要的事情还是得多说几遍。<br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br><strong>计算机的世界就是0和1的世界。</strong><br>前辈们在0和1的基础上设计了很多相对而言简单易懂易用的概念，这个是必须要了解的（深刻理解就有点强人所难了）。注意这里说的是相对而言。<br>所以你要换位思考，计算机的思维方式是怎样的。<br>计算机的时间很单纯，没有人间那么多的弯弯绕绕。<strong>对就是对，错就是错，没有模糊选项，只有可选项。</strong></p>\n<h1 id=\"Begin-and-End\"><a href=\"#Begin-and-End\" class=\"headerlink\" title=\"Begin and End\"></a>Begin and End</h1><p>前面的About都是一大堆写给自己看的废话。<br>现在正式开始吧。<br>我列个学习计划提纲大概如下：</p>\n<h2 id=\"BEGIN\"><a href=\"#BEGIN\" class=\"headerlink\" title=\"BEGIN\"></a>BEGIN</h2><p>0、学习使用搜索引擎。<br>你一定注意到了，这个序号是0。你一定在想为什么，哈哈。这是极有趣的一个预演。<br>因为在编程的世界，表示第一个的序号不是1，而是0。<br>关于搜索引擎，这个非常非常重要。<br>建议使用Google。鉴于国内Google被墙，可以考虑翻墙，或者使用国内某些网站提供的谷歌镜像。（这里肯定有你听不懂的，是时候使用搜索引擎了）<br>这里推荐两个提供镜像的网址：（很稳定）</p>\n<p>&lt;<a href=\"http://www.lesou.us&gt;\" target=\"_blank\" rel=\"noopener\">www.lesou.us&gt;</a>      &lt;w<a href=\"http://www.so.chongbuluo.com&gt;\" target=\"_blank\" rel=\"noopener\">www.so.chongbuluo.com&gt;</a><br>除了Google之外，必应也还不错。必应的网址是:&lt;<a href=\"http://www.bing.com&gt;。微软出品。\" target=\"_blank\" rel=\"noopener\">www.bing.com&gt;。微软出品。</a><br>除了必应以外，百度吧。你不知道，百度一下。<br>除了百度以外，还是算了吧。<br>搜索引擎的使用也有一定的方法，在知乎上看到过很好的回答。这里就不赘述了（反正说得也没人家好）。<br>关于搜索引擎能干嘛，重要性有多大。我就不吹牛逼了。<br>因为我吹得再大也没有实际的大。</p>\n<p>1、提前熟悉计算机、编程方面的常用词语、术语、概念、说法。<br>免得后面像刘姥姥进了大观园一样一脸傻逼样。<br>熟悉的方法没别的，去网上的跟C语言、编程、计算机、科技、通信有关的网站、论坛、贴吧之类的，随便逛逛，一定能找到很多不熟悉的说法，然后百度一下。在之后的学习中也是一样的，看到某个说法觉得陌生，就百度一下。<br>噢，<strong>这个包括相应的英文版本，并且以英文说法为主要参考。</strong></p>\n<p>2、搭建开发环境。<br>注意了啊，我已经开始使用这方面的用语了。所谓搭建开发环境呢，用你能理解的说法就是**在你的电脑（Computer)的操作系统(Operating System)上安装微软公司（Microsoft Corporation)的VC6.0。这个软件貌似在微软官网不太能找到了，现实生产环境中也没人用，但是没关系。中国的教育阵线力量是很强大的，考试用的是这个软件，网上一搜就有一大把，还附带安装说明。</p>\n<p>搭建之后熟悉这个软件的菜单位置、基本操作。</p>\n<p>3、准备入门书籍。<br>当然大部分学习还是要靠现成的教材的。对初学者来说，一本书就已经够了。但是我的入门教材就是学校的教科书，还是特别老又没有名气的那种。所以也不知道哪本最好。不过很有名气的有两本，国内一个是<strong>谭浩强的C语言（这个好像还有视频可以在网上下载到）</strong>，国外一个是那本最经典的啥啥啥，名字忘了但是就是两个<strong>C语言创始人之一编写的那本</strong>。国外还有一个专业的计算机类书籍出版社叫O’Reily，凡是这个出版社的书籍，基本上可以说是世界上最顶尖的水平，这个水平包括了很强的可读性、权威性、正确性。<strong>（国内很多教材都是敷衍了事出版的，而且作者在写书方面能力匮乏，错误很多，又不好懂）</strong><br>怎么准备呢？<br>使用搜索引擎下载电子档（一般来说就是pdf格式的）；书店买书；图书馆借书；同学借书。（如果有教材的话，一本教材就够了）<br>另外推荐一个小甲鱼C语言教学视频。这个讲师讲得还算有趣，可以试着看几集，看自己是否有兴趣。<br>哦，忘了一本书了，叫嗨翻C语言，老外写的。听名字就知道了，图文并茂，有声有色。这本我只翻过，没有看过，但是应该还行。如果有在图书馆看到这本书，可以试试。</p>\n<p>4、一边看示例程序，一边看书。<br>这里我想表达的重点在这里。<br>我最中意的方法就是，带有特定目的（最经典的例如从1加到100）的一段小程序，争取读懂。而且是要没看过书的也要争取读懂。<br>因为前面说过，C语言本身就强调可读性。<br><strong>我会挑选一些程序，详细注释，穿插所涉及的知识点，以供阅读学习。即便没有预习过教材中的有关知识点也没关系。</strong><br><strong>并且我会强调二级考试的重点。</strong></p>\n<p>5、看二级考试的参考书。<br>这个书没别的，就一本。专为考试而生。考前借来看看就行了。<br>如果前面第5步做得不错的话，这一步可以省略，或者敷衍了事。<br>注意我说的是前面的第5步，其实序号是4。<br>因为这一部分只占到了考试的10%，又全都是选择题。而且在前面的学习中，已经可以掌握一部分这方面的内容。 </p>\n<p>6、’\\0’<br>C语言中字符串的结束符是这个。</p>\n<h2 id=\"提问\"><a href=\"#提问\" class=\"headerlink\" title=\"提问\"></a>提问</h2><p>第一步，向自己提问；<br>第二步，向教科书提问；<br>第三步，向搜索引擎提问；<br>第四步，向周围的人提问，比如我。</p>\n<p>提问要明确自己到底要知道要搞懂的是什么。<br>提问要注意方式方法，遇到什么情况，要说清楚说详细说具体，而且要挑重点挑关键点强调，这样才方便别人解答。<br>举个例子，比较常见的令初学者头疼的就是那个VC6.0报错。提问至少需要提供两方面内容，一个是源代码，一个是报错内容。</p>\n<h2 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h2><p>这篇文章大概有两个用处，一个是给我本人自己回顾历史，一个是给要准备二级C语言考试的人消遣。<br>文章中很多没有说明白的，很多说漏的，很多说错的，这在所难免。有些也是我故意略去的，比如学习编程需要很好的英文阅读水平。这点没有强调是因为我觉得对于二级C语言考试来说，这个完全可以忽略。<br>但是有些对二级考试不重要的我又挑出来说了，是因为我觉得这些很重要，在任何场景下。比如使用搜索引擎。<br>老的程序员有个说法，以前说</p>\n<blockquote>\n<p>程序 = 数据结构 + 算法<br>现在是<br>程序 = 搜索引擎 + 英语</p>\n</blockquote>\n<p>这篇文章通篇说得太泛。这不要紧，说具体不是本文的目的。后面我会继续写具体。当然是在另外一些文章里面了，但是同样是发表在这个网站。<br>由于这个网站对文章的管理方式，我决定之后的文章都采用这样的命名方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// SetTie.cpp</span><br><span class=\"line\">/* 给文章设置一个统一规范的标题。*/</span><br><span class=\"line\"></span><br><span class=\"line\">/* 这个示例程序基本包含了C语言的精华。对正准备入门但还没迈开脚的人来说，读不懂是正常的。但是呢，记得运用前面是三个方法：不求甚解自以为是换位思考。 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 哎呀忘了介绍了，这个/* 和 * /是写注释的地方，</span><br><span class=\"line\">在这两个符号里面随便写啥都行。我把后面那个中间加了个空格，因为如果不加的话，这个注释就Over了这不是我想看到的。*/</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个//嘛，也是写注释的地方，但是呢，只能在这一行里面写。</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;   </span><br><span class=\"line\">// 包含头文件，以使用头文件中的内容。以.h作为文件后缀名。stdio.h是标准(std=standard)输入输出(io=input,output)头文件。</span><br><span class=\"line\"></span><br><span class=\"line\">#define ARTICLES 20</span><br><span class=\"line\"> // 宏定义。对于某些固定的常量，比如我要写的文章总数20，我用一个ARTICLE表示。就是“定义ARTICLE为20”</span><br><span class=\"line\">#define STR_LEN 100</span><br><span class=\"line\"> //和上面一样，这次定义的是一个字符串长度</span><br><span class=\"line\"> </span><br><span class=\"line\">int SetTitle();</span><br><span class=\"line\">// 函数声明，这里可以不写函数主体。这个函数比较复杂，我也不会写。所以就是简单表示一下含义。</span><br><span class=\"line\"></span><br><span class=\"line\">int main()// main()是固定的，是整个程序的entry入口。</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    // 定义一个整型变量（就是整数）i，并赋值(assign)为0。i这个字母通常用来做循环计数，第一次循环，第二次循环……</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 循环头。for后面的括号里面，第一个i=0是初始条件，第二个i&lt;ARTICLE是循环终止判断条件，不满足这个条件的时候循环终止；第三个i++是每次循环的后面都要执行的一个操作，一般就是i++这样的，表示循环次数+1。</span><br><span class=\"line\">    for(i=0;l++;i&lt;ARTICLES)</span><br><span class=\"line\">    SetTitle(&quot;C语言入门奇葩说-%d&quot;,i);</span><br><span class=\"line\">    //这行代码按标准需要用一个大括号括起来，但是因为只有一行，大括号可以省略。这里是调用了前面声明的那个函数。将我的文章标题设置为《C语言奇葩说-0》、《C语言奇葩说-1》、《C语言奇葩说-2》……</span><br><span class=\"line\">    </span><br><span class=\"line\">    char string[STR_LEN] = &quot;上面那个SetTitle()函数啊，有点像我这个printf()函数呢&quot;;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    printf(&quot;%s&quot;,string);//这个函数是初学阶段最重要最常用的一个函数，没有之一。作用就是打印（print,是打印显示到输出设备比如屏幕上的）。</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">    //有没有发现函数名字前面都有一个单词，main()前面是int，就要返回一个int整型数。一般来说，程序正常结束的话就返回一个0，异常就返回-1。</span><br><span class=\"line\">&#125;//~the end of main()</span><br><span class=\"line\">int SetTitle()//一般来说，这一行就和前面那个声明一模一样，直接复制粘贴就行了</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...//这个函数我是真的不知道怎么写</span><br><span class=\"line\">&#125;//~the end of SetTile()</span><br><span class=\"line\">//~the end of SetTitle.cpp</span><br></pre></td></tr></table></figure>"},{"title":"Ext2fsd软件对windows文件系统性能的坑比表现","_content":"","source":"_posts/Ext2Fsd.md","raw":"---\ntitle: Ext2fsd软件对windows文件系统性能的坑比表现\n---","slug":"Ext2Fsd","published":1,"date":"2019-02-27T13:22:35.591Z","updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89t0007c4xk8g8xe9av","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2016-03-27T12:26:00.000Z","status":"public","title":"C语言入门奇葩说-2","keywords":["C语言","入门","教程"],"_content":"\n# 表达式和运算符\n\n关于左值、右值和布尔值。\n\n# 几个重要概念\n## 左值、右值、赋值、=和==\n**能放到等号左边的通常在内存中都有一个能确定下来的位置；而放到等号右边的都必须有一个值。**\n从这句话，就可以知道所谓=，即赋值，与传统数学符号系统里面的=，在含义上的差别是很大的。传统的等于号，对应于C语言的==。C语言的=，是把它右边的一个确定的值，赋给左边的一个“空箱子”（我说的空箱子就是人们通常说的内存位置）。\n这两个符号和概念不能混淆，因为考试经常考。\n## 注释\n前面其实看的也挺多了，注释符号有两种，行注释//和块注释`/*...*/`。这个其实很好懂，在某一行里，//后面的，都是注释；在某一个文件里，`/*`和`*/`中间的，都是注释。\n那么注释是什么呢？\n笨蛋啊，读书笔记啊懂么。\n前面提到过编译器，编译器看到注释符号，自动就把注释给踢掉了，人家不翻译注释。这个就好像你有一本书写满了批注，找个翻译官来翻译，翻译官当然是翻译正文，哪管你写得歪歪扭扭的批注呢。\n所以无论你在注释里写什么，都不会报错。\n\nBy the way，注释的作用，和读书笔记一样。——怕以后看不懂。。。。。\n\n## 数组、矩阵\n由于本人在学习C语言之前学过《线性代数》这门课，所以对这两个概念的理解和转换毫无压力。\n事实上我认为对这两个概念的理解对C语言是非常非常有帮助的。\n事实上数组这块是C语言的重点，有用，必考，考得特多。\n经常说几维数组，有点玄乎，但是略微知道矩阵的，就知道这两个是多么相似，而且方便理解了。\n**所以，本人建议学习一下《线性代数》的第一章。里面很多知识，可以很自然地移植到C语言里关于数组的运算上来。**\n\n## 内存地址、指针\n这个属于比较高级的内容，但是二级C考试也考，考得还不少，不过一般都是选择题居多。\n先说内存地址，这个概念我认为是C语言（以及一系列C系语言，以及我没有接触过的其他语言）的核心。计算机毕竟是电子设备，软件不是虚无的，而且搭建在一定的硬件条件上的，这个内存地址，就是比较硬的——大地都是硬的~\n\n对于初学者，一脸懵逼是必然的，但是可以想象有一块莽莽苍苍的大草地，然而你却想在上面种一棵树！！！\n\n你买来了小树苗，这个小树苗就是你的右值。\n\n你有一个小园丁，这个小园丁就是你的左值。\n\n你对小园丁说，在北纬32°东经127°海拔1024m处，有一块空草地，因为我特么想在上面种一棵树，我又不能到那里去，所以我把这块土地给你——这就是`int xiaoyuanding;//声明变量，由于没有初始化，此时这个变量是没有确定的内存地址的——这时候小园丁还没有去到那块土地上~`，然后，嗯，树苗给你，把它种上去——`xiaoyuanding=XIAO_SHU_MIAO;//变量初始化，小园丁接到你的指令，就去那块土地了，所以这时候就有确定的内存地址了——北纬32°东经127°海拔1024m处`。\n\n整个过程也可以快点完成，不拖沓——`int xiaoyuanding=XIAO_SHU_MIAO;`\n\n## 命名规范\n什么需要命名？\n变量(包括一般的数值变量、数组、指针）和函数——这个是我自己临时想到的，可能不完善（但是需要一个名字来称呼不是很理所当然么）。\n\n关于命名，有一些是死规定，不能触犯的。比如关键词不能拿来命名，不能以数字开头，不能用-（因为看起来就是减号），不能……所有这些，请查阅权威性文档——教材和网络。\n还有一些是习惯。比如有驼峰式命名法，  getMax  这个名字就是驼峰式命名，与之对应的就是`get_max`。另外，像常量通常全部用大写，比如`INT_MAX`。\n\n不过最重要的一点，还是要借鉴中国古代人取名，取字，取号，取谥号，要有意义，要能概括这个人（谥号就是用来概括一些名人大贤的）。所以你看到上面这些我取的名字，是不是一看就知道它们代表什么含义咯。\n这个没有具体的要求，所以可以形成自己的风格（代码风格的一个重要组成部分，另一部分是括号的位置和空格缩进）。\n\n# 矩阵元素最大值\n\n```c:n\n#include<stdio.h>\nint main( )\n{ \n    int i, j, c, max ;\n    /*\n    static是一个修饰符，静态的意思，至于这个静态在C语言里面有什么含义，可以百度。\n    尤为重要的，static的一个是作为计数次数的变量修饰符，这是一种比较经典的C语言考题题型。\n   进阶的，在我的这篇文章里，也有提到一点<http://huangzhen.farbox.com/post/cyu-yan-dian-di/chapter7-han-shu-mo-kuai-hong-ding-yi>\n   摘录几点（可能有点抽象）：\n   静态存储区和栈不同，不会随着函数的退出而消失。事实上，静态存储区的变量会和整个程序的寿命一样长。\n\n    static的第二个特性，是信息隐藏，static变量只在定义它的范围内可见，在其他范围内不可见。这也是static变量与全局变量的区别，虽然他们被保存在同一块内存区域。\n\n    如果static用来修饰函数，这个函数只在当前的.c文件中可见，这样就可以在不同的.c文件中定义同名函数而不冲突。\n   */\n    static int a[3][4]={{6,-5,11,3},{8,9,4,7},{2,13,1,-10}};//这是一个二维数组，通过大括号{}聚合在一起\n    for (i=0; i<=2; i++){//二维数组a可是看成是一个3x4矩阵，这里i从0到2，可以看作是循环遍历矩阵的每一行（3行4列）\n         max=a[i][0]; //首先假定每行的第一列元素是最大值\n         c=0;//c是column的首字母，代表列数\n         for ( j=0; j<=3; j++){//在每一行里，开始循环遍历列了，每一行都有4列。\n             if (a[i][ j]>max) {//假定的最大值比这个a[i][j]还小？！\n             max=a[i][ j]; //那么最大值就是这个a[i][j]了！\n             c=j;//记录这个新的最大值的列数\n             }\n         }\n         printf(\"max=%2d,row=%d,column=%d\\n\",max,i+1,c+1);//这一行的最大值找到了，它的行号和列号我们也知道\n     }\n  return 0;\n}\n```","source":"_posts/C语言入门奇葩说-2.md","raw":"---\ndate: 2016-03-27 20:26\nstatus: public\ntitle: C语言入门奇葩说-2\nkeywords: \n- C语言\n- 入门\n- 教程\ntags: \n- C语言\n- 入门\ncategories: Language\n \n---\n\n# 表达式和运算符\n\n关于左值、右值和布尔值。\n\n# 几个重要概念\n## 左值、右值、赋值、=和==\n**能放到等号左边的通常在内存中都有一个能确定下来的位置；而放到等号右边的都必须有一个值。**\n从这句话，就可以知道所谓=，即赋值，与传统数学符号系统里面的=，在含义上的差别是很大的。传统的等于号，对应于C语言的==。C语言的=，是把它右边的一个确定的值，赋给左边的一个“空箱子”（我说的空箱子就是人们通常说的内存位置）。\n这两个符号和概念不能混淆，因为考试经常考。\n## 注释\n前面其实看的也挺多了，注释符号有两种，行注释//和块注释`/*...*/`。这个其实很好懂，在某一行里，//后面的，都是注释；在某一个文件里，`/*`和`*/`中间的，都是注释。\n那么注释是什么呢？\n笨蛋啊，读书笔记啊懂么。\n前面提到过编译器，编译器看到注释符号，自动就把注释给踢掉了，人家不翻译注释。这个就好像你有一本书写满了批注，找个翻译官来翻译，翻译官当然是翻译正文，哪管你写得歪歪扭扭的批注呢。\n所以无论你在注释里写什么，都不会报错。\n\nBy the way，注释的作用，和读书笔记一样。——怕以后看不懂。。。。。\n\n## 数组、矩阵\n由于本人在学习C语言之前学过《线性代数》这门课，所以对这两个概念的理解和转换毫无压力。\n事实上我认为对这两个概念的理解对C语言是非常非常有帮助的。\n事实上数组这块是C语言的重点，有用，必考，考得特多。\n经常说几维数组，有点玄乎，但是略微知道矩阵的，就知道这两个是多么相似，而且方便理解了。\n**所以，本人建议学习一下《线性代数》的第一章。里面很多知识，可以很自然地移植到C语言里关于数组的运算上来。**\n\n## 内存地址、指针\n这个属于比较高级的内容，但是二级C考试也考，考得还不少，不过一般都是选择题居多。\n先说内存地址，这个概念我认为是C语言（以及一系列C系语言，以及我没有接触过的其他语言）的核心。计算机毕竟是电子设备，软件不是虚无的，而且搭建在一定的硬件条件上的，这个内存地址，就是比较硬的——大地都是硬的~\n\n对于初学者，一脸懵逼是必然的，但是可以想象有一块莽莽苍苍的大草地，然而你却想在上面种一棵树！！！\n\n你买来了小树苗，这个小树苗就是你的右值。\n\n你有一个小园丁，这个小园丁就是你的左值。\n\n你对小园丁说，在北纬32°东经127°海拔1024m处，有一块空草地，因为我特么想在上面种一棵树，我又不能到那里去，所以我把这块土地给你——这就是`int xiaoyuanding;//声明变量，由于没有初始化，此时这个变量是没有确定的内存地址的——这时候小园丁还没有去到那块土地上~`，然后，嗯，树苗给你，把它种上去——`xiaoyuanding=XIAO_SHU_MIAO;//变量初始化，小园丁接到你的指令，就去那块土地了，所以这时候就有确定的内存地址了——北纬32°东经127°海拔1024m处`。\n\n整个过程也可以快点完成，不拖沓——`int xiaoyuanding=XIAO_SHU_MIAO;`\n\n## 命名规范\n什么需要命名？\n变量(包括一般的数值变量、数组、指针）和函数——这个是我自己临时想到的，可能不完善（但是需要一个名字来称呼不是很理所当然么）。\n\n关于命名，有一些是死规定，不能触犯的。比如关键词不能拿来命名，不能以数字开头，不能用-（因为看起来就是减号），不能……所有这些，请查阅权威性文档——教材和网络。\n还有一些是习惯。比如有驼峰式命名法，  getMax  这个名字就是驼峰式命名，与之对应的就是`get_max`。另外，像常量通常全部用大写，比如`INT_MAX`。\n\n不过最重要的一点，还是要借鉴中国古代人取名，取字，取号，取谥号，要有意义，要能概括这个人（谥号就是用来概括一些名人大贤的）。所以你看到上面这些我取的名字，是不是一看就知道它们代表什么含义咯。\n这个没有具体的要求，所以可以形成自己的风格（代码风格的一个重要组成部分，另一部分是括号的位置和空格缩进）。\n\n# 矩阵元素最大值\n\n```c:n\n#include<stdio.h>\nint main( )\n{ \n    int i, j, c, max ;\n    /*\n    static是一个修饰符，静态的意思，至于这个静态在C语言里面有什么含义，可以百度。\n    尤为重要的，static的一个是作为计数次数的变量修饰符，这是一种比较经典的C语言考题题型。\n   进阶的，在我的这篇文章里，也有提到一点<http://huangzhen.farbox.com/post/cyu-yan-dian-di/chapter7-han-shu-mo-kuai-hong-ding-yi>\n   摘录几点（可能有点抽象）：\n   静态存储区和栈不同，不会随着函数的退出而消失。事实上，静态存储区的变量会和整个程序的寿命一样长。\n\n    static的第二个特性，是信息隐藏，static变量只在定义它的范围内可见，在其他范围内不可见。这也是static变量与全局变量的区别，虽然他们被保存在同一块内存区域。\n\n    如果static用来修饰函数，这个函数只在当前的.c文件中可见，这样就可以在不同的.c文件中定义同名函数而不冲突。\n   */\n    static int a[3][4]={{6,-5,11,3},{8,9,4,7},{2,13,1,-10}};//这是一个二维数组，通过大括号{}聚合在一起\n    for (i=0; i<=2; i++){//二维数组a可是看成是一个3x4矩阵，这里i从0到2，可以看作是循环遍历矩阵的每一行（3行4列）\n         max=a[i][0]; //首先假定每行的第一列元素是最大值\n         c=0;//c是column的首字母，代表列数\n         for ( j=0; j<=3; j++){//在每一行里，开始循环遍历列了，每一行都有4列。\n             if (a[i][ j]>max) {//假定的最大值比这个a[i][j]还小？！\n             max=a[i][ j]; //那么最大值就是这个a[i][j]了！\n             c=j;//记录这个新的最大值的列数\n             }\n         }\n         printf(\"max=%2d,row=%d,column=%d\\n\",max,i+1,c+1);//这一行的最大值找到了，它的行号和列号我们也知道\n     }\n  return 0;\n}\n```","slug":"C语言入门奇葩说-2","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89w0008c4xku9b4ik7d","content":"<h1 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h1><p>关于左值、右值和布尔值。</p>\n<h1 id=\"几个重要概念\"><a href=\"#几个重要概念\" class=\"headerlink\" title=\"几个重要概念\"></a>几个重要概念</h1><h2 id=\"左值、右值、赋值、-和\"><a href=\"#左值、右值、赋值、-和\" class=\"headerlink\" title=\"左值、右值、赋值、=和==\"></a>左值、右值、赋值、=和==</h2><p><strong>能放到等号左边的通常在内存中都有一个能确定下来的位置；而放到等号右边的都必须有一个值。</strong><br>从这句话，就可以知道所谓=，即赋值，与传统数学符号系统里面的=，在含义上的差别是很大的。传统的等于号，对应于C语言的==。C语言的=，是把它右边的一个确定的值，赋给左边的一个“空箱子”（我说的空箱子就是人们通常说的内存位置）。<br>这两个符号和概念不能混淆，因为考试经常考。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>前面其实看的也挺多了，注释符号有两种，行注释//和块注释<code>/*...*/</code>。这个其实很好懂，在某一行里，//后面的，都是注释；在某一个文件里，<code>/*</code>和<code>*/</code>中间的，都是注释。<br>那么注释是什么呢？<br>笨蛋啊，读书笔记啊懂么。<br>前面提到过编译器，编译器看到注释符号，自动就把注释给踢掉了，人家不翻译注释。这个就好像你有一本书写满了批注，找个翻译官来翻译，翻译官当然是翻译正文，哪管你写得歪歪扭扭的批注呢。<br>所以无论你在注释里写什么，都不会报错。</p>\n<p>By the way，注释的作用，和读书笔记一样。——怕以后看不懂。。。。。</p>\n<h2 id=\"数组、矩阵\"><a href=\"#数组、矩阵\" class=\"headerlink\" title=\"数组、矩阵\"></a>数组、矩阵</h2><p>由于本人在学习C语言之前学过《线性代数》这门课，所以对这两个概念的理解和转换毫无压力。<br>事实上我认为对这两个概念的理解对C语言是非常非常有帮助的。<br>事实上数组这块是C语言的重点，有用，必考，考得特多。<br>经常说几维数组，有点玄乎，但是略微知道矩阵的，就知道这两个是多么相似，而且方便理解了。<br><strong>所以，本人建议学习一下《线性代数》的第一章。里面很多知识，可以很自然地移植到C语言里关于数组的运算上来。</strong></p>\n<h2 id=\"内存地址、指针\"><a href=\"#内存地址、指针\" class=\"headerlink\" title=\"内存地址、指针\"></a>内存地址、指针</h2><p>这个属于比较高级的内容，但是二级C考试也考，考得还不少，不过一般都是选择题居多。<br>先说内存地址，这个概念我认为是C语言（以及一系列C系语言，以及我没有接触过的其他语言）的核心。计算机毕竟是电子设备，软件不是虚无的，而且搭建在一定的硬件条件上的，这个内存地址，就是比较硬的——大地都是硬的~</p>\n<p>对于初学者，一脸懵逼是必然的，但是可以想象有一块莽莽苍苍的大草地，然而你却想在上面种一棵树！！！</p>\n<p>你买来了小树苗，这个小树苗就是你的右值。</p>\n<p>你有一个小园丁，这个小园丁就是你的左值。</p>\n<p>你对小园丁说，在北纬32°东经127°海拔1024m处，有一块空草地，因为我特么想在上面种一棵树，我又不能到那里去，所以我把这块土地给你——这就是<code>int xiaoyuanding;//声明变量，由于没有初始化，此时这个变量是没有确定的内存地址的——这时候小园丁还没有去到那块土地上~</code>，然后，嗯，树苗给你，把它种上去——<code>xiaoyuanding=XIAO_SHU_MIAO;//变量初始化，小园丁接到你的指令，就去那块土地了，所以这时候就有确定的内存地址了——北纬32°东经127°海拔1024m处</code>。</p>\n<p>整个过程也可以快点完成，不拖沓——<code>int xiaoyuanding=XIAO_SHU_MIAO;</code></p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>什么需要命名？<br>变量(包括一般的数值变量、数组、指针）和函数——这个是我自己临时想到的，可能不完善（但是需要一个名字来称呼不是很理所当然么）。</p>\n<p>关于命名，有一些是死规定，不能触犯的。比如关键词不能拿来命名，不能以数字开头，不能用-（因为看起来就是减号），不能……所有这些，请查阅权威性文档——教材和网络。<br>还有一些是习惯。比如有驼峰式命名法，  getMax  这个名字就是驼峰式命名，与之对应的就是<code>get_max</code>。另外，像常量通常全部用大写，比如<code>INT_MAX</code>。</p>\n<p>不过最重要的一点，还是要借鉴中国古代人取名，取字，取号，取谥号，要有意义，要能概括这个人（谥号就是用来概括一些名人大贤的）。所以你看到上面这些我取的名字，是不是一看就知道它们代表什么含义咯。<br>这个没有具体的要求，所以可以形成自己的风格（代码风格的一个重要组成部分，另一部分是括号的位置和空格缩进）。</p>\n<h1 id=\"矩阵元素最大值\"><a href=\"#矩阵元素最大值\" class=\"headerlink\" title=\"矩阵元素最大值\"></a>矩阵元素最大值</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main( )</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i, j, c, max ;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    static是一个修饰符，静态的意思，至于这个静态在C语言里面有什么含义，可以百度。</span><br><span class=\"line\">    尤为重要的，static的一个是作为计数次数的变量修饰符，这是一种比较经典的C语言考题题型。</span><br><span class=\"line\">   进阶的，在我的这篇文章里，也有提到一点&lt;http://huangzhen.farbox.com/post/cyu-yan-dian-di/chapter7-han-shu-mo-kuai-hong-ding-yi&gt;</span><br><span class=\"line\">   摘录几点（可能有点抽象）：</span><br><span class=\"line\">   静态存储区和栈不同，不会随着函数的退出而消失。事实上，静态存储区的变量会和整个程序的寿命一样长。</span><br><span class=\"line\"></span><br><span class=\"line\">    static的第二个特性，是信息隐藏，static变量只在定义它的范围内可见，在其他范围内不可见。这也是static变量与全局变量的区别，虽然他们被保存在同一块内存区域。</span><br><span class=\"line\"></span><br><span class=\"line\">    如果static用来修饰函数，这个函数只在当前的.c文件中可见，这样就可以在不同的.c文件中定义同名函数而不冲突。</span><br><span class=\"line\">   */</span><br><span class=\"line\">    static int a[3][4]=&#123;&#123;6,-5,11,3&#125;,&#123;8,9,4,7&#125;,&#123;2,13,1,-10&#125;&#125;;//这是一个二维数组，通过大括号&#123;&#125;聚合在一起</span><br><span class=\"line\">    for (i=0; i&lt;=2; i++)&#123;//二维数组a可是看成是一个3x4矩阵，这里i从0到2，可以看作是循环遍历矩阵的每一行（3行4列）</span><br><span class=\"line\">         max=a[i][0]; //首先假定每行的第一列元素是最大值</span><br><span class=\"line\">         c=0;//c是column的首字母，代表列数</span><br><span class=\"line\">         for ( j=0; j&lt;=3; j++)&#123;//在每一行里，开始循环遍历列了，每一行都有4列。</span><br><span class=\"line\">             if (a[i][ j]&gt;max) &#123;//假定的最大值比这个a[i][j]还小？！</span><br><span class=\"line\">             max=a[i][ j]; //那么最大值就是这个a[i][j]了！</span><br><span class=\"line\">             c=j;//记录这个新的最大值的列数</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         printf(&quot;max=%2d,row=%d,column=%d\\n&quot;,max,i+1,c+1);//这一行的最大值找到了，它的行号和列号我们也知道</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h1><p>关于左值、右值和布尔值。</p>\n<h1 id=\"几个重要概念\"><a href=\"#几个重要概念\" class=\"headerlink\" title=\"几个重要概念\"></a>几个重要概念</h1><h2 id=\"左值、右值、赋值、-和\"><a href=\"#左值、右值、赋值、-和\" class=\"headerlink\" title=\"左值、右值、赋值、=和==\"></a>左值、右值、赋值、=和==</h2><p><strong>能放到等号左边的通常在内存中都有一个能确定下来的位置；而放到等号右边的都必须有一个值。</strong><br>从这句话，就可以知道所谓=，即赋值，与传统数学符号系统里面的=，在含义上的差别是很大的。传统的等于号，对应于C语言的==。C语言的=，是把它右边的一个确定的值，赋给左边的一个“空箱子”（我说的空箱子就是人们通常说的内存位置）。<br>这两个符号和概念不能混淆，因为考试经常考。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>前面其实看的也挺多了，注释符号有两种，行注释//和块注释<code>/*...*/</code>。这个其实很好懂，在某一行里，//后面的，都是注释；在某一个文件里，<code>/*</code>和<code>*/</code>中间的，都是注释。<br>那么注释是什么呢？<br>笨蛋啊，读书笔记啊懂么。<br>前面提到过编译器，编译器看到注释符号，自动就把注释给踢掉了，人家不翻译注释。这个就好像你有一本书写满了批注，找个翻译官来翻译，翻译官当然是翻译正文，哪管你写得歪歪扭扭的批注呢。<br>所以无论你在注释里写什么，都不会报错。</p>\n<p>By the way，注释的作用，和读书笔记一样。——怕以后看不懂。。。。。</p>\n<h2 id=\"数组、矩阵\"><a href=\"#数组、矩阵\" class=\"headerlink\" title=\"数组、矩阵\"></a>数组、矩阵</h2><p>由于本人在学习C语言之前学过《线性代数》这门课，所以对这两个概念的理解和转换毫无压力。<br>事实上我认为对这两个概念的理解对C语言是非常非常有帮助的。<br>事实上数组这块是C语言的重点，有用，必考，考得特多。<br>经常说几维数组，有点玄乎，但是略微知道矩阵的，就知道这两个是多么相似，而且方便理解了。<br><strong>所以，本人建议学习一下《线性代数》的第一章。里面很多知识，可以很自然地移植到C语言里关于数组的运算上来。</strong></p>\n<h2 id=\"内存地址、指针\"><a href=\"#内存地址、指针\" class=\"headerlink\" title=\"内存地址、指针\"></a>内存地址、指针</h2><p>这个属于比较高级的内容，但是二级C考试也考，考得还不少，不过一般都是选择题居多。<br>先说内存地址，这个概念我认为是C语言（以及一系列C系语言，以及我没有接触过的其他语言）的核心。计算机毕竟是电子设备，软件不是虚无的，而且搭建在一定的硬件条件上的，这个内存地址，就是比较硬的——大地都是硬的~</p>\n<p>对于初学者，一脸懵逼是必然的，但是可以想象有一块莽莽苍苍的大草地，然而你却想在上面种一棵树！！！</p>\n<p>你买来了小树苗，这个小树苗就是你的右值。</p>\n<p>你有一个小园丁，这个小园丁就是你的左值。</p>\n<p>你对小园丁说，在北纬32°东经127°海拔1024m处，有一块空草地，因为我特么想在上面种一棵树，我又不能到那里去，所以我把这块土地给你——这就是<code>int xiaoyuanding;//声明变量，由于没有初始化，此时这个变量是没有确定的内存地址的——这时候小园丁还没有去到那块土地上~</code>，然后，嗯，树苗给你，把它种上去——<code>xiaoyuanding=XIAO_SHU_MIAO;//变量初始化，小园丁接到你的指令，就去那块土地了，所以这时候就有确定的内存地址了——北纬32°东经127°海拔1024m处</code>。</p>\n<p>整个过程也可以快点完成，不拖沓——<code>int xiaoyuanding=XIAO_SHU_MIAO;</code></p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>什么需要命名？<br>变量(包括一般的数值变量、数组、指针）和函数——这个是我自己临时想到的，可能不完善（但是需要一个名字来称呼不是很理所当然么）。</p>\n<p>关于命名，有一些是死规定，不能触犯的。比如关键词不能拿来命名，不能以数字开头，不能用-（因为看起来就是减号），不能……所有这些，请查阅权威性文档——教材和网络。<br>还有一些是习惯。比如有驼峰式命名法，  getMax  这个名字就是驼峰式命名，与之对应的就是<code>get_max</code>。另外，像常量通常全部用大写，比如<code>INT_MAX</code>。</p>\n<p>不过最重要的一点，还是要借鉴中国古代人取名，取字，取号，取谥号，要有意义，要能概括这个人（谥号就是用来概括一些名人大贤的）。所以你看到上面这些我取的名字，是不是一看就知道它们代表什么含义咯。<br>这个没有具体的要求，所以可以形成自己的风格（代码风格的一个重要组成部分，另一部分是括号的位置和空格缩进）。</p>\n<h1 id=\"矩阵元素最大值\"><a href=\"#矩阵元素最大值\" class=\"headerlink\" title=\"矩阵元素最大值\"></a>矩阵元素最大值</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main( )</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i, j, c, max ;</span><br><span class=\"line\">    /*</span><br><span class=\"line\">    static是一个修饰符，静态的意思，至于这个静态在C语言里面有什么含义，可以百度。</span><br><span class=\"line\">    尤为重要的，static的一个是作为计数次数的变量修饰符，这是一种比较经典的C语言考题题型。</span><br><span class=\"line\">   进阶的，在我的这篇文章里，也有提到一点&lt;http://huangzhen.farbox.com/post/cyu-yan-dian-di/chapter7-han-shu-mo-kuai-hong-ding-yi&gt;</span><br><span class=\"line\">   摘录几点（可能有点抽象）：</span><br><span class=\"line\">   静态存储区和栈不同，不会随着函数的退出而消失。事实上，静态存储区的变量会和整个程序的寿命一样长。</span><br><span class=\"line\"></span><br><span class=\"line\">    static的第二个特性，是信息隐藏，static变量只在定义它的范围内可见，在其他范围内不可见。这也是static变量与全局变量的区别，虽然他们被保存在同一块内存区域。</span><br><span class=\"line\"></span><br><span class=\"line\">    如果static用来修饰函数，这个函数只在当前的.c文件中可见，这样就可以在不同的.c文件中定义同名函数而不冲突。</span><br><span class=\"line\">   */</span><br><span class=\"line\">    static int a[3][4]=&#123;&#123;6,-5,11,3&#125;,&#123;8,9,4,7&#125;,&#123;2,13,1,-10&#125;&#125;;//这是一个二维数组，通过大括号&#123;&#125;聚合在一起</span><br><span class=\"line\">    for (i=0; i&lt;=2; i++)&#123;//二维数组a可是看成是一个3x4矩阵，这里i从0到2，可以看作是循环遍历矩阵的每一行（3行4列）</span><br><span class=\"line\">         max=a[i][0]; //首先假定每行的第一列元素是最大值</span><br><span class=\"line\">         c=0;//c是column的首字母，代表列数</span><br><span class=\"line\">         for ( j=0; j&lt;=3; j++)&#123;//在每一行里，开始循环遍历列了，每一行都有4列。</span><br><span class=\"line\">             if (a[i][ j]&gt;max) &#123;//假定的最大值比这个a[i][j]还小？！</span><br><span class=\"line\">             max=a[i][ j]; //那么最大值就是这个a[i][j]了！</span><br><span class=\"line\">             c=j;//记录这个新的最大值的列数</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         printf(&quot;max=%2d,row=%d,column=%d\\n&quot;,max,i+1,c+1);//这一行的最大值找到了，它的行号和列号我们也知道</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"date":"2017-08-25T10:49:30.000Z","status":"public","title":"Git超简明指南与超常用命令","keywords":["Git","GitHub","入门","教程"],"_content":"\n\ngit fetch origin branchname:branchname\n\n可以把远程某各分支拉去到本地的branchname下，如果没有branchname，则会在本地新建branchname\n\n \n\ngit checkout origin/remoteName -b localName\n\n获取远程分支remoteName 到本地新分支localName，并跳到localName分支\n\n\ngit push -u origin local_branch_name\n\ngit push origin --delete <branchName>\n\n\nscp username@servername:/path/filename /tmp/local_destination","source":"_posts/Git超简明指南与超常用命令.md","raw":"---\ndate: 2017-08-25 18:49:30\nstatus: public\ntitle: Git超简明指南与超常用命令\nkeywords: \n- Git\n- GitHub\n- 入门\n- 教程\ntags: \n- Python\ncategories: \n- 快速入门快速实践\n- 一天\n- 常用\n---\n\n\ngit fetch origin branchname:branchname\n\n可以把远程某各分支拉去到本地的branchname下，如果没有branchname，则会在本地新建branchname\n\n \n\ngit checkout origin/remoteName -b localName\n\n获取远程分支remoteName 到本地新分支localName，并跳到localName分支\n\n\ngit push -u origin local_branch_name\n\ngit push origin --delete <branchName>\n\n\nscp username@servername:/path/filename /tmp/local_destination","slug":"Git超简明指南与超常用命令","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89x000bc4xk4docmdyh","content":"<p>git fetch origin branchname:branchname</p>\n<p>可以把远程某各分支拉去到本地的branchname下，如果没有branchname，则会在本地新建branchname</p>\n<p>git checkout origin/remoteName -b localName</p>\n<p>获取远程分支remoteName 到本地新分支localName，并跳到localName分支</p>\n<p>git push -u origin local_branch_name</p>\n<p>git push origin –delete <branchname></branchname></p>\n<p>scp username@servername:/path/filename /tmp/local_destination</p>\n","site":{"data":{}},"excerpt":"","more":"<p>git fetch origin branchname:branchname</p>\n<p>可以把远程某各分支拉去到本地的branchname下，如果没有branchname，则会在本地新建branchname</p>\n<p>git checkout origin/remoteName -b localName</p>\n<p>获取远程分支remoteName 到本地新分支localName，并跳到localName分支</p>\n<p>git push -u origin local_branch_name</p>\n<p>git push origin –delete <branchname></branchname></p>\n<p>scp username@servername:/path/filename /tmp/local_destination</p>\n"},{"_content":"TAM\nSwitching Cost\nUCD\nUTAUT\nLoyalty Design\nGrowth Hacking\nELM\nTangible Design: 极度易用（小孩易学）\n\n\n计算智能-感知智能-认知智能-类人智能","source":"_posts/Product_Design_Methods.md","raw":"TAM\nSwitching Cost\nUCD\nUTAUT\nLoyalty Design\nGrowth Hacking\nELM\nTangible Design: 极度易用（小孩易学）\n\n\n计算智能-感知智能-认知智能-类人智能","slug":"Product_Design_Methods","published":1,"date":"2019-02-27T13:22:35.591Z","updated":"2019-02-27T13:22:35.591Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a89z000cc4xkg5xvsogg","content":"<p>TAM<br>Switching Cost<br>UCD<br>UTAUT<br>Loyalty Design<br>Growth Hacking<br>ELM<br>Tangible Design: 极度易用（小孩易学）</p>\n<p>计算智能-感知智能-认知智能-类人智能</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TAM<br>Switching Cost<br>UCD<br>UTAUT<br>Loyalty Design<br>Growth Hacking<br>ELM<br>Tangible Design: 极度易用（小孩易学）</p>\n<p>计算智能-感知智能-认知智能-类人智能</p>\n"},{"date":"2017-08-17T02:55:51.000Z","status":"public","title":"RussellCloud实习面经与入职经历","keywords":["北京","创业公司","Python","RussellCloud"],"_content":"\n\n\n2018年12月，从RussellCloud Head100微信群收到魏老板发出来的消息，RussellCloud正式停止服务。\n\n2019年1月，收到学弟转发的RussellCloud结题奖金。\n\n时间拉回到2017年7月。当时春招看到自己似乎不太适合吃技术这碗饭，但又不太好意思吃别的饭，于是舔着脸补了两个月后端的知识体系，由于基础不好仍然很虚。8月初看到一个群里发了一个实习招聘。","source":"_posts/RussellCloud碎碎念.md","raw":"---\ndate: 2017-08-17 10:55:51\nstatus: public\ntitle: RussellCloud实习面经与入职经历\nkeywords: \n- 北京\n- 创业公司\n- Python\n- RussellCloud\ntags: \n- Python\n- 面经\ncategories: Tips\n---\n\n\n\n2018年12月，从RussellCloud Head100微信群收到魏老板发出来的消息，RussellCloud正式停止服务。\n\n2019年1月，收到学弟转发的RussellCloud结题奖金。\n\n时间拉回到2017年7月。当时春招看到自己似乎不太适合吃技术这碗饭，但又不太好意思吃别的饭，于是舔着脸补了两个月后端的知识体系，由于基础不好仍然很虚。8月初看到一个群里发了一个实习招聘。","slug":"RussellCloud碎碎念","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8a2000gc4xk4jne86mq","content":"<p>2018年12月，从RussellCloud Head100微信群收到魏老板发出来的消息，RussellCloud正式停止服务。</p>\n<p>2019年1月，收到学弟转发的RussellCloud结题奖金。</p>\n<p>时间拉回到2017年7月。当时春招看到自己似乎不太适合吃技术这碗饭，但又不太好意思吃别的饭，于是舔着脸补了两个月后端的知识体系，由于基础不好仍然很虚。8月初看到一个群里发了一个实习招聘。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018年12月，从RussellCloud Head100微信群收到魏老板发出来的消息，RussellCloud正式停止服务。</p>\n<p>2019年1月，收到学弟转发的RussellCloud结题奖金。</p>\n<p>时间拉回到2017年7月。当时春招看到自己似乎不太适合吃技术这碗饭，但又不太好意思吃别的饭，于是舔着脸补了两个月后端的知识体系，由于基础不好仍然很虚。8月初看到一个群里发了一个实习招聘。</p>\n"},{"date":"2017-08-17T02:52:55.000Z","status":"public","title":"非死不可","keywords":["小说"],"_content":"\n# 非死不可\n\t\t\t\t\t\t一\n\t那天任何从工厂的流水线上下来，工作服一脱就去了工厂外面的一家网吧。收银台网管年轻稚嫩的脸，盯着任何掏出的身份证上那张同样年轻稚嫩的脸，看了许久许久，嘴里叼的香烟都要燃到牙齿上了。\n\t“有这么好看？快点，我队友还等着我呢。”任何的眼睛说不上大，可是凌厉。说话一急促的时候，淘气的几缕发丝就飘进了唇红齿白间。\n\t网管愣过神来，把身份证递还给了任何。\n\t任何接过身份证立马揣进兜里，四下探望，人声鼎沸，烟雾缭绕。任何随便找了一台电脑开始上网，和素未谋面的游戏情侣一起厮杀。任何一直眉头紧锁，第三把还没开始就关了游戏。然后她漫无目的地浏览起了门户网站。\n\t也不知道看了多少明星八卦再加多少搞笑段子，任何握鼠标的右手，再也没有那么勤奋地点点点滑滑滑了；任何那两弯好看的眉毛下面毛细血管突出的眼睛，眼白挤开了瞳孔。\n\t坐在她旁边的同样是一群稚气未脱的少年，他们头发染成各式奇特的颜色，敲键盘的手上一定有一枚不知是钻石还是玻璃还是塑料的戒指，以及一支刚好燃掉一半的香烟。\n\t任何斜眼看过去，他们手指下键盘的缝隙里，刚刚跌落的圆柱形的烟灰一瞬间就损失了形状，再也撑不起一根香烟的直挺，流露出其内心的空虚。\n\t\t\t\t\t\t二\n\t任何恢复意识的时候，一睁眼看到的不再是厂房宿舍上铺的床板，而是白得一清二楚的天花板。\n\t穿着白大褂的人走过来，而不是穿着蓝色工作服的主管。白大褂把任何的眼皮拨弄来拨弄去，用笔记下了什么就转身离开。\n\t任何知道自己在医院。可是想不起来自己为什么会在医院。所能回忆起的最近的场景，就是那根香烟，那根香烟，对，网管嘴里的那根，和坐在旁边上网的少年手指夹住的那根。\n\t应该是那根香烟点燃了整个网吧，嗯，低头就能看到满地凌乱的布线，抬头就能看见墙沿裸露的电线，不发生火灾就奇怪了。任何不由得要咧开嘴笑，大概就是在一年前，坐在她前面的那个男同学，给她讲火线零线和变压器，讲得眉飞色舞，任何一句也没听进去。她只是傻傻地看着他讲，不时跟着他的手势看看纸上排列整齐的线路。那种整齐感，是任何在一片废墟般的家里无法奢望的。\n\t后来看到图片上整齐划一的工厂流水线，任何跟回家探亲的表姐说，“嗯，带我去这里吧。”\n\t任何忽然感到嘴角强烈的撕裂感。疼，但不钻心，因为一口气就呼出去了那些不可述说的疼痛。\n\t\t\t\t\t\t三\n\t后来的情节发展出乎任何的意料，也出乎任何的理解。\n\t任何醒来第二天，就有两个警察跑来问话，问些稀奇古怪的话，任何只能一问三不知。\n\t警察无可奈何，结束了毫无“营养”的问话，义正言辞道：“在这件事上希望你不要有任何隐瞒，坦白从宽抗拒从严。”\n\t任何陡地怒了，“你以为我在隐瞒什么！？”\n\t两个穿制服的面不改色耳语一番，稍年轻的那个咳嗽了两声，带着明显的装腔说道：\n\t“十九条人命可不是什么小事，所有知情不报都是隐瞒，会酿成特别严重的后果，请你务必——嗯哼——知无不言，言无不尽。”\n\t任何差点没晕过去。敢情警察怀疑她背负了十九条人命？\n\t很想解释的时候，发现自己只能只会说一句我不知道，任何知道，任何不知道。\n\t任何第一时间想起来自己在宿舍床边的桌子上写了半封信，那是在她发现男朋友劈腿后又在存款个位数的情况下被扣一个月补贴的当头，胡乱发了一通牢骚。不消说，任何在信中提到想杀人。\n\t任何的信，没有写收信人，但是任何心中有一个默认的收信人。当然不是她那负心的男朋友，而是那个给她讲火线零线和变压器的男同学。\n\t大概任何永远也不会理解，是那个男同学，给她完成了这个堪称“伟大”的心愿：\n\t\t\n\t\t这个月真惨，糟透了，没一件好事情。过几天就十九岁生日了，我就这么活\t了十九年，还没交够十九个男朋友。当我死的那一天，总该有十九个十九岁的男\t孩子陪我才好。贾史久三个字一共十八笔，他也就刚好活了十八笔。我能活到今\t天，不晓得是运气还是霉气呢。\n\t\t\t\n\t\t\t\t\t\t四\n\t贾史久他爸叫贾历长，不过贾历长的生命历史着实不长，十九岁不到就一命呜呼。贾历长倒不是因体弱多病罹患绝症而死，而是死在了坦克底下。贾史久知道他爸小时候老喜欢坦克了，所以觉得他爸能在最青春的年纪死于所爱，实乃是一种伟大。何况，贾史久他老妈当年十几岁挺个大肚子做了未嫁的寡妇，更是显出了贾历长的英雄气概。\n\t虽说贾史久从小没见过亲爸爸，但是后爸陆陆续续好几个，待他也好，逆来顺受，好吃好喝好玩招待。贾史久也给他妈争气，从小就是各种第一专业户。\n\t贾史久十三岁那年，有好事的邻居问他是不是他妈和中科院某科学家生的野种，要不咋这么聪明呢。贾史久没吭声。\n\t当晚半夜贾史久爬到邻居家，对供电线路做了点手脚，然后一身轻松爬回家一觉睡到天亮。第二天晌午的时候传来噩耗，邻居一家三口死于触电。\n\t这出乎贾史久的预料。本来只想教训一下那个满口跑野种的女家长的，不料买一送二。贾史久后来听说，女家长在厨房触电后男主人和小孩都跑过去扶人，所以全家跑阴曹地府一起吃午饭了。\n\t是他们愚蠢。贾史久这样想着，心中负罪感也就慢慢释然了。\n\t不过贾史久心中还是有些疙瘩，想要搬家，正好母亲改嫁，也就离开了这个时刻提醒着他血债的地方。搬家伴随着转学，也就是这年秋天，他作为插班生，认识了任何。\n\n\t\t\t\t\t\t五\n","source":"_posts/Q10.md","raw":"---\ndate: 2017-08-17 10:52:55\nstatus: public\ntitle: 非死不可\nkeywords: \n- 小说\ntags: \n- 小说\ncategories: \n- 交流园地 \n---\n\n# 非死不可\n\t\t\t\t\t\t一\n\t那天任何从工厂的流水线上下来，工作服一脱就去了工厂外面的一家网吧。收银台网管年轻稚嫩的脸，盯着任何掏出的身份证上那张同样年轻稚嫩的脸，看了许久许久，嘴里叼的香烟都要燃到牙齿上了。\n\t“有这么好看？快点，我队友还等着我呢。”任何的眼睛说不上大，可是凌厉。说话一急促的时候，淘气的几缕发丝就飘进了唇红齿白间。\n\t网管愣过神来，把身份证递还给了任何。\n\t任何接过身份证立马揣进兜里，四下探望，人声鼎沸，烟雾缭绕。任何随便找了一台电脑开始上网，和素未谋面的游戏情侣一起厮杀。任何一直眉头紧锁，第三把还没开始就关了游戏。然后她漫无目的地浏览起了门户网站。\n\t也不知道看了多少明星八卦再加多少搞笑段子，任何握鼠标的右手，再也没有那么勤奋地点点点滑滑滑了；任何那两弯好看的眉毛下面毛细血管突出的眼睛，眼白挤开了瞳孔。\n\t坐在她旁边的同样是一群稚气未脱的少年，他们头发染成各式奇特的颜色，敲键盘的手上一定有一枚不知是钻石还是玻璃还是塑料的戒指，以及一支刚好燃掉一半的香烟。\n\t任何斜眼看过去，他们手指下键盘的缝隙里，刚刚跌落的圆柱形的烟灰一瞬间就损失了形状，再也撑不起一根香烟的直挺，流露出其内心的空虚。\n\t\t\t\t\t\t二\n\t任何恢复意识的时候，一睁眼看到的不再是厂房宿舍上铺的床板，而是白得一清二楚的天花板。\n\t穿着白大褂的人走过来，而不是穿着蓝色工作服的主管。白大褂把任何的眼皮拨弄来拨弄去，用笔记下了什么就转身离开。\n\t任何知道自己在医院。可是想不起来自己为什么会在医院。所能回忆起的最近的场景，就是那根香烟，那根香烟，对，网管嘴里的那根，和坐在旁边上网的少年手指夹住的那根。\n\t应该是那根香烟点燃了整个网吧，嗯，低头就能看到满地凌乱的布线，抬头就能看见墙沿裸露的电线，不发生火灾就奇怪了。任何不由得要咧开嘴笑，大概就是在一年前，坐在她前面的那个男同学，给她讲火线零线和变压器，讲得眉飞色舞，任何一句也没听进去。她只是傻傻地看着他讲，不时跟着他的手势看看纸上排列整齐的线路。那种整齐感，是任何在一片废墟般的家里无法奢望的。\n\t后来看到图片上整齐划一的工厂流水线，任何跟回家探亲的表姐说，“嗯，带我去这里吧。”\n\t任何忽然感到嘴角强烈的撕裂感。疼，但不钻心，因为一口气就呼出去了那些不可述说的疼痛。\n\t\t\t\t\t\t三\n\t后来的情节发展出乎任何的意料，也出乎任何的理解。\n\t任何醒来第二天，就有两个警察跑来问话，问些稀奇古怪的话，任何只能一问三不知。\n\t警察无可奈何，结束了毫无“营养”的问话，义正言辞道：“在这件事上希望你不要有任何隐瞒，坦白从宽抗拒从严。”\n\t任何陡地怒了，“你以为我在隐瞒什么！？”\n\t两个穿制服的面不改色耳语一番，稍年轻的那个咳嗽了两声，带着明显的装腔说道：\n\t“十九条人命可不是什么小事，所有知情不报都是隐瞒，会酿成特别严重的后果，请你务必——嗯哼——知无不言，言无不尽。”\n\t任何差点没晕过去。敢情警察怀疑她背负了十九条人命？\n\t很想解释的时候，发现自己只能只会说一句我不知道，任何知道，任何不知道。\n\t任何第一时间想起来自己在宿舍床边的桌子上写了半封信，那是在她发现男朋友劈腿后又在存款个位数的情况下被扣一个月补贴的当头，胡乱发了一通牢骚。不消说，任何在信中提到想杀人。\n\t任何的信，没有写收信人，但是任何心中有一个默认的收信人。当然不是她那负心的男朋友，而是那个给她讲火线零线和变压器的男同学。\n\t大概任何永远也不会理解，是那个男同学，给她完成了这个堪称“伟大”的心愿：\n\t\t\n\t\t这个月真惨，糟透了，没一件好事情。过几天就十九岁生日了，我就这么活\t了十九年，还没交够十九个男朋友。当我死的那一天，总该有十九个十九岁的男\t孩子陪我才好。贾史久三个字一共十八笔，他也就刚好活了十八笔。我能活到今\t天，不晓得是运气还是霉气呢。\n\t\t\t\n\t\t\t\t\t\t四\n\t贾史久他爸叫贾历长，不过贾历长的生命历史着实不长，十九岁不到就一命呜呼。贾历长倒不是因体弱多病罹患绝症而死，而是死在了坦克底下。贾史久知道他爸小时候老喜欢坦克了，所以觉得他爸能在最青春的年纪死于所爱，实乃是一种伟大。何况，贾史久他老妈当年十几岁挺个大肚子做了未嫁的寡妇，更是显出了贾历长的英雄气概。\n\t虽说贾史久从小没见过亲爸爸，但是后爸陆陆续续好几个，待他也好，逆来顺受，好吃好喝好玩招待。贾史久也给他妈争气，从小就是各种第一专业户。\n\t贾史久十三岁那年，有好事的邻居问他是不是他妈和中科院某科学家生的野种，要不咋这么聪明呢。贾史久没吭声。\n\t当晚半夜贾史久爬到邻居家，对供电线路做了点手脚，然后一身轻松爬回家一觉睡到天亮。第二天晌午的时候传来噩耗，邻居一家三口死于触电。\n\t这出乎贾史久的预料。本来只想教训一下那个满口跑野种的女家长的，不料买一送二。贾史久后来听说，女家长在厨房触电后男主人和小孩都跑过去扶人，所以全家跑阴曹地府一起吃午饭了。\n\t是他们愚蠢。贾史久这样想着，心中负罪感也就慢慢释然了。\n\t不过贾史久心中还是有些疙瘩，想要搬家，正好母亲改嫁，也就离开了这个时刻提醒着他血债的地方。搬家伴随着转学，也就是这年秋天，他作为插班生，认识了任何。\n\n\t\t\t\t\t\t五\n","slug":"Q10","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8a4000jc4xksgs4anih","content":"<h1 id=\"非死不可\"><a href=\"#非死不可\" class=\"headerlink\" title=\"非死不可\"></a>非死不可</h1><pre><code>                    一\n那天任何从工厂的流水线上下来，工作服一脱就去了工厂外面的一家网吧。收银台网管年轻稚嫩的脸，盯着任何掏出的身份证上那张同样年轻稚嫩的脸，看了许久许久，嘴里叼的香烟都要燃到牙齿上了。\n“有这么好看？快点，我队友还等着我呢。”任何的眼睛说不上大，可是凌厉。说话一急促的时候，淘气的几缕发丝就飘进了唇红齿白间。\n网管愣过神来，把身份证递还给了任何。\n任何接过身份证立马揣进兜里，四下探望，人声鼎沸，烟雾缭绕。任何随便找了一台电脑开始上网，和素未谋面的游戏情侣一起厮杀。任何一直眉头紧锁，第三把还没开始就关了游戏。然后她漫无目的地浏览起了门户网站。\n也不知道看了多少明星八卦再加多少搞笑段子，任何握鼠标的右手，再也没有那么勤奋地点点点滑滑滑了；任何那两弯好看的眉毛下面毛细血管突出的眼睛，眼白挤开了瞳孔。\n坐在她旁边的同样是一群稚气未脱的少年，他们头发染成各式奇特的颜色，敲键盘的手上一定有一枚不知是钻石还是玻璃还是塑料的戒指，以及一支刚好燃掉一半的香烟。\n任何斜眼看过去，他们手指下键盘的缝隙里，刚刚跌落的圆柱形的烟灰一瞬间就损失了形状，再也撑不起一根香烟的直挺，流露出其内心的空虚。\n                    二\n任何恢复意识的时候，一睁眼看到的不再是厂房宿舍上铺的床板，而是白得一清二楚的天花板。\n穿着白大褂的人走过来，而不是穿着蓝色工作服的主管。白大褂把任何的眼皮拨弄来拨弄去，用笔记下了什么就转身离开。\n任何知道自己在医院。可是想不起来自己为什么会在医院。所能回忆起的最近的场景，就是那根香烟，那根香烟，对，网管嘴里的那根，和坐在旁边上网的少年手指夹住的那根。\n应该是那根香烟点燃了整个网吧，嗯，低头就能看到满地凌乱的布线，抬头就能看见墙沿裸露的电线，不发生火灾就奇怪了。任何不由得要咧开嘴笑，大概就是在一年前，坐在她前面的那个男同学，给她讲火线零线和变压器，讲得眉飞色舞，任何一句也没听进去。她只是傻傻地看着他讲，不时跟着他的手势看看纸上排列整齐的线路。那种整齐感，是任何在一片废墟般的家里无法奢望的。\n后来看到图片上整齐划一的工厂流水线，任何跟回家探亲的表姐说，“嗯，带我去这里吧。”\n任何忽然感到嘴角强烈的撕裂感。疼，但不钻心，因为一口气就呼出去了那些不可述说的疼痛。\n                    三\n后来的情节发展出乎任何的意料，也出乎任何的理解。\n任何醒来第二天，就有两个警察跑来问话，问些稀奇古怪的话，任何只能一问三不知。\n警察无可奈何，结束了毫无“营养”的问话，义正言辞道：“在这件事上希望你不要有任何隐瞒，坦白从宽抗拒从严。”\n任何陡地怒了，“你以为我在隐瞒什么！？”\n两个穿制服的面不改色耳语一番，稍年轻的那个咳嗽了两声，带着明显的装腔说道：\n“十九条人命可不是什么小事，所有知情不报都是隐瞒，会酿成特别严重的后果，请你务必——嗯哼——知无不言，言无不尽。”\n任何差点没晕过去。敢情警察怀疑她背负了十九条人命？\n很想解释的时候，发现自己只能只会说一句我不知道，任何知道，任何不知道。\n任何第一时间想起来自己在宿舍床边的桌子上写了半封信，那是在她发现男朋友劈腿后又在存款个位数的情况下被扣一个月补贴的当头，胡乱发了一通牢骚。不消说，任何在信中提到想杀人。\n任何的信，没有写收信人，但是任何心中有一个默认的收信人。当然不是她那负心的男朋友，而是那个给她讲火线零线和变压器的男同学。\n大概任何永远也不会理解，是那个男同学，给她完成了这个堪称“伟大”的心愿：\n\n    这个月真惨，糟透了，没一件好事情。过几天就十九岁生日了，我就这么活    了十九年，还没交够十九个男朋友。当我死的那一天，总该有十九个十九岁的男    孩子陪我才好。贾史久三个字一共十八笔，他也就刚好活了十八笔。我能活到今    天，不晓得是运气还是霉气呢。\n\n                    四\n贾史久他爸叫贾历长，不过贾历长的生命历史着实不长，十九岁不到就一命呜呼。贾历长倒不是因体弱多病罹患绝症而死，而是死在了坦克底下。贾史久知道他爸小时候老喜欢坦克了，所以觉得他爸能在最青春的年纪死于所爱，实乃是一种伟大。何况，贾史久他老妈当年十几岁挺个大肚子做了未嫁的寡妇，更是显出了贾历长的英雄气概。\n虽说贾史久从小没见过亲爸爸，但是后爸陆陆续续好几个，待他也好，逆来顺受，好吃好喝好玩招待。贾史久也给他妈争气，从小就是各种第一专业户。\n贾史久十三岁那年，有好事的邻居问他是不是他妈和中科院某科学家生的野种，要不咋这么聪明呢。贾史久没吭声。\n当晚半夜贾史久爬到邻居家，对供电线路做了点手脚，然后一身轻松爬回家一觉睡到天亮。第二天晌午的时候传来噩耗，邻居一家三口死于触电。\n这出乎贾史久的预料。本来只想教训一下那个满口跑野种的女家长的，不料买一送二。贾史久后来听说，女家长在厨房触电后男主人和小孩都跑过去扶人，所以全家跑阴曹地府一起吃午饭了。\n是他们愚蠢。贾史久这样想着，心中负罪感也就慢慢释然了。\n不过贾史久心中还是有些疙瘩，想要搬家，正好母亲改嫁，也就离开了这个时刻提醒着他血债的地方。搬家伴随着转学，也就是这年秋天，他作为插班生，认识了任何。\n\n                    五\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"非死不可\"><a href=\"#非死不可\" class=\"headerlink\" title=\"非死不可\"></a>非死不可</h1><pre><code>                    一\n那天任何从工厂的流水线上下来，工作服一脱就去了工厂外面的一家网吧。收银台网管年轻稚嫩的脸，盯着任何掏出的身份证上那张同样年轻稚嫩的脸，看了许久许久，嘴里叼的香烟都要燃到牙齿上了。\n“有这么好看？快点，我队友还等着我呢。”任何的眼睛说不上大，可是凌厉。说话一急促的时候，淘气的几缕发丝就飘进了唇红齿白间。\n网管愣过神来，把身份证递还给了任何。\n任何接过身份证立马揣进兜里，四下探望，人声鼎沸，烟雾缭绕。任何随便找了一台电脑开始上网，和素未谋面的游戏情侣一起厮杀。任何一直眉头紧锁，第三把还没开始就关了游戏。然后她漫无目的地浏览起了门户网站。\n也不知道看了多少明星八卦再加多少搞笑段子，任何握鼠标的右手，再也没有那么勤奋地点点点滑滑滑了；任何那两弯好看的眉毛下面毛细血管突出的眼睛，眼白挤开了瞳孔。\n坐在她旁边的同样是一群稚气未脱的少年，他们头发染成各式奇特的颜色，敲键盘的手上一定有一枚不知是钻石还是玻璃还是塑料的戒指，以及一支刚好燃掉一半的香烟。\n任何斜眼看过去，他们手指下键盘的缝隙里，刚刚跌落的圆柱形的烟灰一瞬间就损失了形状，再也撑不起一根香烟的直挺，流露出其内心的空虚。\n                    二\n任何恢复意识的时候，一睁眼看到的不再是厂房宿舍上铺的床板，而是白得一清二楚的天花板。\n穿着白大褂的人走过来，而不是穿着蓝色工作服的主管。白大褂把任何的眼皮拨弄来拨弄去，用笔记下了什么就转身离开。\n任何知道自己在医院。可是想不起来自己为什么会在医院。所能回忆起的最近的场景，就是那根香烟，那根香烟，对，网管嘴里的那根，和坐在旁边上网的少年手指夹住的那根。\n应该是那根香烟点燃了整个网吧，嗯，低头就能看到满地凌乱的布线，抬头就能看见墙沿裸露的电线，不发生火灾就奇怪了。任何不由得要咧开嘴笑，大概就是在一年前，坐在她前面的那个男同学，给她讲火线零线和变压器，讲得眉飞色舞，任何一句也没听进去。她只是傻傻地看着他讲，不时跟着他的手势看看纸上排列整齐的线路。那种整齐感，是任何在一片废墟般的家里无法奢望的。\n后来看到图片上整齐划一的工厂流水线，任何跟回家探亲的表姐说，“嗯，带我去这里吧。”\n任何忽然感到嘴角强烈的撕裂感。疼，但不钻心，因为一口气就呼出去了那些不可述说的疼痛。\n                    三\n后来的情节发展出乎任何的意料，也出乎任何的理解。\n任何醒来第二天，就有两个警察跑来问话，问些稀奇古怪的话，任何只能一问三不知。\n警察无可奈何，结束了毫无“营养”的问话，义正言辞道：“在这件事上希望你不要有任何隐瞒，坦白从宽抗拒从严。”\n任何陡地怒了，“你以为我在隐瞒什么！？”\n两个穿制服的面不改色耳语一番，稍年轻的那个咳嗽了两声，带着明显的装腔说道：\n“十九条人命可不是什么小事，所有知情不报都是隐瞒，会酿成特别严重的后果，请你务必——嗯哼——知无不言，言无不尽。”\n任何差点没晕过去。敢情警察怀疑她背负了十九条人命？\n很想解释的时候，发现自己只能只会说一句我不知道，任何知道，任何不知道。\n任何第一时间想起来自己在宿舍床边的桌子上写了半封信，那是在她发现男朋友劈腿后又在存款个位数的情况下被扣一个月补贴的当头，胡乱发了一通牢骚。不消说，任何在信中提到想杀人。\n任何的信，没有写收信人，但是任何心中有一个默认的收信人。当然不是她那负心的男朋友，而是那个给她讲火线零线和变压器的男同学。\n大概任何永远也不会理解，是那个男同学，给她完成了这个堪称“伟大”的心愿：\n\n    这个月真惨，糟透了，没一件好事情。过几天就十九岁生日了，我就这么活    了十九年，还没交够十九个男朋友。当我死的那一天，总该有十九个十九岁的男    孩子陪我才好。贾史久三个字一共十八笔，他也就刚好活了十八笔。我能活到今    天，不晓得是运气还是霉气呢。\n\n                    四\n贾史久他爸叫贾历长，不过贾历长的生命历史着实不长，十九岁不到就一命呜呼。贾历长倒不是因体弱多病罹患绝症而死，而是死在了坦克底下。贾史久知道他爸小时候老喜欢坦克了，所以觉得他爸能在最青春的年纪死于所爱，实乃是一种伟大。何况，贾史久他老妈当年十几岁挺个大肚子做了未嫁的寡妇，更是显出了贾历长的英雄气概。\n虽说贾史久从小没见过亲爸爸，但是后爸陆陆续续好几个，待他也好，逆来顺受，好吃好喝好玩招待。贾史久也给他妈争气，从小就是各种第一专业户。\n贾史久十三岁那年，有好事的邻居问他是不是他妈和中科院某科学家生的野种，要不咋这么聪明呢。贾史久没吭声。\n当晚半夜贾史久爬到邻居家，对供电线路做了点手脚，然后一身轻松爬回家一觉睡到天亮。第二天晌午的时候传来噩耗，邻居一家三口死于触电。\n这出乎贾史久的预料。本来只想教训一下那个满口跑野种的女家长的，不料买一送二。贾史久后来听说，女家长在厨房触电后男主人和小孩都跑过去扶人，所以全家跑阴曹地府一起吃午饭了。\n是他们愚蠢。贾史久这样想着，心中负罪感也就慢慢释然了。\n不过贾史久心中还是有些疙瘩，想要搬家，正好母亲改嫁，也就离开了这个时刻提醒着他血债的地方。搬家伴随着转学，也就是这年秋天，他作为插班生，认识了任何。\n\n                    五\n</code></pre>"},{"date":"2017-06-06T15:06:19.000Z","status":"public","title":"WebQQ与聊天机器人的技术细节","keywords":["Python","QQ","聊天","机器人"],"_content":"\n\n# 登录模块\n`class Login(HttpClient)`\n\n1.  类初始化\n```python\ndef __init__(self, vpath,qq_number=0,params=None):\n    self.initTime = time.time()\n    self.VPath = vpath  # QRCode保存路径\n    self.UI_PTLOGIN2_URL = params.get('UI_PTLOGIN2_URL', '')\n    self.QQ_LOGIN_URL =  params.get('QQ_LOGIN_URL')\n    self.ClientID = params.get('ClinetID')\n    self.PSessionID = params.get('PSessionID')\n    self.QQ_GROUP_API_URL = params.get('QQ_GROUP_API_URL')\n    self.REFERER = params.get('REFERER')\n    self.MaxTryTime = params.get('MaxTryTime',5)\n\n    AdminQQ = int(qq_number)\n\n    # 1. 从 'http://w.qq.com/' get\n\n    # 2. 从 UI_PTLOGIN2_URL = 'https://ui.ptlogin2.qq.com/cgi-bin/login?daid=164&target=self&style=16&mibao_css=m_webqq&appid=501004106&enable_qlogin=0&no_verifyimg=1&s_url=http%3A%2F%2Fw.own_qq_number.com%2Fproxy.html&f_url=loginerroralert&strong_login=1&login_state=10&t=20131024001' 获取登录页面（以w.qq.com为Referer头部）， 从login_html中获取APPID,SIGN（登录证书),JS_VERSION,MiBaoCss(?)\n\n    # 3. 从login_html中获取mibao_css\n\n    # 4. 开始时间 datetime.datetime.utcnow() ==》 millis\n\n    # 5. 尝试MaxTryTime次：下载登录验证二维码，获取cookie，从QQ_LOGIN_URL = 'https://ssl.ptlogin2.qq.com/ptqrlogin?ptqrtoken={0}&webqq_type=10&remember_uin=1&login2qq=1&aid={1}&u1=http%3A%2F%2Fw.qq.com%2Fproxy.html%3Flogin2qq%3D1%26webqq_type%3D10&ptredirect=0&ptlang=2052&daid=164&from_ui=1&pttype=1&dumy=&fp=loginerroralert&action=0-0-{2}&mibao_css={3}&t=1&g=1&js_type=0&js_ver={4}&login_sig={5}&pt_randsalt=2' 登录，得到get的response，检查是否扫码（登录）\n    #    `login_html = self.Get((self.QQ_LOGIN_URL).format(util.getQRtoken(QRSig), APPID, util.date_to_millis(datetime.datetime.utcnow()) - StarTime, MiBaoCss, JS_VERSION, SIGN),Refer=self.UI_PTLOGIN2_URL)`\n\n    # 6. 扫码后删除二维码图片\n\n    # 7. 记录登录账号的昵称\n\n    # 8. 从cookie中得到PTWebQQ\n\n    # 9. 先后post,get两个url，验证是否登录成功。\n\n    # 10. 从response中获取VFWebQQ，MyUIN，并更新self.PSessionID\n\n    # 11. 随机生成msgId，\n```","source":"_posts/WebQQ与聊天机器人的技术细节.md","raw":"---\ndate: 2017-06-06 23:06:19\nstatus: public\ntitle: WebQQ与聊天机器人的技术细节\nkeywords: \n- Python \n- QQ\n- 聊天\n- 机器人\ntags:\n- Python \n- QQ\n- 聊天\n- 机器人\ncategories: 好玩\n \n---\n\n\n# 登录模块\n`class Login(HttpClient)`\n\n1.  类初始化\n```python\ndef __init__(self, vpath,qq_number=0,params=None):\n    self.initTime = time.time()\n    self.VPath = vpath  # QRCode保存路径\n    self.UI_PTLOGIN2_URL = params.get('UI_PTLOGIN2_URL', '')\n    self.QQ_LOGIN_URL =  params.get('QQ_LOGIN_URL')\n    self.ClientID = params.get('ClinetID')\n    self.PSessionID = params.get('PSessionID')\n    self.QQ_GROUP_API_URL = params.get('QQ_GROUP_API_URL')\n    self.REFERER = params.get('REFERER')\n    self.MaxTryTime = params.get('MaxTryTime',5)\n\n    AdminQQ = int(qq_number)\n\n    # 1. 从 'http://w.qq.com/' get\n\n    # 2. 从 UI_PTLOGIN2_URL = 'https://ui.ptlogin2.qq.com/cgi-bin/login?daid=164&target=self&style=16&mibao_css=m_webqq&appid=501004106&enable_qlogin=0&no_verifyimg=1&s_url=http%3A%2F%2Fw.own_qq_number.com%2Fproxy.html&f_url=loginerroralert&strong_login=1&login_state=10&t=20131024001' 获取登录页面（以w.qq.com为Referer头部）， 从login_html中获取APPID,SIGN（登录证书),JS_VERSION,MiBaoCss(?)\n\n    # 3. 从login_html中获取mibao_css\n\n    # 4. 开始时间 datetime.datetime.utcnow() ==》 millis\n\n    # 5. 尝试MaxTryTime次：下载登录验证二维码，获取cookie，从QQ_LOGIN_URL = 'https://ssl.ptlogin2.qq.com/ptqrlogin?ptqrtoken={0}&webqq_type=10&remember_uin=1&login2qq=1&aid={1}&u1=http%3A%2F%2Fw.qq.com%2Fproxy.html%3Flogin2qq%3D1%26webqq_type%3D10&ptredirect=0&ptlang=2052&daid=164&from_ui=1&pttype=1&dumy=&fp=loginerroralert&action=0-0-{2}&mibao_css={3}&t=1&g=1&js_type=0&js_ver={4}&login_sig={5}&pt_randsalt=2' 登录，得到get的response，检查是否扫码（登录）\n    #    `login_html = self.Get((self.QQ_LOGIN_URL).format(util.getQRtoken(QRSig), APPID, util.date_to_millis(datetime.datetime.utcnow()) - StarTime, MiBaoCss, JS_VERSION, SIGN),Refer=self.UI_PTLOGIN2_URL)`\n\n    # 6. 扫码后删除二维码图片\n\n    # 7. 记录登录账号的昵称\n\n    # 8. 从cookie中得到PTWebQQ\n\n    # 9. 先后post,get两个url，验证是否登录成功。\n\n    # 10. 从response中获取VFWebQQ，MyUIN，并更新self.PSessionID\n\n    # 11. 随机生成msgId，\n```","slug":"WebQQ与聊天机器人的技术细节","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8a6000oc4xkkz8sqxr2","content":"<h1 id=\"登录模块\"><a href=\"#登录模块\" class=\"headerlink\" title=\"登录模块\"></a>登录模块</h1><p><code>class Login(HttpClient)</code></p>\n<ol>\n<li>类初始化<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, vpath,qq_number=<span class=\"number\">0</span>,params=None)</span>:</span></span><br><span class=\"line\">    self.initTime = time.time()</span><br><span class=\"line\">    self.VPath = vpath  <span class=\"comment\"># QRCode保存路径</span></span><br><span class=\"line\">    self.UI_PTLOGIN2_URL = params.get(<span class=\"string\">'UI_PTLOGIN2_URL'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    self.QQ_LOGIN_URL =  params.get(<span class=\"string\">'QQ_LOGIN_URL'</span>)</span><br><span class=\"line\">    self.ClientID = params.get(<span class=\"string\">'ClinetID'</span>)</span><br><span class=\"line\">    self.PSessionID = params.get(<span class=\"string\">'PSessionID'</span>)</span><br><span class=\"line\">    self.QQ_GROUP_API_URL = params.get(<span class=\"string\">'QQ_GROUP_API_URL'</span>)</span><br><span class=\"line\">    self.REFERER = params.get(<span class=\"string\">'REFERER'</span>)</span><br><span class=\"line\">    self.MaxTryTime = params.get(<span class=\"string\">'MaxTryTime'</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    AdminQQ = int(qq_number)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1. 从 'http://w.qq.com/' get</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. 从 UI_PTLOGIN2_URL = 'https://ui.ptlogin2.qq.com/cgi-bin/login?daid=164&amp;target=self&amp;style=16&amp;mibao_css=m_webqq&amp;appid=501004106&amp;enable_qlogin=0&amp;no_verifyimg=1&amp;s_url=http%3A%2F%2Fw.own_qq_number.com%2Fproxy.html&amp;f_url=loginerroralert&amp;strong_login=1&amp;login_state=10&amp;t=20131024001' 获取登录页面（以w.qq.com为Referer头部）， 从login_html中获取APPID,SIGN（登录证书),JS_VERSION,MiBaoCss(?)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3. 从login_html中获取mibao_css</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4. 开始时间 datetime.datetime.utcnow() ==》 millis</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5. 尝试MaxTryTime次：下载登录验证二维码，获取cookie，从QQ_LOGIN_URL = 'https://ssl.ptlogin2.qq.com/ptqrlogin?ptqrtoken=&#123;0&#125;&amp;webqq_type=10&amp;remember_uin=1&amp;login2qq=1&amp;aid=&#123;1&#125;&amp;u1=http%3A%2F%2Fw.qq.com%2Fproxy.html%3Flogin2qq%3D1%26webqq_type%3D10&amp;ptredirect=0&amp;ptlang=2052&amp;daid=164&amp;from_ui=1&amp;pttype=1&amp;dumy=&amp;fp=loginerroralert&amp;action=0-0-&#123;2&#125;&amp;mibao_css=&#123;3&#125;&amp;t=1&amp;g=1&amp;js_type=0&amp;js_ver=&#123;4&#125;&amp;login_sig=&#123;5&#125;&amp;pt_randsalt=2' 登录，得到get的response，检查是否扫码（登录）</span></span><br><span class=\"line\">    <span class=\"comment\">#    `login_html = self.Get((self.QQ_LOGIN_URL).format(util.getQRtoken(QRSig), APPID, util.date_to_millis(datetime.datetime.utcnow()) - StarTime, MiBaoCss, JS_VERSION, SIGN),Refer=self.UI_PTLOGIN2_URL)`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6. 扫码后删除二维码图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 7. 记录登录账号的昵称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 8. 从cookie中得到PTWebQQ</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 9. 先后post,get两个url，验证是否登录成功。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 10. 从response中获取VFWebQQ，MyUIN，并更新self.PSessionID</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 11. 随机生成msgId，</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"登录模块\"><a href=\"#登录模块\" class=\"headerlink\" title=\"登录模块\"></a>登录模块</h1><p><code>class Login(HttpClient)</code></p>\n<ol>\n<li>类初始化<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, vpath,qq_number=<span class=\"number\">0</span>,params=None)</span>:</span></span><br><span class=\"line\">    self.initTime = time.time()</span><br><span class=\"line\">    self.VPath = vpath  <span class=\"comment\"># QRCode保存路径</span></span><br><span class=\"line\">    self.UI_PTLOGIN2_URL = params.get(<span class=\"string\">'UI_PTLOGIN2_URL'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    self.QQ_LOGIN_URL =  params.get(<span class=\"string\">'QQ_LOGIN_URL'</span>)</span><br><span class=\"line\">    self.ClientID = params.get(<span class=\"string\">'ClinetID'</span>)</span><br><span class=\"line\">    self.PSessionID = params.get(<span class=\"string\">'PSessionID'</span>)</span><br><span class=\"line\">    self.QQ_GROUP_API_URL = params.get(<span class=\"string\">'QQ_GROUP_API_URL'</span>)</span><br><span class=\"line\">    self.REFERER = params.get(<span class=\"string\">'REFERER'</span>)</span><br><span class=\"line\">    self.MaxTryTime = params.get(<span class=\"string\">'MaxTryTime'</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    AdminQQ = int(qq_number)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1. 从 'http://w.qq.com/' get</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. 从 UI_PTLOGIN2_URL = 'https://ui.ptlogin2.qq.com/cgi-bin/login?daid=164&amp;target=self&amp;style=16&amp;mibao_css=m_webqq&amp;appid=501004106&amp;enable_qlogin=0&amp;no_verifyimg=1&amp;s_url=http%3A%2F%2Fw.own_qq_number.com%2Fproxy.html&amp;f_url=loginerroralert&amp;strong_login=1&amp;login_state=10&amp;t=20131024001' 获取登录页面（以w.qq.com为Referer头部）， 从login_html中获取APPID,SIGN（登录证书),JS_VERSION,MiBaoCss(?)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3. 从login_html中获取mibao_css</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4. 开始时间 datetime.datetime.utcnow() ==》 millis</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 5. 尝试MaxTryTime次：下载登录验证二维码，获取cookie，从QQ_LOGIN_URL = 'https://ssl.ptlogin2.qq.com/ptqrlogin?ptqrtoken=&#123;0&#125;&amp;webqq_type=10&amp;remember_uin=1&amp;login2qq=1&amp;aid=&#123;1&#125;&amp;u1=http%3A%2F%2Fw.qq.com%2Fproxy.html%3Flogin2qq%3D1%26webqq_type%3D10&amp;ptredirect=0&amp;ptlang=2052&amp;daid=164&amp;from_ui=1&amp;pttype=1&amp;dumy=&amp;fp=loginerroralert&amp;action=0-0-&#123;2&#125;&amp;mibao_css=&#123;3&#125;&amp;t=1&amp;g=1&amp;js_type=0&amp;js_ver=&#123;4&#125;&amp;login_sig=&#123;5&#125;&amp;pt_randsalt=2' 登录，得到get的response，检查是否扫码（登录）</span></span><br><span class=\"line\">    <span class=\"comment\">#    `login_html = self.Get((self.QQ_LOGIN_URL).format(util.getQRtoken(QRSig), APPID, util.date_to_millis(datetime.datetime.utcnow()) - StarTime, MiBaoCss, JS_VERSION, SIGN),Refer=self.UI_PTLOGIN2_URL)`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 6. 扫码后删除二维码图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 7. 记录登录账号的昵称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 8. 从cookie中得到PTWebQQ</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 9. 先后post,get两个url，验证是否登录成功。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 10. 从response中获取VFWebQQ，MyUIN，并更新self.PSessionID</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 11. 随机生成msgId，</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"date":"2017-06-06T15:06:19.000Z","status":"public","title":"WebQQ与聊天机器人的玩法","keywords":["Python","QQ","聊天","机器人"],"_content":"\n\n# QQ小黄鸡VPS挂机版\n\n[![Build Status](https://travis-ci.org/zeruniverse/QQRobot.svg?branch=master)](https://travis-ci.org/zeruniverse/QQRobot)\n[![Code Health](https://landscape.io/github/zeruniverse/QQRobot/master/landscape.svg?style=flat)](https://landscape.io/github/zeruniverse/QQRobot/master)\n![Release](https://img.shields.io/github/release/zeruniverse/QQRobot.svg) \n![Environment](https://img.shields.io/badge/python-2.6%2C%202.7-blue.svg) \n![License](https://img.shields.io/github/license/zeruniverse/QQRobot.svg) \n\n该项目修改自SmartQQBOT这一项目，支持在VPS下nohup命令挂机。QQ协议说明请参考原项目。\n\n请帮忙分析Android QQ协议：此项目现已稳定，在更新协议前不会有大更新。希望有人能跟我一起搞手机QQ协议，SmartQQ协议稳定性不是很理想。\n\n重要：群聊被TX认为是极度危险的行为，因此如果账号被怀疑被盗号（异地登陆），群聊消息会发不出去。表现为程序能收到群聊消息，群聊消息发送返回值为发送成功，但其他群成员无法看到您发出的消息。大约登陆10分钟后您会收到QQ提醒提示账号被盗，要求改密码，同时账号被临时冻结。不知为何该程序刚运行时总是被怀疑异地登陆，当您重复解冻3次后（就是改密码），TX基本就不再怀疑您了，一般一次能稳定挂机2-3天。强烈推荐您用小号挂QQ小黄鸡！\n\nThis project is a chatting robot in QQ, implemented in Python. The robot uses Artificial Intelligent API to generate response. QQ is a popular instant chatting service in China, which is similar to Facebook Messenger. The robot supports group chatting and private chatting and should be only used for fun.\n\nHere is a similar project used to keep QQ account online with the function to record messages and forward to your E-mail.\n\n\n登陆时采用QQ安全中心的二维码做为登陆条件, 不需要在程序里输入QQ号码及QQ密码。QQ自动回复私聊（无群聊功能）及留言邮件提醒版本请看这里。\n\n\n## 如何使用\n\n从http://www.tuling123.com/openapi/ 申请一个API KEY(免费，5000次/天)， 贴到QQBot.py的第36行 (测试KEY：c7c5abbc9ec9cad3a63bde71d17e3c2c)\n修改groupfollow.txt,将需要小黄鸡回复的群的群名写入(小黄鸡必须为群成员),每行一个群名，请不要打多余的空格。（新版WEBQQ已移除获取群号的接口，输入中文群名请务必使用UTF-8编码）\nnohup python2 QQBot.py >qbot.log&\nls\n若出现v.png则用QQ安全中心扫描，否则继续ls\ncat log.log可以输出运行LOG\n强烈建议使用小号挂小黄鸡，已知QQ会临时封禁机器人的临时对话回复和群回复，原理未知，每次封禁约为10分钟。表现为发送消息返回值retcode 为 0 但其他人无法看到。长时间挂机会导致QQ被冻结错误，QQ安全中心提示发布不良信息\n据反馈此AI平台回复中带有少量广告。。。(如问iphone6价格回复小米799)\n功能\n\n注：以下命令皆是在QQ中发送，群聊命令发送到所在群中\n\n关于及帮助，在群聊中发送!about\n\n群聊智能回复，在群中通过发送!ai 问题语句，则机器人向AI平台请求问题的回复并回复到群，带有!ai关键字时优先触发此功能\n\n私聊智能回复，对于收到的私聊，机器人向AI平台请求该聊天记录的回复并回复给消息发送者\n\n群聊学习功能，类似于小黄鸡，在群中通过发送!learn {ha}{哈哈}语句，则机器人检测到发言中包含“ha”时将自动回复“哈哈”。!delete {ha}{哈哈}可以删除该内容。学习内容会自动储存在database.群号.save文件。!deleteall可删除该群所有记录。注意learn和{之间有空格，{}与{}之间没有。\n\n群聊复读功能，检测到群聊中连续两个回复内容相同，将自动复读该内容1次。\n\n群聊关注功能，使用命令!follow {QQ昵称}!可以使机器人复读此人所有发言（除命令外）使用命令!unfollow {QQ昵称}!解除关注。例如 !follow 卖火柴的小女孩!。{QQ昵称}处可使用\"me\"来快速关注与解除关注自己，例：!follow me!\n\n私聊直接聊天即可，不需要加任何前缀。\n\n\n## Refs\nhttps://github.com/b3log/xiaov\n\n- https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api\n- http://www.scienjus.com/webqq-analysis-2/","source":"_posts/WebQQ与聊天机器人的玩法.md","raw":"---\ndate: 2017-06-06 23:06:19\nstatus: public\ntitle: WebQQ与聊天机器人的玩法\nkeywords: \n- Python \n- QQ\n- 聊天\n- 机器人\ntags:\n- Python \n- QQ\n- 聊天\n- 机器人\ncategories: 好玩\n \n---\n\n\n# QQ小黄鸡VPS挂机版\n\n[![Build Status](https://travis-ci.org/zeruniverse/QQRobot.svg?branch=master)](https://travis-ci.org/zeruniverse/QQRobot)\n[![Code Health](https://landscape.io/github/zeruniverse/QQRobot/master/landscape.svg?style=flat)](https://landscape.io/github/zeruniverse/QQRobot/master)\n![Release](https://img.shields.io/github/release/zeruniverse/QQRobot.svg) \n![Environment](https://img.shields.io/badge/python-2.6%2C%202.7-blue.svg) \n![License](https://img.shields.io/github/license/zeruniverse/QQRobot.svg) \n\n该项目修改自SmartQQBOT这一项目，支持在VPS下nohup命令挂机。QQ协议说明请参考原项目。\n\n请帮忙分析Android QQ协议：此项目现已稳定，在更新协议前不会有大更新。希望有人能跟我一起搞手机QQ协议，SmartQQ协议稳定性不是很理想。\n\n重要：群聊被TX认为是极度危险的行为，因此如果账号被怀疑被盗号（异地登陆），群聊消息会发不出去。表现为程序能收到群聊消息，群聊消息发送返回值为发送成功，但其他群成员无法看到您发出的消息。大约登陆10分钟后您会收到QQ提醒提示账号被盗，要求改密码，同时账号被临时冻结。不知为何该程序刚运行时总是被怀疑异地登陆，当您重复解冻3次后（就是改密码），TX基本就不再怀疑您了，一般一次能稳定挂机2-3天。强烈推荐您用小号挂QQ小黄鸡！\n\nThis project is a chatting robot in QQ, implemented in Python. The robot uses Artificial Intelligent API to generate response. QQ is a popular instant chatting service in China, which is similar to Facebook Messenger. The robot supports group chatting and private chatting and should be only used for fun.\n\nHere is a similar project used to keep QQ account online with the function to record messages and forward to your E-mail.\n\n\n登陆时采用QQ安全中心的二维码做为登陆条件, 不需要在程序里输入QQ号码及QQ密码。QQ自动回复私聊（无群聊功能）及留言邮件提醒版本请看这里。\n\n\n## 如何使用\n\n从http://www.tuling123.com/openapi/ 申请一个API KEY(免费，5000次/天)， 贴到QQBot.py的第36行 (测试KEY：c7c5abbc9ec9cad3a63bde71d17e3c2c)\n修改groupfollow.txt,将需要小黄鸡回复的群的群名写入(小黄鸡必须为群成员),每行一个群名，请不要打多余的空格。（新版WEBQQ已移除获取群号的接口，输入中文群名请务必使用UTF-8编码）\nnohup python2 QQBot.py >qbot.log&\nls\n若出现v.png则用QQ安全中心扫描，否则继续ls\ncat log.log可以输出运行LOG\n强烈建议使用小号挂小黄鸡，已知QQ会临时封禁机器人的临时对话回复和群回复，原理未知，每次封禁约为10分钟。表现为发送消息返回值retcode 为 0 但其他人无法看到。长时间挂机会导致QQ被冻结错误，QQ安全中心提示发布不良信息\n据反馈此AI平台回复中带有少量广告。。。(如问iphone6价格回复小米799)\n功能\n\n注：以下命令皆是在QQ中发送，群聊命令发送到所在群中\n\n关于及帮助，在群聊中发送!about\n\n群聊智能回复，在群中通过发送!ai 问题语句，则机器人向AI平台请求问题的回复并回复到群，带有!ai关键字时优先触发此功能\n\n私聊智能回复，对于收到的私聊，机器人向AI平台请求该聊天记录的回复并回复给消息发送者\n\n群聊学习功能，类似于小黄鸡，在群中通过发送!learn {ha}{哈哈}语句，则机器人检测到发言中包含“ha”时将自动回复“哈哈”。!delete {ha}{哈哈}可以删除该内容。学习内容会自动储存在database.群号.save文件。!deleteall可删除该群所有记录。注意learn和{之间有空格，{}与{}之间没有。\n\n群聊复读功能，检测到群聊中连续两个回复内容相同，将自动复读该内容1次。\n\n群聊关注功能，使用命令!follow {QQ昵称}!可以使机器人复读此人所有发言（除命令外）使用命令!unfollow {QQ昵称}!解除关注。例如 !follow 卖火柴的小女孩!。{QQ昵称}处可使用\"me\"来快速关注与解除关注自己，例：!follow me!\n\n私聊直接聊天即可，不需要加任何前缀。\n\n\n## Refs\nhttps://github.com/b3log/xiaov\n\n- https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api\n- http://www.scienjus.com/webqq-analysis-2/","slug":"WebQQ与聊天机器人的玩法","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8a8000pc4xkomw4g0l8","content":"<h1 id=\"QQ小黄鸡VPS挂机版\"><a href=\"#QQ小黄鸡VPS挂机版\" class=\"headerlink\" title=\"QQ小黄鸡VPS挂机版\"></a>QQ小黄鸡VPS挂机版</h1><p><a href=\"https://travis-ci.org/zeruniverse/QQRobot\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/zeruniverse/QQRobot.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://landscape.io/github/zeruniverse/QQRobot/master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://landscape.io/github/zeruniverse/QQRobot/master/landscape.svg?style=flat\" alt=\"Code Health\"></a><br><img src=\"https://img.shields.io/github/release/zeruniverse/QQRobot.svg\" alt=\"Release\"><br><img src=\"https://img.shields.io/badge/python-2.6%2C%202.7-blue.svg\" alt=\"Environment\"><br><img src=\"https://img.shields.io/github/license/zeruniverse/QQRobot.svg\" alt=\"License\"> </p>\n<p>该项目修改自SmartQQBOT这一项目，支持在VPS下nohup命令挂机。QQ协议说明请参考原项目。</p>\n<p>请帮忙分析Android QQ协议：此项目现已稳定，在更新协议前不会有大更新。希望有人能跟我一起搞手机QQ协议，SmartQQ协议稳定性不是很理想。</p>\n<p>重要：群聊被TX认为是极度危险的行为，因此如果账号被怀疑被盗号（异地登陆），群聊消息会发不出去。表现为程序能收到群聊消息，群聊消息发送返回值为发送成功，但其他群成员无法看到您发出的消息。大约登陆10分钟后您会收到QQ提醒提示账号被盗，要求改密码，同时账号被临时冻结。不知为何该程序刚运行时总是被怀疑异地登陆，当您重复解冻3次后（就是改密码），TX基本就不再怀疑您了，一般一次能稳定挂机2-3天。强烈推荐您用小号挂QQ小黄鸡！</p>\n<p>This project is a chatting robot in QQ, implemented in Python. The robot uses Artificial Intelligent API to generate response. QQ is a popular instant chatting service in China, which is similar to Facebook Messenger. The robot supports group chatting and private chatting and should be only used for fun.</p>\n<p>Here is a similar project used to keep QQ account online with the function to record messages and forward to your E-mail.</p>\n<p>登陆时采用QQ安全中心的二维码做为登陆条件, 不需要在程序里输入QQ号码及QQ密码。QQ自动回复私聊（无群聊功能）及留言邮件提醒版本请看这里。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>从<a href=\"http://www.tuling123.com/openapi/\" target=\"_blank\" rel=\"noopener\">http://www.tuling123.com/openapi/</a> 申请一个API KEY(免费，5000次/天)， 贴到QQBot.py的第36行 (测试KEY：c7c5abbc9ec9cad3a63bde71d17e3c2c)<br>修改groupfollow.txt,将需要小黄鸡回复的群的群名写入(小黄鸡必须为群成员),每行一个群名，请不要打多余的空格。（新版WEBQQ已移除获取群号的接口，输入中文群名请务必使用UTF-8编码）<br>nohup python2 QQBot.py &gt;qbot.log&amp;<br>ls<br>若出现v.png则用QQ安全中心扫描，否则继续ls<br>cat log.log可以输出运行LOG<br>强烈建议使用小号挂小黄鸡，已知QQ会临时封禁机器人的临时对话回复和群回复，原理未知，每次封禁约为10分钟。表现为发送消息返回值retcode 为 0 但其他人无法看到。长时间挂机会导致QQ被冻结错误，QQ安全中心提示发布不良信息<br>据反馈此AI平台回复中带有少量广告。。。(如问iphone6价格回复小米799)<br>功能</p>\n<p>注：以下命令皆是在QQ中发送，群聊命令发送到所在群中</p>\n<p>关于及帮助，在群聊中发送!about</p>\n<p>群聊智能回复，在群中通过发送!ai 问题语句，则机器人向AI平台请求问题的回复并回复到群，带有!ai关键字时优先触发此功能</p>\n<p>私聊智能回复，对于收到的私聊，机器人向AI平台请求该聊天记录的回复并回复给消息发送者</p>\n<p>群聊学习功能，类似于小黄鸡，在群中通过发送!learn {ha}{哈哈}语句，则机器人检测到发言中包含“ha”时将自动回复“哈哈”。!delete {ha}{哈哈}可以删除该内容。学习内容会自动储存在database.群号.save文件。!deleteall可删除该群所有记录。注意learn和{之间有空格，{}与{}之间没有。</p>\n<p>群聊复读功能，检测到群聊中连续两个回复内容相同，将自动复读该内容1次。</p>\n<p>群聊关注功能，使用命令!follow {QQ昵称}!可以使机器人复读此人所有发言（除命令外）使用命令!unfollow {QQ昵称}!解除关注。例如 !follow 卖火柴的小女孩!。{QQ昵称}处可使用”me”来快速关注与解除关注自己，例：!follow me!</p>\n<p>私聊直接聊天即可，不需要加任何前缀。</p>\n<h2 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h2><p><a href=\"https://github.com/b3log/xiaov\" target=\"_blank\" rel=\"noopener\">https://github.com/b3log/xiaov</a></p>\n<ul>\n<li><a href=\"https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api\" target=\"_blank\" rel=\"noopener\">https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api</a></li>\n<li><a href=\"http://www.scienjus.com/webqq-analysis-2/\" target=\"_blank\" rel=\"noopener\">http://www.scienjus.com/webqq-analysis-2/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"QQ小黄鸡VPS挂机版\"><a href=\"#QQ小黄鸡VPS挂机版\" class=\"headerlink\" title=\"QQ小黄鸡VPS挂机版\"></a>QQ小黄鸡VPS挂机版</h1><p><a href=\"https://travis-ci.org/zeruniverse/QQRobot\" target=\"_blank\" rel=\"noopener\"><img src=\"https://travis-ci.org/zeruniverse/QQRobot.svg?branch=master\" alt=\"Build Status\"></a><br><a href=\"https://landscape.io/github/zeruniverse/QQRobot/master\" target=\"_blank\" rel=\"noopener\"><img src=\"https://landscape.io/github/zeruniverse/QQRobot/master/landscape.svg?style=flat\" alt=\"Code Health\"></a><br><img src=\"https://img.shields.io/github/release/zeruniverse/QQRobot.svg\" alt=\"Release\"><br><img src=\"https://img.shields.io/badge/python-2.6%2C%202.7-blue.svg\" alt=\"Environment\"><br><img src=\"https://img.shields.io/github/license/zeruniverse/QQRobot.svg\" alt=\"License\"> </p>\n<p>该项目修改自SmartQQBOT这一项目，支持在VPS下nohup命令挂机。QQ协议说明请参考原项目。</p>\n<p>请帮忙分析Android QQ协议：此项目现已稳定，在更新协议前不会有大更新。希望有人能跟我一起搞手机QQ协议，SmartQQ协议稳定性不是很理想。</p>\n<p>重要：群聊被TX认为是极度危险的行为，因此如果账号被怀疑被盗号（异地登陆），群聊消息会发不出去。表现为程序能收到群聊消息，群聊消息发送返回值为发送成功，但其他群成员无法看到您发出的消息。大约登陆10分钟后您会收到QQ提醒提示账号被盗，要求改密码，同时账号被临时冻结。不知为何该程序刚运行时总是被怀疑异地登陆，当您重复解冻3次后（就是改密码），TX基本就不再怀疑您了，一般一次能稳定挂机2-3天。强烈推荐您用小号挂QQ小黄鸡！</p>\n<p>This project is a chatting robot in QQ, implemented in Python. The robot uses Artificial Intelligent API to generate response. QQ is a popular instant chatting service in China, which is similar to Facebook Messenger. The robot supports group chatting and private chatting and should be only used for fun.</p>\n<p>Here is a similar project used to keep QQ account online with the function to record messages and forward to your E-mail.</p>\n<p>登陆时采用QQ安全中心的二维码做为登陆条件, 不需要在程序里输入QQ号码及QQ密码。QQ自动回复私聊（无群聊功能）及留言邮件提醒版本请看这里。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>从<a href=\"http://www.tuling123.com/openapi/\" target=\"_blank\" rel=\"noopener\">http://www.tuling123.com/openapi/</a> 申请一个API KEY(免费，5000次/天)， 贴到QQBot.py的第36行 (测试KEY：c7c5abbc9ec9cad3a63bde71d17e3c2c)<br>修改groupfollow.txt,将需要小黄鸡回复的群的群名写入(小黄鸡必须为群成员),每行一个群名，请不要打多余的空格。（新版WEBQQ已移除获取群号的接口，输入中文群名请务必使用UTF-8编码）<br>nohup python2 QQBot.py &gt;qbot.log&amp;<br>ls<br>若出现v.png则用QQ安全中心扫描，否则继续ls<br>cat log.log可以输出运行LOG<br>强烈建议使用小号挂小黄鸡，已知QQ会临时封禁机器人的临时对话回复和群回复，原理未知，每次封禁约为10分钟。表现为发送消息返回值retcode 为 0 但其他人无法看到。长时间挂机会导致QQ被冻结错误，QQ安全中心提示发布不良信息<br>据反馈此AI平台回复中带有少量广告。。。(如问iphone6价格回复小米799)<br>功能</p>\n<p>注：以下命令皆是在QQ中发送，群聊命令发送到所在群中</p>\n<p>关于及帮助，在群聊中发送!about</p>\n<p>群聊智能回复，在群中通过发送!ai 问题语句，则机器人向AI平台请求问题的回复并回复到群，带有!ai关键字时优先触发此功能</p>\n<p>私聊智能回复，对于收到的私聊，机器人向AI平台请求该聊天记录的回复并回复给消息发送者</p>\n<p>群聊学习功能，类似于小黄鸡，在群中通过发送!learn {ha}{哈哈}语句，则机器人检测到发言中包含“ha”时将自动回复“哈哈”。!delete {ha}{哈哈}可以删除该内容。学习内容会自动储存在database.群号.save文件。!deleteall可删除该群所有记录。注意learn和{之间有空格，{}与{}之间没有。</p>\n<p>群聊复读功能，检测到群聊中连续两个回复内容相同，将自动复读该内容1次。</p>\n<p>群聊关注功能，使用命令!follow {QQ昵称}!可以使机器人复读此人所有发言（除命令外）使用命令!unfollow {QQ昵称}!解除关注。例如 !follow 卖火柴的小女孩!。{QQ昵称}处可使用”me”来快速关注与解除关注自己，例：!follow me!</p>\n<p>私聊直接聊天即可，不需要加任何前缀。</p>\n<h2 id=\"Refs\"><a href=\"#Refs\" class=\"headerlink\" title=\"Refs\"></a>Refs</h2><p><a href=\"https://github.com/b3log/xiaov\" target=\"_blank\" rel=\"noopener\">https://github.com/b3log/xiaov</a></p>\n<ul>\n<li><a href=\"https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api\" target=\"_blank\" rel=\"noopener\">https://github.com/ScienJus/smartqq/wiki/%E7%99%BB%E5%BD%95-Api</a></li>\n<li><a href=\"http://www.scienjus.com/webqq-analysis-2/\" target=\"_blank\" rel=\"noopener\">http://www.scienjus.com/webqq-analysis-2/</a></li>\n</ul>\n"},{"date":"2017-07-04T12:03:26.000Z","status":"public","title":"WebServer的日志系统实现分析","keywords":["后台","Web","日志","log"],"_content":"\n```python\n@Singleton\nclass LogCenter(object):\n    def __init__(self):\n        self.logger_map = {}\n\n    def get_logger(self, name):\n        \"\"\" return logger\"\"\"\n        if not self.logger_map.has_key(name):\n            self.logger_map[name] = MyLogger(name)\n        return self.logger_map[name]\n# Usage:\n# data_logger = LogCenter.instance().get_logger('DataControlerLog')\n# except Exception,e:\n#   data_logger.error(\"Data Controler delete data error, msg=[%s]\" % ,repr(e)))\n#   result['code'] = ED.err_sys\n```","source":"_posts/WebServer的日志系统实现分析.md","raw":"---\ndate: 2017-07-04 20:03:26\nstatus: public\ntitle: WebServer的日志系统实现分析\nkeywords: \n- 后台\n- Web\n- 日志\n- log\ntags: \n\ncategories: \n---\n\n```python\n@Singleton\nclass LogCenter(object):\n    def __init__(self):\n        self.logger_map = {}\n\n    def get_logger(self, name):\n        \"\"\" return logger\"\"\"\n        if not self.logger_map.has_key(name):\n            self.logger_map[name] = MyLogger(name)\n        return self.logger_map[name]\n# Usage:\n# data_logger = LogCenter.instance().get_logger('DataControlerLog')\n# except Exception,e:\n#   data_logger.error(\"Data Controler delete data error, msg=[%s]\" % ,repr(e)))\n#   result['code'] = ED.err_sys\n```","slug":"WebServer的日志系统实现分析","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8a9000tc4xk1qyd6qr5","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCenter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.logger_map = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_logger</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" return logger\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.logger_map.has_key(name):</span><br><span class=\"line\">            self.logger_map[name] = MyLogger(name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.logger_map[name]</span><br><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\"><span class=\"comment\"># data_logger = LogCenter.instance().get_logger('DataControlerLog')</span></span><br><span class=\"line\"><span class=\"comment\"># except Exception,e:</span></span><br><span class=\"line\"><span class=\"comment\">#   data_logger.error(\"Data Controler delete data error, msg=[%s]\" % ,repr(e)))</span></span><br><span class=\"line\"><span class=\"comment\">#   result['code'] = ED.err_sys</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCenter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.logger_map = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_logger</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" return logger\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.logger_map.has_key(name):</span><br><span class=\"line\">            self.logger_map[name] = MyLogger(name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.logger_map[name]</span><br><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\"><span class=\"comment\"># data_logger = LogCenter.instance().get_logger('DataControlerLog')</span></span><br><span class=\"line\"><span class=\"comment\"># except Exception,e:</span></span><br><span class=\"line\"><span class=\"comment\">#   data_logger.error(\"Data Controler delete data error, msg=[%s]\" % ,repr(e)))</span></span><br><span class=\"line\"><span class=\"comment\">#   result['code'] = ED.err_sys</span></span><br></pre></td></tr></table></figure>"},{"_content":"The rise ofthe on-demand economyposes diﬃcult questions forworkers, companies and politicians\n\nI N THE  early 20th  centuryHenryFord combined moving assembly lines with  mass labour to  make  building cars\nmuch  cheaper and  quicker—thus turning the  automobile from a rich man’s toy into trans-port for the  masses.  Today a growing group of entrepreneurs is striving to do the same to services, bringing together computer power with freelance workers to supply luxuries that were once reserved for the wealthy. Uber provides chauﬀeurs. Handy supplies cleaners. SpoonRocket delivers restaurant meals to your door. Instacart keeps your fridge stocked. In San Francisco a young computer programmer can already live like a princess. \n\nYet this on-demand economy goes much widerthan the oc- casional luxury. Click on Medicast’s app, and a doctor will be knocking on your door within two hours. Want a lawyer or a consultant? Axiom will supply the former, Eden McCallum the latter. Other companies oﬀer prizes to freelances to solve R&D problems or to come up with advertising ideas. And a growing number of agencies are delivering freelances of all sorts, such as Freelancer.com and Elance-oDesk, which links up 9.3m workers for hire with 3.7m companies.\n\nThe on-demand economy is small, but it is growing quickly\n(see pages17-20). Uber, founded in San Francisco in 2009, now\noperates in 53 countries, had sales exceeding $1 billion in 2014\nand a valuation of $40 billion. Like the moving assembly line,\nthe idea of connecting people with freelances to solve their\nproblems sounds simple. But, like mass production, it has pro-\nfound implications for everything from the organisation of\nworkto the nature ofthe social contract in a capitalist society. \n\nBaby, you can drive my car—and stockmy fridge\nSome  of the  forces behind  the  on-demand  economy have\nbeen around for decades. Ever since the 1970s the economy\nthat Henry Ford helped create, with big ﬁrms and big trade un-\nions, has withered. Manufacturing jobs have been automated\nout of existence or outsourced abroad, while big companies\nhave abandoned lifetime employment. Some 53m American\nworkers already workas freelances. \n\nBut two powerful forces are speedingthis up and pushing it\ninto ever more parts of the economy. The ﬁrst is technology.\nCheap computing power means a lone thespian with an Ap-\nple Mac can create videos that rival those of Hollywood stu-\ndios. Complextasks, such as programminga computeror writ-\ning a legal brief, can now be divided into their component\nparts—and subcontracted to specialists around the world. The\non-demand economy allows society to tap into its under-used\nresources: thus Uber gets people to rent their own cars, and In-\nnoCentive lets them rent their spare brain capacity. \n\nThe other great force is changing social habits. Karl Marx\nsaid that the world would be divided into people who owned\nthe  means of production—the  idle  rich—and  people  who\nworked for them. In fact it is increasingly being divided be-\ntween people who have money but no time and people who\nhave time but no money. The on-demand economy provides a\nway for these two groups to trade with each other.\n\nThis will push service companies to follow manufacturers\nand focus on their core competencies. The “transaction cost”\nof using an outsider to ﬁx something (as opposed to keeping\nthatfunction within yourcompany) isfalling. Rather than con-\ntrolling ﬁxed resources, on-demand companies are middle-\nmen,  arranging connections and  overseeing quality.  They\ndon’t employ full-time lawyers and accountants with guaran-\nteed pay and beneﬁts. Uber drivers get paid only when they\nwork and are responsible for their own pensions and health\ncare. Risksborne bycompaniesare beingpushed backon to in-\ndividuals—and that has consequences for everybody.\n\nObamacare and Brand You\nThe on-demand economy is already provoking political de-\nbate, with Uber at the centre of much of it. Many cities, states\nand countries have banned the ride-sharing company on safe-\nty or regulatory grounds. Taxi drivers have staged protests\nagainst it. Uber drivers have gone on strike, demanding better\nbeneﬁts. Techno-optimists dismiss all this as teething trouble:\nthe on-demand economygivesconsumersgreaterchoice, they\nargue, while letting people workwhenever they want. Society\ngains because idle resources are put to use. Most ofUber’s cars\nwould otherwise be parked in the garage. \n\nThe truth is more nuanced. Consumers are clear winners;\nso are Western workers who value ﬂexibility over security,\nsuch as women who want to combine work with child-rear-\ning. Taxpayers stand to gain ifon-demand labouris used to im-\nprove eﬃciency in the provision of public services. But work-\ners who  value  security over ﬂexibility,  including a  lot  of\nmiddle-aged lawyers, doctors and taxi drivers, feel justiﬁably\nthreatened. And the on-demand economy certainly produces\nunfairnesses: taxpayers will also end up supporting many\ncontract workers who have never built up pensions.\n\nThis sense of nuance should inform policymaking. Gov-\nernments that outlaw on-demand ﬁrms are simply handicap-\nping the rest of their economies. But that does not mean they\nshould siton theirhands. The waysgovernmentsmeasure em-\nployment and wages will have to change. Many European tax\nsystems treat freelances as second-class citizens, while Ameri-\ncan stateshave diﬀerentrulesfor“contractworkers” thatcould\nbe tidied up. Too much ofthe welfare state isdelivered through\nemployers, especially pensions and health care: both should\nbe tied to the individual and made portable, one area where\nObamacare was a big step forward. \n\nBut even ifgovernments adjust theirpolicies to a more indi-\nvidualistic age,  the  on-demand  economy clearly imposes\nmore risk on individuals. People will have to master multiple\nskills if they are to survive in such a world—and keep those\nskills up to date. Professional sorts in big service ﬁrms will\nhave to take more responsibility for educating themselves.\nPeople will also have to learn how to sell themselves, through\npersonal networkingand social media or, ifthey are really am-\nbitious, turning themselves into brands. In a more ﬂuid world,\neverybody will need to learn how to manage You Inc. ","source":"_posts/Workers_on_tap_The_Economist_Jan_3rd_2015.md","raw":"The rise ofthe on-demand economyposes diﬃcult questions forworkers, companies and politicians\n\nI N THE  early 20th  centuryHenryFord combined moving assembly lines with  mass labour to  make  building cars\nmuch  cheaper and  quicker—thus turning the  automobile from a rich man’s toy into trans-port for the  masses.  Today a growing group of entrepreneurs is striving to do the same to services, bringing together computer power with freelance workers to supply luxuries that were once reserved for the wealthy. Uber provides chauﬀeurs. Handy supplies cleaners. SpoonRocket delivers restaurant meals to your door. Instacart keeps your fridge stocked. In San Francisco a young computer programmer can already live like a princess. \n\nYet this on-demand economy goes much widerthan the oc- casional luxury. Click on Medicast’s app, and a doctor will be knocking on your door within two hours. Want a lawyer or a consultant? Axiom will supply the former, Eden McCallum the latter. Other companies oﬀer prizes to freelances to solve R&D problems or to come up with advertising ideas. And a growing number of agencies are delivering freelances of all sorts, such as Freelancer.com and Elance-oDesk, which links up 9.3m workers for hire with 3.7m companies.\n\nThe on-demand economy is small, but it is growing quickly\n(see pages17-20). Uber, founded in San Francisco in 2009, now\noperates in 53 countries, had sales exceeding $1 billion in 2014\nand a valuation of $40 billion. Like the moving assembly line,\nthe idea of connecting people with freelances to solve their\nproblems sounds simple. But, like mass production, it has pro-\nfound implications for everything from the organisation of\nworkto the nature ofthe social contract in a capitalist society. \n\nBaby, you can drive my car—and stockmy fridge\nSome  of the  forces behind  the  on-demand  economy have\nbeen around for decades. Ever since the 1970s the economy\nthat Henry Ford helped create, with big ﬁrms and big trade un-\nions, has withered. Manufacturing jobs have been automated\nout of existence or outsourced abroad, while big companies\nhave abandoned lifetime employment. Some 53m American\nworkers already workas freelances. \n\nBut two powerful forces are speedingthis up and pushing it\ninto ever more parts of the economy. The ﬁrst is technology.\nCheap computing power means a lone thespian with an Ap-\nple Mac can create videos that rival those of Hollywood stu-\ndios. Complextasks, such as programminga computeror writ-\ning a legal brief, can now be divided into their component\nparts—and subcontracted to specialists around the world. The\non-demand economy allows society to tap into its under-used\nresources: thus Uber gets people to rent their own cars, and In-\nnoCentive lets them rent their spare brain capacity. \n\nThe other great force is changing social habits. Karl Marx\nsaid that the world would be divided into people who owned\nthe  means of production—the  idle  rich—and  people  who\nworked for them. In fact it is increasingly being divided be-\ntween people who have money but no time and people who\nhave time but no money. The on-demand economy provides a\nway for these two groups to trade with each other.\n\nThis will push service companies to follow manufacturers\nand focus on their core competencies. The “transaction cost”\nof using an outsider to ﬁx something (as opposed to keeping\nthatfunction within yourcompany) isfalling. Rather than con-\ntrolling ﬁxed resources, on-demand companies are middle-\nmen,  arranging connections and  overseeing quality.  They\ndon’t employ full-time lawyers and accountants with guaran-\nteed pay and beneﬁts. Uber drivers get paid only when they\nwork and are responsible for their own pensions and health\ncare. Risksborne bycompaniesare beingpushed backon to in-\ndividuals—and that has consequences for everybody.\n\nObamacare and Brand You\nThe on-demand economy is already provoking political de-\nbate, with Uber at the centre of much of it. Many cities, states\nand countries have banned the ride-sharing company on safe-\nty or regulatory grounds. Taxi drivers have staged protests\nagainst it. Uber drivers have gone on strike, demanding better\nbeneﬁts. Techno-optimists dismiss all this as teething trouble:\nthe on-demand economygivesconsumersgreaterchoice, they\nargue, while letting people workwhenever they want. Society\ngains because idle resources are put to use. Most ofUber’s cars\nwould otherwise be parked in the garage. \n\nThe truth is more nuanced. Consumers are clear winners;\nso are Western workers who value ﬂexibility over security,\nsuch as women who want to combine work with child-rear-\ning. Taxpayers stand to gain ifon-demand labouris used to im-\nprove eﬃciency in the provision of public services. But work-\ners who  value  security over ﬂexibility,  including a  lot  of\nmiddle-aged lawyers, doctors and taxi drivers, feel justiﬁably\nthreatened. And the on-demand economy certainly produces\nunfairnesses: taxpayers will also end up supporting many\ncontract workers who have never built up pensions.\n\nThis sense of nuance should inform policymaking. Gov-\nernments that outlaw on-demand ﬁrms are simply handicap-\nping the rest of their economies. But that does not mean they\nshould siton theirhands. The waysgovernmentsmeasure em-\nployment and wages will have to change. Many European tax\nsystems treat freelances as second-class citizens, while Ameri-\ncan stateshave diﬀerentrulesfor“contractworkers” thatcould\nbe tidied up. Too much ofthe welfare state isdelivered through\nemployers, especially pensions and health care: both should\nbe tied to the individual and made portable, one area where\nObamacare was a big step forward. \n\nBut even ifgovernments adjust theirpolicies to a more indi-\nvidualistic age,  the  on-demand  economy clearly imposes\nmore risk on individuals. People will have to master multiple\nskills if they are to survive in such a world—and keep those\nskills up to date. Professional sorts in big service ﬁrms will\nhave to take more responsibility for educating themselves.\nPeople will also have to learn how to sell themselves, through\npersonal networkingand social media or, ifthey are really am-\nbitious, turning themselves into brands. In a more ﬂuid world,\neverybody will need to learn how to manage You Inc. ","slug":"Workers_on_tap_The_Economist_Jan_3rd_2015","published":1,"date":"2019-02-27T13:22:35.591Z","updated":"2019-02-27T13:22:35.591Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8ab000vc4xk7djv5jc9","content":"<p>The rise ofthe on-demand economyposes diﬃcult questions forworkers, companies and politicians</p>\n<p>I N THE  early 20th  centuryHenryFord combined moving assembly lines with  mass labour to  make  building cars<br>much  cheaper and  quicker—thus turning the  automobile from a rich man’s toy into trans-port for the  masses.  Today a growing group of entrepreneurs is striving to do the same to services, bringing together computer power with freelance workers to supply luxuries that were once reserved for the wealthy. Uber provides chauﬀeurs. Handy supplies cleaners. SpoonRocket delivers restaurant meals to your door. Instacart keeps your fridge stocked. In San Francisco a young computer programmer can already live like a princess. </p>\n<p>Yet this on-demand economy goes much widerthan the oc- casional luxury. Click on Medicast’s app, and a doctor will be knocking on your door within two hours. Want a lawyer or a consultant? Axiom will supply the former, Eden McCallum the latter. Other companies oﬀer prizes to freelances to solve R&amp;D problems or to come up with advertising ideas. And a growing number of agencies are delivering freelances of all sorts, such as Freelancer.com and Elance-oDesk, which links up 9.3m workers for hire with 3.7m companies.</p>\n<p>The on-demand economy is small, but it is growing quickly<br>(see pages17-20). Uber, founded in San Francisco in 2009, now<br>operates in 53 countries, had sales exceeding $1 billion in 2014<br>and a valuation of $40 billion. Like the moving assembly line,<br>the idea of connecting people with freelances to solve their<br>problems sounds simple. But, like mass production, it has pro-<br>found implications for everything from the organisation of<br>workto the nature ofthe social contract in a capitalist society. </p>\n<p>Baby, you can drive my car—and stockmy fridge<br>Some  of the  forces behind  the  on-demand  economy have<br>been around for decades. Ever since the 1970s the economy<br>that Henry Ford helped create, with big ﬁrms and big trade un-<br>ions, has withered. Manufacturing jobs have been automated<br>out of existence or outsourced abroad, while big companies<br>have abandoned lifetime employment. Some 53m American<br>workers already workas freelances. </p>\n<p>But two powerful forces are speedingthis up and pushing it<br>into ever more parts of the economy. The ﬁrst is technology.<br>Cheap computing power means a lone thespian with an Ap-<br>ple Mac can create videos that rival those of Hollywood stu-<br>dios. Complextasks, such as programminga computeror writ-<br>ing a legal brief, can now be divided into their component<br>parts—and subcontracted to specialists around the world. The<br>on-demand economy allows society to tap into its under-used<br>resources: thus Uber gets people to rent their own cars, and In-<br>noCentive lets them rent their spare brain capacity. </p>\n<p>The other great force is changing social habits. Karl Marx<br>said that the world would be divided into people who owned<br>the  means of production—the  idle  rich—and  people  who<br>worked for them. In fact it is increasingly being divided be-<br>tween people who have money but no time and people who<br>have time but no money. The on-demand economy provides a<br>way for these two groups to trade with each other.</p>\n<p>This will push service companies to follow manufacturers<br>and focus on their core competencies. The “transaction cost”<br>of using an outsider to ﬁx something (as opposed to keeping<br>thatfunction within yourcompany) isfalling. Rather than con-<br>trolling ﬁxed resources, on-demand companies are middle-<br>men,  arranging connections and  overseeing quality.  They<br>don’t employ full-time lawyers and accountants with guaran-<br>teed pay and beneﬁts. Uber drivers get paid only when they<br>work and are responsible for their own pensions and health<br>care. Risksborne bycompaniesare beingpushed backon to in-<br>dividuals—and that has consequences for everybody.</p>\n<p>Obamacare and Brand You<br>The on-demand economy is already provoking political de-<br>bate, with Uber at the centre of much of it. Many cities, states<br>and countries have banned the ride-sharing company on safe-<br>ty or regulatory grounds. Taxi drivers have staged protests<br>against it. Uber drivers have gone on strike, demanding better<br>beneﬁts. Techno-optimists dismiss all this as teething trouble:<br>the on-demand economygivesconsumersgreaterchoice, they<br>argue, while letting people workwhenever they want. Society<br>gains because idle resources are put to use. Most ofUber’s cars<br>would otherwise be parked in the garage. </p>\n<p>The truth is more nuanced. Consumers are clear winners;<br>so are Western workers who value ﬂexibility over security,<br>such as women who want to combine work with child-rear-<br>ing. Taxpayers stand to gain ifon-demand labouris used to im-<br>prove eﬃciency in the provision of public services. But work-<br>ers who  value  security over ﬂexibility,  including a  lot  of<br>middle-aged lawyers, doctors and taxi drivers, feel justiﬁably<br>threatened. And the on-demand economy certainly produces<br>unfairnesses: taxpayers will also end up supporting many<br>contract workers who have never built up pensions.</p>\n<p>This sense of nuance should inform policymaking. Gov-<br>ernments that outlaw on-demand ﬁrms are simply handicap-<br>ping the rest of their economies. But that does not mean they<br>should siton theirhands. The waysgovernmentsmeasure em-<br>ployment and wages will have to change. Many European tax<br>systems treat freelances as second-class citizens, while Ameri-<br>can stateshave diﬀerentrulesfor“contractworkers” thatcould<br>be tidied up. Too much ofthe welfare state isdelivered through<br>employers, especially pensions and health care: both should<br>be tied to the individual and made portable, one area where<br>Obamacare was a big step forward. </p>\n<p>But even ifgovernments adjust theirpolicies to a more indi-<br>vidualistic age,  the  on-demand  economy clearly imposes<br>more risk on individuals. People will have to master multiple<br>skills if they are to survive in such a world—and keep those<br>skills up to date. Professional sorts in big service ﬁrms will<br>have to take more responsibility for educating themselves.<br>People will also have to learn how to sell themselves, through<br>personal networkingand social media or, ifthey are really am-<br>bitious, turning themselves into brands. In a more ﬂuid world,<br>everybody will need to learn how to manage You Inc. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>The rise ofthe on-demand economyposes diﬃcult questions forworkers, companies and politicians</p>\n<p>I N THE  early 20th  centuryHenryFord combined moving assembly lines with  mass labour to  make  building cars<br>much  cheaper and  quicker—thus turning the  automobile from a rich man’s toy into trans-port for the  masses.  Today a growing group of entrepreneurs is striving to do the same to services, bringing together computer power with freelance workers to supply luxuries that were once reserved for the wealthy. Uber provides chauﬀeurs. Handy supplies cleaners. SpoonRocket delivers restaurant meals to your door. Instacart keeps your fridge stocked. In San Francisco a young computer programmer can already live like a princess. </p>\n<p>Yet this on-demand economy goes much widerthan the oc- casional luxury. Click on Medicast’s app, and a doctor will be knocking on your door within two hours. Want a lawyer or a consultant? Axiom will supply the former, Eden McCallum the latter. Other companies oﬀer prizes to freelances to solve R&amp;D problems or to come up with advertising ideas. And a growing number of agencies are delivering freelances of all sorts, such as Freelancer.com and Elance-oDesk, which links up 9.3m workers for hire with 3.7m companies.</p>\n<p>The on-demand economy is small, but it is growing quickly<br>(see pages17-20). Uber, founded in San Francisco in 2009, now<br>operates in 53 countries, had sales exceeding $1 billion in 2014<br>and a valuation of $40 billion. Like the moving assembly line,<br>the idea of connecting people with freelances to solve their<br>problems sounds simple. But, like mass production, it has pro-<br>found implications for everything from the organisation of<br>workto the nature ofthe social contract in a capitalist society. </p>\n<p>Baby, you can drive my car—and stockmy fridge<br>Some  of the  forces behind  the  on-demand  economy have<br>been around for decades. Ever since the 1970s the economy<br>that Henry Ford helped create, with big ﬁrms and big trade un-<br>ions, has withered. Manufacturing jobs have been automated<br>out of existence or outsourced abroad, while big companies<br>have abandoned lifetime employment. Some 53m American<br>workers already workas freelances. </p>\n<p>But two powerful forces are speedingthis up and pushing it<br>into ever more parts of the economy. The ﬁrst is technology.<br>Cheap computing power means a lone thespian with an Ap-<br>ple Mac can create videos that rival those of Hollywood stu-<br>dios. Complextasks, such as programminga computeror writ-<br>ing a legal brief, can now be divided into their component<br>parts—and subcontracted to specialists around the world. The<br>on-demand economy allows society to tap into its under-used<br>resources: thus Uber gets people to rent their own cars, and In-<br>noCentive lets them rent their spare brain capacity. </p>\n<p>The other great force is changing social habits. Karl Marx<br>said that the world would be divided into people who owned<br>the  means of production—the  idle  rich—and  people  who<br>worked for them. In fact it is increasingly being divided be-<br>tween people who have money but no time and people who<br>have time but no money. The on-demand economy provides a<br>way for these two groups to trade with each other.</p>\n<p>This will push service companies to follow manufacturers<br>and focus on their core competencies. The “transaction cost”<br>of using an outsider to ﬁx something (as opposed to keeping<br>thatfunction within yourcompany) isfalling. Rather than con-<br>trolling ﬁxed resources, on-demand companies are middle-<br>men,  arranging connections and  overseeing quality.  They<br>don’t employ full-time lawyers and accountants with guaran-<br>teed pay and beneﬁts. Uber drivers get paid only when they<br>work and are responsible for their own pensions and health<br>care. Risksborne bycompaniesare beingpushed backon to in-<br>dividuals—and that has consequences for everybody.</p>\n<p>Obamacare and Brand You<br>The on-demand economy is already provoking political de-<br>bate, with Uber at the centre of much of it. Many cities, states<br>and countries have banned the ride-sharing company on safe-<br>ty or regulatory grounds. Taxi drivers have staged protests<br>against it. Uber drivers have gone on strike, demanding better<br>beneﬁts. Techno-optimists dismiss all this as teething trouble:<br>the on-demand economygivesconsumersgreaterchoice, they<br>argue, while letting people workwhenever they want. Society<br>gains because idle resources are put to use. Most ofUber’s cars<br>would otherwise be parked in the garage. </p>\n<p>The truth is more nuanced. Consumers are clear winners;<br>so are Western workers who value ﬂexibility over security,<br>such as women who want to combine work with child-rear-<br>ing. Taxpayers stand to gain ifon-demand labouris used to im-<br>prove eﬃciency in the provision of public services. But work-<br>ers who  value  security over ﬂexibility,  including a  lot  of<br>middle-aged lawyers, doctors and taxi drivers, feel justiﬁably<br>threatened. And the on-demand economy certainly produces<br>unfairnesses: taxpayers will also end up supporting many<br>contract workers who have never built up pensions.</p>\n<p>This sense of nuance should inform policymaking. Gov-<br>ernments that outlaw on-demand ﬁrms are simply handicap-<br>ping the rest of their economies. But that does not mean they<br>should siton theirhands. The waysgovernmentsmeasure em-<br>ployment and wages will have to change. Many European tax<br>systems treat freelances as second-class citizens, while Ameri-<br>can stateshave diﬀerentrulesfor“contractworkers” thatcould<br>be tidied up. Too much ofthe welfare state isdelivered through<br>employers, especially pensions and health care: both should<br>be tied to the individual and made portable, one area where<br>Obamacare was a big step forward. </p>\n<p>But even ifgovernments adjust theirpolicies to a more indi-<br>vidualistic age,  the  on-demand  economy clearly imposes<br>more risk on individuals. People will have to master multiple<br>skills if they are to survive in such a world—and keep those<br>skills up to date. Professional sorts in big service ﬁrms will<br>have to take more responsibility for educating themselves.<br>People will also have to learn how to sell themselves, through<br>personal networkingand social media or, ifthey are really am-<br>bitious, turning themselves into brands. In a more ﬂuid world,<br>everybody will need to learn how to manage You Inc. </p>\n"},{"date":"2017-07-09T00:01:29.000Z","status":"public","title":"如何使用Win10开机推荐的背景图作为桌面背景","keywords":["桌面","Win10","Windows","Python","教程"],"_content":"\n# 找到他们！\n这些图片的位置在：`C:\\Users\\YOUR_USER_NAME\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets`。\n\n![](http://opkk27k9n.bkt.clouddn.com/17-7-9/81558593.jpg)\n\n2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。\n![](http://opkk27k9n.bkt.clouddn.com/17-7-15/47096686.jpg)\n\n# 让代码来解决问题！\n代码中文档已经写好了如何使用~~~~\n\n不过还是列个关键字！\n- Win10\n- Python2/3\n- pip install pillow\n\n**filterWinStartBg.py**:\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n__author__ = 'Danceiny'\n__doc__ = \"\"\"\n本模块实现以下功能：\n2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。\n1. 将Win10开机时的背景图片(DIR)复制到指定目录(PIC_DIR)，并根据文件类型重命名。\n2. 删除指定目录下不适合作为桌面背景（不满足DEFAULT_RESOLUTION）的图片。\n\n使用方法：\n在以下代码中的【自定义背景】区自定义你的变量，然后直接运行本文件： python filterWinStartBg.py, 再到【Windows设置】-【个性化】-【背景】-【背景】选择【幻灯片放映】，【为幻灯片选择相册】设置为PIC_DIR.\n\n！！！！即可将Win10开机时的好看的背景图设置为桌面幻灯片背景啦！！！！！！\n！！！！适用环境！！！！\n1. Win10\n2. Python2/3\n3. pip install pillow\n\nCopyrights @ Danceiny 2017-07-09 Morning\nDanceiny@GitHub && danceiny@gmail.com\n\n\n还可参考：[python 设置windows桌面背景（从网络抓取）](http://www.cnblogs.com/qianlifeng/archive/2012/05/10/2494005.html)\n\"\"\"\nimport os\nimport shutil  # for copy/move file\nimport imghdr  # determine img type\n\n\n######################  自定义常量   ####################\nUSERNAME = 'huangzhen'\nMOMENTUM_VER = '0.95.3_0'   # chrome 插件 momontum的版本号,可根据下面代码中的MOMENTUM_DIR进入文件管理器中查找\nPIC_DIR = r''\nDEFAULT_RESOLUTION = (1920,1080)\n######################  自定义常量   ####################\n\nDIR = r'C:/Users/{}/AppData/Local/Packages/Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets'.format(USERNAME)\nMOMENTUM_DIR = r'C:/Users\\{USER}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\laookkfknpbbblfpciffpaejjkokdgca\\{VERSION}\\backgrounds'.format(USER=USERNAME,VERSION=MOMENTUM_VER)\nPIC_DIR = r'C:/Users/{}/Documents/Beautiful/Background'.format(USERNAME) if PIC_DIR == '' else PIC_DIR\nDIR = DIR.replace('/','\\\\')\nPIC_DIR = PIC_DIR.replace('/','\\\\')\n\n\ndef rename(path):\n    for filename in os.listdir(path):\n        all_filename = os.path.join(path,filename)\n        if os.path.isfile(all_filename):\n            if filename.find('.') < 0:\n                img_type = imghdr.what(all_filename)\n                suffix = 'jpg'\n                if img_type == 'png':\n                    suffix = 'png'\n                elif img_type == 'gif':\n                    suffix = 'gif'\n                elif img_type == None:\n                    os.remove(all_filename)\n                    continue\n                newname = '.'.join((all_filename,suffix))\n                os.rename(all_filename,newname)\n\ndef copyfiles(oldpath, newpath):\n    if not os.path.exists(newpath):\n        print('你指定的目录不存在，我要创建它^_^')\n        os.makedirs(newpath)\n    for filename in os.listdir(oldpath):\n        all_old = os.path.join(oldpath, filename)\n        if os.path.isfile(all_old):\n            is_exist_flag = False\n            for newfilename in os.listdir(newpath):\n                if newfilename.split('.')[0] == filename:\n                    is_exist_flag = True\n                    print(' '.join(('目标目录已经存在该文件',filename,'我不会复制它的。')))\n                    break\n            if is_exist_flag == False:\n                shutil.copyfile(all_old, os.path.join(newpath, filename))\n\nfrom PIL import Image\ndef get_img_resolution(filename):\n    # img = Image.open(filename)\n    # imgSize = img.size #图片的长和宽\n    # maxSize = max(imgSize) #图片的长边\n    # minSize = min(imgSize) #图片的短边\n    # return imgSize\n    return Image.open(filename).size\n\ndef del_unfit_imgs(path,mode='strict'):\n    #'strict'模式下删除该路径下所有尺寸不是DEFAULT_RESOLUTION的图片，非stric模式下删除长宽均小于默认尺寸的图片（momentum有很多不满足我原来设想的标准尺寸要求的美图啊~~~）\n    for filename in os.listdir(path):\n        all_filename = os.path.join(path,filename)\n        if os.path.isfile(all_filename):\n            if imghdr.what(all_filename) == None:\n                os.remove(all_filename)\n                continue\n            imgSize = get_img_resolution(all_filename)\n            if mode == 'strict':\n                if max(imgSize) != max(DEFAULT_RESOLUTION) and min(imgSize) != min(DEFAULT_RESOLUTION):\n                    os.remove(all_filename)\n            else:\n                if max(imgSize) < max(DEFAULT_RESOLUTION) and min(imgSize) < min(DEFAULT_RESOLUTION):\n                    os.remove(all_filename)\n\nif __name__ == '__main__':\n    copyfiles(DIR, PIC_DIR)\n    copyfiles(MOMENTUM_DIR,PIC_DIR)\n    rename(PIC_DIR)\n    del_unfit_imgs(PIC_DIR,mode='non_strict')\n```\n\n\n[**给Gist来个Star吧**](https://gist.github.com/Danceiny/965a3839e43fbeca2342cf10bead3118)","source":"_posts/使用Win10开机推荐的背景图作为桌面背景.md","raw":"---\ndate: 2017-07-09 08:01:29\nstatus: public\ntitle: 如何使用Win10开机推荐的背景图作为桌面背景\nkeywords: \n- 桌面\n- Win10\n- Windows\n- Python\n- 教程\ntags: \n- 桌面\n- Win10\n- Windows\n- Python\ncategories: Tips\n \n---\n\n# 找到他们！\n这些图片的位置在：`C:\\Users\\YOUR_USER_NAME\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets`。\n\n![](http://opkk27k9n.bkt.clouddn.com/17-7-9/81558593.jpg)\n\n2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。\n![](http://opkk27k9n.bkt.clouddn.com/17-7-15/47096686.jpg)\n\n# 让代码来解决问题！\n代码中文档已经写好了如何使用~~~~\n\n不过还是列个关键字！\n- Win10\n- Python2/3\n- pip install pillow\n\n**filterWinStartBg.py**:\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n__author__ = 'Danceiny'\n__doc__ = \"\"\"\n本模块实现以下功能：\n2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。\n1. 将Win10开机时的背景图片(DIR)复制到指定目录(PIC_DIR)，并根据文件类型重命名。\n2. 删除指定目录下不适合作为桌面背景（不满足DEFAULT_RESOLUTION）的图片。\n\n使用方法：\n在以下代码中的【自定义背景】区自定义你的变量，然后直接运行本文件： python filterWinStartBg.py, 再到【Windows设置】-【个性化】-【背景】-【背景】选择【幻灯片放映】，【为幻灯片选择相册】设置为PIC_DIR.\n\n！！！！即可将Win10开机时的好看的背景图设置为桌面幻灯片背景啦！！！！！！\n！！！！适用环境！！！！\n1. Win10\n2. Python2/3\n3. pip install pillow\n\nCopyrights @ Danceiny 2017-07-09 Morning\nDanceiny@GitHub && danceiny@gmail.com\n\n\n还可参考：[python 设置windows桌面背景（从网络抓取）](http://www.cnblogs.com/qianlifeng/archive/2012/05/10/2494005.html)\n\"\"\"\nimport os\nimport shutil  # for copy/move file\nimport imghdr  # determine img type\n\n\n######################  自定义常量   ####################\nUSERNAME = 'huangzhen'\nMOMENTUM_VER = '0.95.3_0'   # chrome 插件 momontum的版本号,可根据下面代码中的MOMENTUM_DIR进入文件管理器中查找\nPIC_DIR = r''\nDEFAULT_RESOLUTION = (1920,1080)\n######################  自定义常量   ####################\n\nDIR = r'C:/Users/{}/AppData/Local/Packages/Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets'.format(USERNAME)\nMOMENTUM_DIR = r'C:/Users\\{USER}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\laookkfknpbbblfpciffpaejjkokdgca\\{VERSION}\\backgrounds'.format(USER=USERNAME,VERSION=MOMENTUM_VER)\nPIC_DIR = r'C:/Users/{}/Documents/Beautiful/Background'.format(USERNAME) if PIC_DIR == '' else PIC_DIR\nDIR = DIR.replace('/','\\\\')\nPIC_DIR = PIC_DIR.replace('/','\\\\')\n\n\ndef rename(path):\n    for filename in os.listdir(path):\n        all_filename = os.path.join(path,filename)\n        if os.path.isfile(all_filename):\n            if filename.find('.') < 0:\n                img_type = imghdr.what(all_filename)\n                suffix = 'jpg'\n                if img_type == 'png':\n                    suffix = 'png'\n                elif img_type == 'gif':\n                    suffix = 'gif'\n                elif img_type == None:\n                    os.remove(all_filename)\n                    continue\n                newname = '.'.join((all_filename,suffix))\n                os.rename(all_filename,newname)\n\ndef copyfiles(oldpath, newpath):\n    if not os.path.exists(newpath):\n        print('你指定的目录不存在，我要创建它^_^')\n        os.makedirs(newpath)\n    for filename in os.listdir(oldpath):\n        all_old = os.path.join(oldpath, filename)\n        if os.path.isfile(all_old):\n            is_exist_flag = False\n            for newfilename in os.listdir(newpath):\n                if newfilename.split('.')[0] == filename:\n                    is_exist_flag = True\n                    print(' '.join(('目标目录已经存在该文件',filename,'我不会复制它的。')))\n                    break\n            if is_exist_flag == False:\n                shutil.copyfile(all_old, os.path.join(newpath, filename))\n\nfrom PIL import Image\ndef get_img_resolution(filename):\n    # img = Image.open(filename)\n    # imgSize = img.size #图片的长和宽\n    # maxSize = max(imgSize) #图片的长边\n    # minSize = min(imgSize) #图片的短边\n    # return imgSize\n    return Image.open(filename).size\n\ndef del_unfit_imgs(path,mode='strict'):\n    #'strict'模式下删除该路径下所有尺寸不是DEFAULT_RESOLUTION的图片，非stric模式下删除长宽均小于默认尺寸的图片（momentum有很多不满足我原来设想的标准尺寸要求的美图啊~~~）\n    for filename in os.listdir(path):\n        all_filename = os.path.join(path,filename)\n        if os.path.isfile(all_filename):\n            if imghdr.what(all_filename) == None:\n                os.remove(all_filename)\n                continue\n            imgSize = get_img_resolution(all_filename)\n            if mode == 'strict':\n                if max(imgSize) != max(DEFAULT_RESOLUTION) and min(imgSize) != min(DEFAULT_RESOLUTION):\n                    os.remove(all_filename)\n            else:\n                if max(imgSize) < max(DEFAULT_RESOLUTION) and min(imgSize) < min(DEFAULT_RESOLUTION):\n                    os.remove(all_filename)\n\nif __name__ == '__main__':\n    copyfiles(DIR, PIC_DIR)\n    copyfiles(MOMENTUM_DIR,PIC_DIR)\n    rename(PIC_DIR)\n    del_unfit_imgs(PIC_DIR,mode='non_strict')\n```\n\n\n[**给Gist来个Star吧**](https://gist.github.com/Danceiny/965a3839e43fbeca2342cf10bead3118)","slug":"使用Win10开机推荐的背景图作为桌面背景","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8ac000zc4xkahe5gvxc","content":"<h1 id=\"找到他们！\"><a href=\"#找到他们！\" class=\"headerlink\" title=\"找到他们！\"></a>找到他们！</h1><p>这些图片的位置在：<code>C:\\Users\\YOUR_USER_NAME\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets</code>。</p>\n<p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-9/81558593.jpg\" alt=\"\"></p>\n<p>2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-15/47096686.jpg\" alt=\"\"></p>\n<h1 id=\"让代码来解决问题！\"><a href=\"#让代码来解决问题！\" class=\"headerlink\" title=\"让代码来解决问题！\"></a>让代码来解决问题！</h1><p>代码中文档已经写好了如何使用~~~~</p>\n<p>不过还是列个关键字！</p>\n<ul>\n<li>Win10</li>\n<li>Python2/3</li>\n<li>pip install pillow</li>\n</ul>\n<p><strong>filterWinStartBg.py</strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">__author__ = <span class=\"string\">'Danceiny'</span></span><br><span class=\"line\">__doc__ = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">本模块实现以下功能：</span></span><br><span class=\"line\"><span class=\"string\">2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。</span></span><br><span class=\"line\"><span class=\"string\">1. 将Win10开机时的背景图片(DIR)复制到指定目录(PIC_DIR)，并根据文件类型重命名。</span></span><br><span class=\"line\"><span class=\"string\">2. 删除指定目录下不适合作为桌面背景（不满足DEFAULT_RESOLUTION）的图片。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">使用方法：</span></span><br><span class=\"line\"><span class=\"string\">在以下代码中的【自定义背景】区自定义你的变量，然后直接运行本文件： python filterWinStartBg.py, 再到【Windows设置】-【个性化】-【背景】-【背景】选择【幻灯片放映】，【为幻灯片选择相册】设置为PIC_DIR.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">！！！！即可将Win10开机时的好看的背景图设置为桌面幻灯片背景啦！！！！！！</span></span><br><span class=\"line\"><span class=\"string\">！！！！适用环境！！！！</span></span><br><span class=\"line\"><span class=\"string\">1. Win10</span></span><br><span class=\"line\"><span class=\"string\">2. Python2/3</span></span><br><span class=\"line\"><span class=\"string\">3. pip install pillow</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Copyrights @ Danceiny 2017-07-09 Morning</span></span><br><span class=\"line\"><span class=\"string\">Danceiny@GitHub &amp;&amp; danceiny@gmail.com</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">还可参考：[python 设置windows桌面背景（从网络抓取）](http://www.cnblogs.com/qianlifeng/archive/2012/05/10/2494005.html)</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil  <span class=\"comment\"># for copy/move file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> imghdr  <span class=\"comment\"># determine img type</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######################  自定义常量   ####################</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">'huangzhen'</span></span><br><span class=\"line\">MOMENTUM_VER = <span class=\"string\">'0.95.3_0'</span>   <span class=\"comment\"># chrome 插件 momontum的版本号,可根据下面代码中的MOMENTUM_DIR进入文件管理器中查找</span></span><br><span class=\"line\">PIC_DIR = <span class=\"string\">r''</span></span><br><span class=\"line\">DEFAULT_RESOLUTION = (<span class=\"number\">1920</span>,<span class=\"number\">1080</span>)</span><br><span class=\"line\"><span class=\"comment\">######################  自定义常量   ####################</span></span><br><span class=\"line\"></span><br><span class=\"line\">DIR = <span class=\"string\">r'C:/Users/&#123;&#125;/AppData/Local/Packages/Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets'</span>.format(USERNAME)</span><br><span class=\"line\">MOMENTUM_DIR = <span class=\"string\">r'C:/Users\\&#123;USER&#125;\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\laookkfknpbbblfpciffpaejjkokdgca\\&#123;VERSION&#125;\\backgrounds'</span>.format(USER=USERNAME,VERSION=MOMENTUM_VER)</span><br><span class=\"line\">PIC_DIR = <span class=\"string\">r'C:/Users/&#123;&#125;/Documents/Beautiful/Background'</span>.format(USERNAME) <span class=\"keyword\">if</span> PIC_DIR == <span class=\"string\">''</span> <span class=\"keyword\">else</span> PIC_DIR</span><br><span class=\"line\">DIR = DIR.replace(<span class=\"string\">'/'</span>,<span class=\"string\">'\\\\'</span>)</span><br><span class=\"line\">PIC_DIR = PIC_DIR.replace(<span class=\"string\">'/'</span>,<span class=\"string\">'\\\\'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rename</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">        all_filename = os.path.join(path,filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_filename):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> filename.find(<span class=\"string\">'.'</span>) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                img_type = imghdr.what(all_filename)</span><br><span class=\"line\">                suffix = <span class=\"string\">'jpg'</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> img_type == <span class=\"string\">'png'</span>:</span><br><span class=\"line\">                    suffix = <span class=\"string\">'png'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> img_type == <span class=\"string\">'gif'</span>:</span><br><span class=\"line\">                    suffix = <span class=\"string\">'gif'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> img_type == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                newname = <span class=\"string\">'.'</span>.join((all_filename,suffix))</span><br><span class=\"line\">                os.rename(all_filename,newname)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">copyfiles</span><span class=\"params\">(oldpath, newpath)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(newpath):</span><br><span class=\"line\">        print(<span class=\"string\">'你指定的目录不存在，我要创建它^_^'</span>)</span><br><span class=\"line\">        os.makedirs(newpath)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(oldpath):</span><br><span class=\"line\">        all_old = os.path.join(oldpath, filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_old):</span><br><span class=\"line\">            is_exist_flag = <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> newfilename <span class=\"keyword\">in</span> os.listdir(newpath):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> newfilename.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] == filename:</span><br><span class=\"line\">                    is_exist_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">                    print(<span class=\"string\">' '</span>.join((<span class=\"string\">'目标目录已经存在该文件'</span>,filename,<span class=\"string\">'我不会复制它的。'</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> is_exist_flag == <span class=\"keyword\">False</span>:</span><br><span class=\"line\">                shutil.copyfile(all_old, os.path.join(newpath, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_img_resolution</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># img = Image.open(filename)</span></span><br><span class=\"line\">    <span class=\"comment\"># imgSize = img.size #图片的长和宽</span></span><br><span class=\"line\">    <span class=\"comment\"># maxSize = max(imgSize) #图片的长边</span></span><br><span class=\"line\">    <span class=\"comment\"># minSize = min(imgSize) #图片的短边</span></span><br><span class=\"line\">    <span class=\"comment\"># return imgSize</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Image.open(filename).size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_unfit_imgs</span><span class=\"params\">(path,mode=<span class=\"string\">'strict'</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#'strict'模式下删除该路径下所有尺寸不是DEFAULT_RESOLUTION的图片，非stric模式下删除长宽均小于默认尺寸的图片（momentum有很多不满足我原来设想的标准尺寸要求的美图啊~~~）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">        all_filename = os.path.join(path,filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_filename):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> imghdr.what(all_filename) == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                os.remove(all_filename)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            imgSize = get_img_resolution(all_filename)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> mode == <span class=\"string\">'strict'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> max(imgSize) != max(DEFAULT_RESOLUTION) <span class=\"keyword\">and</span> min(imgSize) != min(DEFAULT_RESOLUTION):</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> max(imgSize) &lt; max(DEFAULT_RESOLUTION) <span class=\"keyword\">and</span> min(imgSize) &lt; min(DEFAULT_RESOLUTION):</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    copyfiles(DIR, PIC_DIR)</span><br><span class=\"line\">    copyfiles(MOMENTUM_DIR,PIC_DIR)</span><br><span class=\"line\">    rename(PIC_DIR)</span><br><span class=\"line\">    del_unfit_imgs(PIC_DIR,mode=<span class=\"string\">'non_strict'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gist.github.com/Danceiny/965a3839e43fbeca2342cf10bead3118\" target=\"_blank\" rel=\"noopener\"><strong>给Gist来个Star吧</strong></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"找到他们！\"><a href=\"#找到他们！\" class=\"headerlink\" title=\"找到他们！\"></a>找到他们！</h1><p>这些图片的位置在：<code>C:\\Users\\YOUR_USER_NAME\\AppData\\Local\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets</code>。</p>\n<p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-9/81558593.jpg\" alt=\"\"></p>\n<p>2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-15/47096686.jpg\" alt=\"\"></p>\n<h1 id=\"让代码来解决问题！\"><a href=\"#让代码来解决问题！\" class=\"headerlink\" title=\"让代码来解决问题！\"></a>让代码来解决问题！</h1><p>代码中文档已经写好了如何使用~~~~</p>\n<p>不过还是列个关键字！</p>\n<ul>\n<li>Win10</li>\n<li>Python2/3</li>\n<li>pip install pillow</li>\n</ul>\n<p><strong>filterWinStartBg.py</strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">__author__ = <span class=\"string\">'Danceiny'</span></span><br><span class=\"line\">__doc__ = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">本模块实现以下功能：</span></span><br><span class=\"line\"><span class=\"string\">2017-07-15 22:45:27 更新：支持Chrome插件Momentum的背景图。</span></span><br><span class=\"line\"><span class=\"string\">1. 将Win10开机时的背景图片(DIR)复制到指定目录(PIC_DIR)，并根据文件类型重命名。</span></span><br><span class=\"line\"><span class=\"string\">2. 删除指定目录下不适合作为桌面背景（不满足DEFAULT_RESOLUTION）的图片。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">使用方法：</span></span><br><span class=\"line\"><span class=\"string\">在以下代码中的【自定义背景】区自定义你的变量，然后直接运行本文件： python filterWinStartBg.py, 再到【Windows设置】-【个性化】-【背景】-【背景】选择【幻灯片放映】，【为幻灯片选择相册】设置为PIC_DIR.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">！！！！即可将Win10开机时的好看的背景图设置为桌面幻灯片背景啦！！！！！！</span></span><br><span class=\"line\"><span class=\"string\">！！！！适用环境！！！！</span></span><br><span class=\"line\"><span class=\"string\">1. Win10</span></span><br><span class=\"line\"><span class=\"string\">2. Python2/3</span></span><br><span class=\"line\"><span class=\"string\">3. pip install pillow</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Copyrights @ Danceiny 2017-07-09 Morning</span></span><br><span class=\"line\"><span class=\"string\">Danceiny@GitHub &amp;&amp; danceiny@gmail.com</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">还可参考：[python 设置windows桌面背景（从网络抓取）](http://www.cnblogs.com/qianlifeng/archive/2012/05/10/2494005.html)</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil  <span class=\"comment\"># for copy/move file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> imghdr  <span class=\"comment\"># determine img type</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######################  自定义常量   ####################</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">'huangzhen'</span></span><br><span class=\"line\">MOMENTUM_VER = <span class=\"string\">'0.95.3_0'</span>   <span class=\"comment\"># chrome 插件 momontum的版本号,可根据下面代码中的MOMENTUM_DIR进入文件管理器中查找</span></span><br><span class=\"line\">PIC_DIR = <span class=\"string\">r''</span></span><br><span class=\"line\">DEFAULT_RESOLUTION = (<span class=\"number\">1920</span>,<span class=\"number\">1080</span>)</span><br><span class=\"line\"><span class=\"comment\">######################  自定义常量   ####################</span></span><br><span class=\"line\"></span><br><span class=\"line\">DIR = <span class=\"string\">r'C:/Users/&#123;&#125;/AppData/Local/Packages/Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets'</span>.format(USERNAME)</span><br><span class=\"line\">MOMENTUM_DIR = <span class=\"string\">r'C:/Users\\&#123;USER&#125;\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\laookkfknpbbblfpciffpaejjkokdgca\\&#123;VERSION&#125;\\backgrounds'</span>.format(USER=USERNAME,VERSION=MOMENTUM_VER)</span><br><span class=\"line\">PIC_DIR = <span class=\"string\">r'C:/Users/&#123;&#125;/Documents/Beautiful/Background'</span>.format(USERNAME) <span class=\"keyword\">if</span> PIC_DIR == <span class=\"string\">''</span> <span class=\"keyword\">else</span> PIC_DIR</span><br><span class=\"line\">DIR = DIR.replace(<span class=\"string\">'/'</span>,<span class=\"string\">'\\\\'</span>)</span><br><span class=\"line\">PIC_DIR = PIC_DIR.replace(<span class=\"string\">'/'</span>,<span class=\"string\">'\\\\'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rename</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">        all_filename = os.path.join(path,filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_filename):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> filename.find(<span class=\"string\">'.'</span>) &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                img_type = imghdr.what(all_filename)</span><br><span class=\"line\">                suffix = <span class=\"string\">'jpg'</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> img_type == <span class=\"string\">'png'</span>:</span><br><span class=\"line\">                    suffix = <span class=\"string\">'png'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> img_type == <span class=\"string\">'gif'</span>:</span><br><span class=\"line\">                    suffix = <span class=\"string\">'gif'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> img_type == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                newname = <span class=\"string\">'.'</span>.join((all_filename,suffix))</span><br><span class=\"line\">                os.rename(all_filename,newname)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">copyfiles</span><span class=\"params\">(oldpath, newpath)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(newpath):</span><br><span class=\"line\">        print(<span class=\"string\">'你指定的目录不存在，我要创建它^_^'</span>)</span><br><span class=\"line\">        os.makedirs(newpath)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(oldpath):</span><br><span class=\"line\">        all_old = os.path.join(oldpath, filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_old):</span><br><span class=\"line\">            is_exist_flag = <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> newfilename <span class=\"keyword\">in</span> os.listdir(newpath):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> newfilename.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] == filename:</span><br><span class=\"line\">                    is_exist_flag = <span class=\"keyword\">True</span></span><br><span class=\"line\">                    print(<span class=\"string\">' '</span>.join((<span class=\"string\">'目标目录已经存在该文件'</span>,filename,<span class=\"string\">'我不会复制它的。'</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> is_exist_flag == <span class=\"keyword\">False</span>:</span><br><span class=\"line\">                shutil.copyfile(all_old, os.path.join(newpath, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_img_resolution</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># img = Image.open(filename)</span></span><br><span class=\"line\">    <span class=\"comment\"># imgSize = img.size #图片的长和宽</span></span><br><span class=\"line\">    <span class=\"comment\"># maxSize = max(imgSize) #图片的长边</span></span><br><span class=\"line\">    <span class=\"comment\"># minSize = min(imgSize) #图片的短边</span></span><br><span class=\"line\">    <span class=\"comment\"># return imgSize</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Image.open(filename).size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_unfit_imgs</span><span class=\"params\">(path,mode=<span class=\"string\">'strict'</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#'strict'模式下删除该路径下所有尺寸不是DEFAULT_RESOLUTION的图片，非stric模式下删除长宽均小于默认尺寸的图片（momentum有很多不满足我原来设想的标准尺寸要求的美图啊~~~）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">        all_filename = os.path.join(path,filename)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(all_filename):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> imghdr.what(all_filename) == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                os.remove(all_filename)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            imgSize = get_img_resolution(all_filename)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> mode == <span class=\"string\">'strict'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> max(imgSize) != max(DEFAULT_RESOLUTION) <span class=\"keyword\">and</span> min(imgSize) != min(DEFAULT_RESOLUTION):</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> max(imgSize) &lt; max(DEFAULT_RESOLUTION) <span class=\"keyword\">and</span> min(imgSize) &lt; min(DEFAULT_RESOLUTION):</span><br><span class=\"line\">                    os.remove(all_filename)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    copyfiles(DIR, PIC_DIR)</span><br><span class=\"line\">    copyfiles(MOMENTUM_DIR,PIC_DIR)</span><br><span class=\"line\">    rename(PIC_DIR)</span><br><span class=\"line\">    del_unfit_imgs(PIC_DIR,mode=<span class=\"string\">'non_strict'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gist.github.com/Danceiny/965a3839e43fbeca2342cf10bead3118\" target=\"_blank\" rel=\"noopener\"><strong>给Gist来个Star吧</strong></a></p>\n"},{"date":"2017-07-04T12:03:26.000Z","status":"public","title":"中国电影人最缺乏的是耐心吗？","keywords":["小鲜肉","导演","批判性思维","电影","冯小刚"],"_content":"\n# 中国电影人最缺乏的是耐心吗？\n\n标签（空格分隔）： 论证 分析 批判性思维 电影 中国电影 冯小刚 导演 小鲜肉\n\n---\n# 介绍\n本文对以下原文进行基于批判性思维的实例分析。\n\nlast updated: 2017-07-04 20:04:51\n\n# 原文\n标题：[老炮冯小刚又在捏观众这个软柿子了](http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml)\n作者：张丰 [上影股份总公司总经理、上海联和电影院线有限责任公司董事长]\n来源：公号“冰川思享库”（ID:ibingchuansxk）\n\n\n>   随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。\n    冯小刚为了宣传新电影《芳华》真是拼了，不但上央视《朗读者》节目去读了一首诗，还在上海电影节上炒作了一把。他大骂观众，认为中国“垃圾电影”横行的责任在“垃圾观众”太多，“你不去捧场，就没（垃圾电影）这东西，往往垃圾票房还很好。”\n　　这话出自冯小刚之口，着实让人吃惊。要知道，在国内导演中，冯小刚被认为是最懂市场的。从90年代开始，几乎每一部他拍的电影，都很叫座。\n　　可以说，冯小刚三个字已经成为票房的保证，中国电影观众，不管垃圾不垃圾，可都是看着冯小刚的电影长大的。\n　　没有谁一出生就拥有绝佳的电影品位，所谓观众，其实是由电影创造的，有什么样的电影，就会有什么样的观众。\n　　因此，我们甚至可以说，是以冯小刚为代表的导演，塑造出了中国的电影观众。如果说中国电影观众很“垃圾”，首先应该检讨的就是冯小刚本人，其次才是张艺谋和陈凯歌。\n　　冯小刚的愤懑，很有可能和去年的电影《我不是潘金莲》有关，这部在上映前被寄予厚望的“艺术片”，拥有范冰冰这样的超级明星，但最终票房仍然惨败。\n　　这说明，最近几年，中国电影观众确实发生了某种变化，冯小刚第一次把不住市场（观众）的脉了。\n　　围绕《我不是潘金莲》的争议有很多，其中最轰动的就是冯小刚与王思聪的互撕。冯小刚认为，万达院线为这部“艺术片”的排片场次太少，而王思聪和万达则坚持“还是市场说了算”，最终，冯小刚和投资方华谊兄弟，并没有说服万达。\n　　对冯小刚来说，这是一次标志性事件。在此之前，冯小刚可以说是不折不扣的“市场派”，他也并不反感请超级明星，不管是舒淇还是范冰冰，都是大牌。\n　　而在《我不是潘金莲》之后，冯小刚似乎赌气似的变成了“艺术派”，开始抱怨观众不识货，抱怨明星的派头大。\n　　毫无疑问，冯小刚陷入了某种创作危机。他不缺乏商业片的经验，但是他的老北京幽默，对90后、95后们不再有吸引力，他的铁杆粉丝是70后和80后，这让他有一种被抛弃感。\n　　明年就60岁的冯小刚，已经是中国电影的“老人”了吗？至少他是不甘心的，他还要证明自己，从《我不是潘金莲》开始，他几乎在每个场合都标榜电影的艺术性，到今天痛骂电影观众，可谓是逻辑上的某种必然。\n　　中国电影确实存在很大问题，但是，中国电影最健康的部分，就是观众了。\n　　今年，一部小成本印度电影《摔跤吧，爸爸》在中国取得了票房与口碑的双丰收，这样一部小成本制作的电影，却俘获了大量观众，这也让中国电影人开始反思，中国电影到底是哪里病了。\n　　冯小刚所说的排场很大、后面跟着五六个跟班的著名演员，很有可靠是被很多老艺人攻击的“小鲜肉”，零演技，但是光靠颜值就能赚大钱的青年演员，确实是中国电影浮躁的一个集中体现。但是，这些“小鲜肉”并不是中国电影堕落的原因，而是结果。\n　　中国电影进入了资本驱动时代。院线的扩张，几乎与房地产的蓬勃发展同步，愿意投资电影的巨头也在增多，连阿里、腾讯都在进入电影市场。可以说，中国电影正处在非常好的时代，或许正是市场快速膨胀，才让“好片难寻”的感受更为强烈。\n　　这也就能解释冯小刚讨厌的小鲜肉名演员，为什么能挣那么多钱。电影市场和小鲜肉一样年轻，而他们也正在殚精竭虑地要赢得未来，国产电影审美的的低龄化、低智化，也就可以理解。涌向影院的观众太多了，而没有足够多元化的影片能对观众做出区分。\n　　戴锦华教授在和冯小刚对谈时，谈到了院线的垄断，这确实是一个重要的原因。院线的“票房预期”判断，导致一些艺术片根本进不了排片，最后自然也就不愿意有人再投资这样的片子。\n　　成熟的电影市场，除了所谓商业片外，也会有艺术片、纪录片等各种所谓“小众片”的立足之地，这样才会有一个多元的“市场”，才会有编剧肯花时间推敲剧本，最终才能塑造和吸引一个更多元的观众群。\n　　本届上海电影节祭出了“用工匠精神，打造中国电影”的大旗，算是找对了方向。所谓“工匠精神”，用著名思想家理查德·桑内特的话，就是那种“为了把事做好而把事做好”的精神，缺乏工匠精神的，可能不止是导演和编剧，还包括院线以及投资方。\n　　在大家都能轻松赚到钱的时候，就谈不上真正的专业性，但是，随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。\n　　桑内特认为，一个人发展出工匠级别的技艺，需要1万小时的练习，如果每天用上3小时，这也需要10年的沉淀，考验中国电影人的，不是决心，而是耐心。从冯小刚身上，我们已经看出中国电影人最缺乏的就是耐心，这可真不是什么好苗头。\n　　\n# 分析论证\n## 理解主题论点\n核心论点：**中国电影人最缺乏的是耐心**。\n隐含论点：中国电影存在问题，问题症结在于中国电影人。\n\n## 澄清观念意义\n- 电影人\n包括电影制作人（导演等剧组人员）、编剧、演员等。不包括电影投资方、政府（广电总局？）、观众等。\n\n- 耐心：\n电影制作人、编剧、演员等直接参与电影创作的人士在电影创作过程中遵循职业道德，不急于求成。\n\n## 分析论证结构 && 审查理由质量 && 挖掘隐含假设 && 考察替代论证\n1. 冯小刚的言论所呈现的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/73602121.jpg)\n\n2. 得出“冯小刚”缺乏耐心的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/89681203.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/9900290.jpg)\n\n3. 得出“中国电影正处于非常好的时代”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/82813948.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/80318204.jpg)\n\n4. 得出“中国电影的观众很‘健康’”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/12321428.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/51140899.jpg)\n\n5. 得出“中国电影有病的部分是电影人”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/54117069.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/30532678.jpg)\n\n6. 得出“中国电影人最缺乏的是耐心”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/90450009.jpg)\n\n\n## 评价推理关系\n\n## 综合组织论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/92914890.jpg)\n\n# 参考\n- [老炮冯小刚又在捏观众这个软柿子了](http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml)\n- [每日电讯：真正的好电影从来不缺观众](http://opinion.people.com.cn/n1/2017/0630/c1003-29373626.html)\n\n","source":"_posts/基于批判性思维的新闻评论实例分析.md","raw":"---\ndate: 2017-07-04 20:03:26\nstatus: public\ntitle: 中国电影人最缺乏的是耐心吗？\nkeywords: \n- 小鲜肉\n- 导演\n- 批判性思维\n- 电影\n- 冯小刚\ntags: \n\ncategories: \n \n---\n\n# 中国电影人最缺乏的是耐心吗？\n\n标签（空格分隔）： 论证 分析 批判性思维 电影 中国电影 冯小刚 导演 小鲜肉\n\n---\n# 介绍\n本文对以下原文进行基于批判性思维的实例分析。\n\nlast updated: 2017-07-04 20:04:51\n\n# 原文\n标题：[老炮冯小刚又在捏观众这个软柿子了](http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml)\n作者：张丰 [上影股份总公司总经理、上海联和电影院线有限责任公司董事长]\n来源：公号“冰川思享库”（ID:ibingchuansxk）\n\n\n>   随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。\n    冯小刚为了宣传新电影《芳华》真是拼了，不但上央视《朗读者》节目去读了一首诗，还在上海电影节上炒作了一把。他大骂观众，认为中国“垃圾电影”横行的责任在“垃圾观众”太多，“你不去捧场，就没（垃圾电影）这东西，往往垃圾票房还很好。”\n　　这话出自冯小刚之口，着实让人吃惊。要知道，在国内导演中，冯小刚被认为是最懂市场的。从90年代开始，几乎每一部他拍的电影，都很叫座。\n　　可以说，冯小刚三个字已经成为票房的保证，中国电影观众，不管垃圾不垃圾，可都是看着冯小刚的电影长大的。\n　　没有谁一出生就拥有绝佳的电影品位，所谓观众，其实是由电影创造的，有什么样的电影，就会有什么样的观众。\n　　因此，我们甚至可以说，是以冯小刚为代表的导演，塑造出了中国的电影观众。如果说中国电影观众很“垃圾”，首先应该检讨的就是冯小刚本人，其次才是张艺谋和陈凯歌。\n　　冯小刚的愤懑，很有可能和去年的电影《我不是潘金莲》有关，这部在上映前被寄予厚望的“艺术片”，拥有范冰冰这样的超级明星，但最终票房仍然惨败。\n　　这说明，最近几年，中国电影观众确实发生了某种变化，冯小刚第一次把不住市场（观众）的脉了。\n　　围绕《我不是潘金莲》的争议有很多，其中最轰动的就是冯小刚与王思聪的互撕。冯小刚认为，万达院线为这部“艺术片”的排片场次太少，而王思聪和万达则坚持“还是市场说了算”，最终，冯小刚和投资方华谊兄弟，并没有说服万达。\n　　对冯小刚来说，这是一次标志性事件。在此之前，冯小刚可以说是不折不扣的“市场派”，他也并不反感请超级明星，不管是舒淇还是范冰冰，都是大牌。\n　　而在《我不是潘金莲》之后，冯小刚似乎赌气似的变成了“艺术派”，开始抱怨观众不识货，抱怨明星的派头大。\n　　毫无疑问，冯小刚陷入了某种创作危机。他不缺乏商业片的经验，但是他的老北京幽默，对90后、95后们不再有吸引力，他的铁杆粉丝是70后和80后，这让他有一种被抛弃感。\n　　明年就60岁的冯小刚，已经是中国电影的“老人”了吗？至少他是不甘心的，他还要证明自己，从《我不是潘金莲》开始，他几乎在每个场合都标榜电影的艺术性，到今天痛骂电影观众，可谓是逻辑上的某种必然。\n　　中国电影确实存在很大问题，但是，中国电影最健康的部分，就是观众了。\n　　今年，一部小成本印度电影《摔跤吧，爸爸》在中国取得了票房与口碑的双丰收，这样一部小成本制作的电影，却俘获了大量观众，这也让中国电影人开始反思，中国电影到底是哪里病了。\n　　冯小刚所说的排场很大、后面跟着五六个跟班的著名演员，很有可靠是被很多老艺人攻击的“小鲜肉”，零演技，但是光靠颜值就能赚大钱的青年演员，确实是中国电影浮躁的一个集中体现。但是，这些“小鲜肉”并不是中国电影堕落的原因，而是结果。\n　　中国电影进入了资本驱动时代。院线的扩张，几乎与房地产的蓬勃发展同步，愿意投资电影的巨头也在增多，连阿里、腾讯都在进入电影市场。可以说，中国电影正处在非常好的时代，或许正是市场快速膨胀，才让“好片难寻”的感受更为强烈。\n　　这也就能解释冯小刚讨厌的小鲜肉名演员，为什么能挣那么多钱。电影市场和小鲜肉一样年轻，而他们也正在殚精竭虑地要赢得未来，国产电影审美的的低龄化、低智化，也就可以理解。涌向影院的观众太多了，而没有足够多元化的影片能对观众做出区分。\n　　戴锦华教授在和冯小刚对谈时，谈到了院线的垄断，这确实是一个重要的原因。院线的“票房预期”判断，导致一些艺术片根本进不了排片，最后自然也就不愿意有人再投资这样的片子。\n　　成熟的电影市场，除了所谓商业片外，也会有艺术片、纪录片等各种所谓“小众片”的立足之地，这样才会有一个多元的“市场”，才会有编剧肯花时间推敲剧本，最终才能塑造和吸引一个更多元的观众群。\n　　本届上海电影节祭出了“用工匠精神，打造中国电影”的大旗，算是找对了方向。所谓“工匠精神”，用著名思想家理查德·桑内特的话，就是那种“为了把事做好而把事做好”的精神，缺乏工匠精神的，可能不止是导演和编剧，还包括院线以及投资方。\n　　在大家都能轻松赚到钱的时候，就谈不上真正的专业性，但是，随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。\n　　桑内特认为，一个人发展出工匠级别的技艺，需要1万小时的练习，如果每天用上3小时，这也需要10年的沉淀，考验中国电影人的，不是决心，而是耐心。从冯小刚身上，我们已经看出中国电影人最缺乏的就是耐心，这可真不是什么好苗头。\n　　\n# 分析论证\n## 理解主题论点\n核心论点：**中国电影人最缺乏的是耐心**。\n隐含论点：中国电影存在问题，问题症结在于中国电影人。\n\n## 澄清观念意义\n- 电影人\n包括电影制作人（导演等剧组人员）、编剧、演员等。不包括电影投资方、政府（广电总局？）、观众等。\n\n- 耐心：\n电影制作人、编剧、演员等直接参与电影创作的人士在电影创作过程中遵循职业道德，不急于求成。\n\n## 分析论证结构 && 审查理由质量 && 挖掘隐含假设 && 考察替代论证\n1. 冯小刚的言论所呈现的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/73602121.jpg)\n\n2. 得出“冯小刚”缺乏耐心的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/89681203.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/9900290.jpg)\n\n3. 得出“中国电影正处于非常好的时代”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/82813948.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/80318204.jpg)\n\n4. 得出“中国电影的观众很‘健康’”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/12321428.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/51140899.jpg)\n\n5. 得出“中国电影有病的部分是电影人”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/54117069.jpg)\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/30532678.jpg)\n\n6. 得出“中国电影人最缺乏的是耐心”的论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/90450009.jpg)\n\n\n## 评价推理关系\n\n## 综合组织论证\n![](http://opkk27k9n.bkt.clouddn.com/17-7-4/92914890.jpg)\n\n# 参考\n- [老炮冯小刚又在捏观众这个软柿子了](http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml)\n- [每日电讯：真正的好电影从来不缺观众](http://opinion.people.com.cn/n1/2017/0630/c1003-29373626.html)\n\n","slug":"基于批判性思维的新闻评论实例分析","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8ae0011c4xkctfv2y32","content":"<h1 id=\"中国电影人最缺乏的是耐心吗？\"><a href=\"#中国电影人最缺乏的是耐心吗？\" class=\"headerlink\" title=\"中国电影人最缺乏的是耐心吗？\"></a>中国电影人最缺乏的是耐心吗？</h1><p>标签（空格分隔）： 论证 分析 批判性思维 电影 中国电影 冯小刚 导演 小鲜肉</p>\n<hr>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>本文对以下原文进行基于批判性思维的实例分析。</p>\n<p>last updated: 2017-07-04 20:04:51</p>\n<h1 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h1><p>标题：<a href=\"http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml\" target=\"_blank\" rel=\"noopener\">老炮冯小刚又在捏观众这个软柿子了</a><br>作者：张丰 [上影股份总公司总经理、上海联和电影院线有限责任公司董事长]<br>来源：公号“冰川思享库”（ID:ibingchuansxk）</p>\n<blockquote>\n<p>  随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。<br>    冯小刚为了宣传新电影《芳华》真是拼了，不但上央视《朗读者》节目去读了一首诗，还在上海电影节上炒作了一把。他大骂观众，认为中国“垃圾电影”横行的责任在“垃圾观众”太多，“你不去捧场，就没（垃圾电影）这东西，往往垃圾票房还很好。”<br>　　这话出自冯小刚之口，着实让人吃惊。要知道，在国内导演中，冯小刚被认为是最懂市场的。从90年代开始，几乎每一部他拍的电影，都很叫座。<br>　　可以说，冯小刚三个字已经成为票房的保证，中国电影观众，不管垃圾不垃圾，可都是看着冯小刚的电影长大的。<br>　　没有谁一出生就拥有绝佳的电影品位，所谓观众，其实是由电影创造的，有什么样的电影，就会有什么样的观众。<br>　　因此，我们甚至可以说，是以冯小刚为代表的导演，塑造出了中国的电影观众。如果说中国电影观众很“垃圾”，首先应该检讨的就是冯小刚本人，其次才是张艺谋和陈凯歌。<br>　　冯小刚的愤懑，很有可能和去年的电影《我不是潘金莲》有关，这部在上映前被寄予厚望的“艺术片”，拥有范冰冰这样的超级明星，但最终票房仍然惨败。<br>　　这说明，最近几年，中国电影观众确实发生了某种变化，冯小刚第一次把不住市场（观众）的脉了。<br>　　围绕《我不是潘金莲》的争议有很多，其中最轰动的就是冯小刚与王思聪的互撕。冯小刚认为，万达院线为这部“艺术片”的排片场次太少，而王思聪和万达则坚持“还是市场说了算”，最终，冯小刚和投资方华谊兄弟，并没有说服万达。<br>　　对冯小刚来说，这是一次标志性事件。在此之前，冯小刚可以说是不折不扣的“市场派”，他也并不反感请超级明星，不管是舒淇还是范冰冰，都是大牌。<br>　　而在《我不是潘金莲》之后，冯小刚似乎赌气似的变成了“艺术派”，开始抱怨观众不识货，抱怨明星的派头大。<br>　　毫无疑问，冯小刚陷入了某种创作危机。他不缺乏商业片的经验，但是他的老北京幽默，对90后、95后们不再有吸引力，他的铁杆粉丝是70后和80后，这让他有一种被抛弃感。<br>　　明年就60岁的冯小刚，已经是中国电影的“老人”了吗？至少他是不甘心的，他还要证明自己，从《我不是潘金莲》开始，他几乎在每个场合都标榜电影的艺术性，到今天痛骂电影观众，可谓是逻辑上的某种必然。<br>　　中国电影确实存在很大问题，但是，中国电影最健康的部分，就是观众了。<br>　　今年，一部小成本印度电影《摔跤吧，爸爸》在中国取得了票房与口碑的双丰收，这样一部小成本制作的电影，却俘获了大量观众，这也让中国电影人开始反思，中国电影到底是哪里病了。<br>　　冯小刚所说的排场很大、后面跟着五六个跟班的著名演员，很有可靠是被很多老艺人攻击的“小鲜肉”，零演技，但是光靠颜值就能赚大钱的青年演员，确实是中国电影浮躁的一个集中体现。但是，这些“小鲜肉”并不是中国电影堕落的原因，而是结果。<br>　　中国电影进入了资本驱动时代。院线的扩张，几乎与房地产的蓬勃发展同步，愿意投资电影的巨头也在增多，连阿里、腾讯都在进入电影市场。可以说，中国电影正处在非常好的时代，或许正是市场快速膨胀，才让“好片难寻”的感受更为强烈。<br>　　这也就能解释冯小刚讨厌的小鲜肉名演员，为什么能挣那么多钱。电影市场和小鲜肉一样年轻，而他们也正在殚精竭虑地要赢得未来，国产电影审美的的低龄化、低智化，也就可以理解。涌向影院的观众太多了，而没有足够多元化的影片能对观众做出区分。<br>　　戴锦华教授在和冯小刚对谈时，谈到了院线的垄断，这确实是一个重要的原因。院线的“票房预期”判断，导致一些艺术片根本进不了排片，最后自然也就不愿意有人再投资这样的片子。<br>　　成熟的电影市场，除了所谓商业片外，也会有艺术片、纪录片等各种所谓“小众片”的立足之地，这样才会有一个多元的“市场”，才会有编剧肯花时间推敲剧本，最终才能塑造和吸引一个更多元的观众群。<br>　　本届上海电影节祭出了“用工匠精神，打造中国电影”的大旗，算是找对了方向。所谓“工匠精神”，用著名思想家理查德·桑内特的话，就是那种“为了把事做好而把事做好”的精神，缺乏工匠精神的，可能不止是导演和编剧，还包括院线以及投资方。<br>　　在大家都能轻松赚到钱的时候，就谈不上真正的专业性，但是，随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。<br>　　桑内特认为，一个人发展出工匠级别的技艺，需要1万小时的练习，如果每天用上3小时，这也需要10年的沉淀，考验中国电影人的，不是决心，而是耐心。从冯小刚身上，我们已经看出中国电影人最缺乏的就是耐心，这可真不是什么好苗头。\n　　</p>\n</blockquote>\n<h1 id=\"分析论证\"><a href=\"#分析论证\" class=\"headerlink\" title=\"分析论证\"></a>分析论证</h1><h2 id=\"理解主题论点\"><a href=\"#理解主题论点\" class=\"headerlink\" title=\"理解主题论点\"></a>理解主题论点</h2><p>核心论点：<strong>中国电影人最缺乏的是耐心</strong>。<br>隐含论点：中国电影存在问题，问题症结在于中国电影人。</p>\n<h2 id=\"澄清观念意义\"><a href=\"#澄清观念意义\" class=\"headerlink\" title=\"澄清观念意义\"></a>澄清观念意义</h2><ul>\n<li><p>电影人<br>包括电影制作人（导演等剧组人员）、编剧、演员等。不包括电影投资方、政府（广电总局？）、观众等。</p>\n</li>\n<li><p>耐心：<br>电影制作人、编剧、演员等直接参与电影创作的人士在电影创作过程中遵循职业道德，不急于求成。</p>\n</li>\n</ul>\n<h2 id=\"分析论证结构-amp-amp-审查理由质量-amp-amp-挖掘隐含假设-amp-amp-考察替代论证\"><a href=\"#分析论证结构-amp-amp-审查理由质量-amp-amp-挖掘隐含假设-amp-amp-考察替代论证\" class=\"headerlink\" title=\"分析论证结构 &amp;&amp; 审查理由质量 &amp;&amp; 挖掘隐含假设 &amp;&amp; 考察替代论证\"></a>分析论证结构 &amp;&amp; 审查理由质量 &amp;&amp; 挖掘隐含假设 &amp;&amp; 考察替代论证</h2><ol>\n<li><p>冯小刚的言论所呈现的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/73602121.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“冯小刚”缺乏耐心的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/89681203.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/9900290.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影正处于非常好的时代”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/82813948.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/80318204.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影的观众很‘健康’”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/12321428.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/51140899.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影有病的部分是电影人”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/54117069.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/30532678.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影人最缺乏的是耐心”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/90450009.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"评价推理关系\"><a href=\"#评价推理关系\" class=\"headerlink\" title=\"评价推理关系\"></a>评价推理关系</h2><h2 id=\"综合组织论证\"><a href=\"#综合组织论证\" class=\"headerlink\" title=\"综合组织论证\"></a>综合组织论证</h2><p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/92914890.jpg\" alt=\"\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml\" target=\"_blank\" rel=\"noopener\">老炮冯小刚又在捏观众这个软柿子了</a></li>\n<li><a href=\"http://opinion.people.com.cn/n1/2017/0630/c1003-29373626.html\" target=\"_blank\" rel=\"noopener\">每日电讯：真正的好电影从来不缺观众</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"中国电影人最缺乏的是耐心吗？\"><a href=\"#中国电影人最缺乏的是耐心吗？\" class=\"headerlink\" title=\"中国电影人最缺乏的是耐心吗？\"></a>中国电影人最缺乏的是耐心吗？</h1><p>标签（空格分隔）： 论证 分析 批判性思维 电影 中国电影 冯小刚 导演 小鲜肉</p>\n<hr>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>本文对以下原文进行基于批判性思维的实例分析。</p>\n<p>last updated: 2017-07-04 20:04:51</p>\n<h1 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h1><p>标题：<a href=\"http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml\" target=\"_blank\" rel=\"noopener\">老炮冯小刚又在捏观众这个软柿子了</a><br>作者：张丰 [上影股份总公司总经理、上海联和电影院线有限责任公司董事长]<br>来源：公号“冰川思享库”（ID:ibingchuansxk）</p>\n<blockquote>\n<p>  随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。<br>    冯小刚为了宣传新电影《芳华》真是拼了，不但上央视《朗读者》节目去读了一首诗，还在上海电影节上炒作了一把。他大骂观众，认为中国“垃圾电影”横行的责任在“垃圾观众”太多，“你不去捧场，就没（垃圾电影）这东西，往往垃圾票房还很好。”<br>　　这话出自冯小刚之口，着实让人吃惊。要知道，在国内导演中，冯小刚被认为是最懂市场的。从90年代开始，几乎每一部他拍的电影，都很叫座。<br>　　可以说，冯小刚三个字已经成为票房的保证，中国电影观众，不管垃圾不垃圾，可都是看着冯小刚的电影长大的。<br>　　没有谁一出生就拥有绝佳的电影品位，所谓观众，其实是由电影创造的，有什么样的电影，就会有什么样的观众。<br>　　因此，我们甚至可以说，是以冯小刚为代表的导演，塑造出了中国的电影观众。如果说中国电影观众很“垃圾”，首先应该检讨的就是冯小刚本人，其次才是张艺谋和陈凯歌。<br>　　冯小刚的愤懑，很有可能和去年的电影《我不是潘金莲》有关，这部在上映前被寄予厚望的“艺术片”，拥有范冰冰这样的超级明星，但最终票房仍然惨败。<br>　　这说明，最近几年，中国电影观众确实发生了某种变化，冯小刚第一次把不住市场（观众）的脉了。<br>　　围绕《我不是潘金莲》的争议有很多，其中最轰动的就是冯小刚与王思聪的互撕。冯小刚认为，万达院线为这部“艺术片”的排片场次太少，而王思聪和万达则坚持“还是市场说了算”，最终，冯小刚和投资方华谊兄弟，并没有说服万达。<br>　　对冯小刚来说，这是一次标志性事件。在此之前，冯小刚可以说是不折不扣的“市场派”，他也并不反感请超级明星，不管是舒淇还是范冰冰，都是大牌。<br>　　而在《我不是潘金莲》之后，冯小刚似乎赌气似的变成了“艺术派”，开始抱怨观众不识货，抱怨明星的派头大。<br>　　毫无疑问，冯小刚陷入了某种创作危机。他不缺乏商业片的经验，但是他的老北京幽默，对90后、95后们不再有吸引力，他的铁杆粉丝是70后和80后，这让他有一种被抛弃感。<br>　　明年就60岁的冯小刚，已经是中国电影的“老人”了吗？至少他是不甘心的，他还要证明自己，从《我不是潘金莲》开始，他几乎在每个场合都标榜电影的艺术性，到今天痛骂电影观众，可谓是逻辑上的某种必然。<br>　　中国电影确实存在很大问题，但是，中国电影最健康的部分，就是观众了。<br>　　今年，一部小成本印度电影《摔跤吧，爸爸》在中国取得了票房与口碑的双丰收，这样一部小成本制作的电影，却俘获了大量观众，这也让中国电影人开始反思，中国电影到底是哪里病了。<br>　　冯小刚所说的排场很大、后面跟着五六个跟班的著名演员，很有可靠是被很多老艺人攻击的“小鲜肉”，零演技，但是光靠颜值就能赚大钱的青年演员，确实是中国电影浮躁的一个集中体现。但是，这些“小鲜肉”并不是中国电影堕落的原因，而是结果。<br>　　中国电影进入了资本驱动时代。院线的扩张，几乎与房地产的蓬勃发展同步，愿意投资电影的巨头也在增多，连阿里、腾讯都在进入电影市场。可以说，中国电影正处在非常好的时代，或许正是市场快速膨胀，才让“好片难寻”的感受更为强烈。<br>　　这也就能解释冯小刚讨厌的小鲜肉名演员，为什么能挣那么多钱。电影市场和小鲜肉一样年轻，而他们也正在殚精竭虑地要赢得未来，国产电影审美的的低龄化、低智化，也就可以理解。涌向影院的观众太多了，而没有足够多元化的影片能对观众做出区分。<br>　　戴锦华教授在和冯小刚对谈时，谈到了院线的垄断，这确实是一个重要的原因。院线的“票房预期”判断，导致一些艺术片根本进不了排片，最后自然也就不愿意有人再投资这样的片子。<br>　　成熟的电影市场，除了所谓商业片外，也会有艺术片、纪录片等各种所谓“小众片”的立足之地，这样才会有一个多元的“市场”，才会有编剧肯花时间推敲剧本，最终才能塑造和吸引一个更多元的观众群。<br>　　本届上海电影节祭出了“用工匠精神，打造中国电影”的大旗，算是找对了方向。所谓“工匠精神”，用著名思想家理查德·桑内特的话，就是那种“为了把事做好而把事做好”的精神，缺乏工匠精神的，可能不止是导演和编剧，还包括院线以及投资方。<br>　　在大家都能轻松赚到钱的时候，就谈不上真正的专业性，但是，随着电影市场的扩展和房地产一样陷入瓶颈，最终会出现真正有技术含量的竞争，到那个时候，“工匠精神”才会值钱。<br>　　桑内特认为，一个人发展出工匠级别的技艺，需要1万小时的练习，如果每天用上3小时，这也需要10年的沉淀，考验中国电影人的，不是决心，而是耐心。从冯小刚身上，我们已经看出中国电影人最缺乏的就是耐心，这可真不是什么好苗头。\n　　</p>\n</blockquote>\n<h1 id=\"分析论证\"><a href=\"#分析论证\" class=\"headerlink\" title=\"分析论证\"></a>分析论证</h1><h2 id=\"理解主题论点\"><a href=\"#理解主题论点\" class=\"headerlink\" title=\"理解主题论点\"></a>理解主题论点</h2><p>核心论点：<strong>中国电影人最缺乏的是耐心</strong>。<br>隐含论点：中国电影存在问题，问题症结在于中国电影人。</p>\n<h2 id=\"澄清观念意义\"><a href=\"#澄清观念意义\" class=\"headerlink\" title=\"澄清观念意义\"></a>澄清观念意义</h2><ul>\n<li><p>电影人<br>包括电影制作人（导演等剧组人员）、编剧、演员等。不包括电影投资方、政府（广电总局？）、观众等。</p>\n</li>\n<li><p>耐心：<br>电影制作人、编剧、演员等直接参与电影创作的人士在电影创作过程中遵循职业道德，不急于求成。</p>\n</li>\n</ul>\n<h2 id=\"分析论证结构-amp-amp-审查理由质量-amp-amp-挖掘隐含假设-amp-amp-考察替代论证\"><a href=\"#分析论证结构-amp-amp-审查理由质量-amp-amp-挖掘隐含假设-amp-amp-考察替代论证\" class=\"headerlink\" title=\"分析论证结构 &amp;&amp; 审查理由质量 &amp;&amp; 挖掘隐含假设 &amp;&amp; 考察替代论证\"></a>分析论证结构 &amp;&amp; 审查理由质量 &amp;&amp; 挖掘隐含假设 &amp;&amp; 考察替代论证</h2><ol>\n<li><p>冯小刚的言论所呈现的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/73602121.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“冯小刚”缺乏耐心的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/89681203.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/9900290.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影正处于非常好的时代”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/82813948.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/80318204.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影的观众很‘健康’”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/12321428.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/51140899.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影有病的部分是电影人”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/54117069.jpg\" alt=\"\"><br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/30532678.jpg\" alt=\"\"></p>\n</li>\n<li><p>得出“中国电影人最缺乏的是耐心”的论证<br><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/90450009.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"评价推理关系\"><a href=\"#评价推理关系\" class=\"headerlink\" title=\"评价推理关系\"></a>评价推理关系</h2><h2 id=\"综合组织论证\"><a href=\"#综合组织论证\" class=\"headerlink\" title=\"综合组织论证\"></a>综合组织论证</h2><p><img src=\"http://opkk27k9n.bkt.clouddn.com/17-7-4/92914890.jpg\" alt=\"\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://news.sina.com.cn/pl/2017-06-20/doc-ifyhfnrf9368732.shtml\" target=\"_blank\" rel=\"noopener\">老炮冯小刚又在捏观众这个软柿子了</a></li>\n<li><a href=\"http://opinion.people.com.cn/n1/2017/0630/c1003-29373626.html\" target=\"_blank\" rel=\"noopener\">每日电讯：真正的好电影从来不缺观众</a></li>\n</ul>\n"},{"date":"2017-08-25T10:49:30.000Z","status":"public","title":"一天：Kafka入门与项目实战","keywords":["Kafka","入门","教程"],"_content":"# 前言\n未完待续。此文将持续更新。\n- v0.1 [初稿：可运行的代码] 2017-08-25 18:50:08\n\n# Quick Start\n- [CET4没过轻松读：Apache 官方最新文档](https://kafka.apache.org/quickstart)\n\n# For Pythoner\n\n直接看Consumer类源码。\n```\nclass KafkaConsumer(six.Iterator):\n    \"\"\"Consume records from a Kafka cluster.\n\n    The consumer will transparently handle the failure of servers in the Kafka\n    cluster, and adapt as topic-partitions are created or migrate between\n    brokers. It also interacts with the assigned kafka Group Coordinator node\n    to allow multiple consumers to load balance consumption of topics (requires\n    kafka >= 0.9.0.0).\n\n    The consumer is not thread safe and should not be shared across threads.\n\n    Arguments:\n        *topics (str): optional list of topics to subscribe to. If not set,\n            call :meth:`~kafka.KafkaConsumer.subscribe` or\n            :meth:`~kafka.KafkaConsumer.assign` before consuming records.\n\n    Keyword Arguments:\n        bootstrap_servers: 'host[:port]' string (or list of 'host[:port]'\n            strings) that the consumer should contact to bootstrap initial\n            cluster metadata. This does not have to be the full node list.\n            It just needs to have at least one broker that will respond to a\n            Metadata API Request. Default port is 9092. If no servers are\n            specified, will default to localhost:9092.\n        client_id (str): A name for this client. This string is passed in\n            each request to servers and can be used to identify specific\n            server-side log entries that correspond to this client. Also\n            submitted to GroupCoordinator for logging with respect to\n            consumer group administration. Default: 'kafka-python-{version}'\n        group_id (str or None): The name of the consumer group to join for dynamic\n            partition assignment (if enabled), and to use for fetching and\n            committing offsets. If None, auto-partition assignment (via\n            group coordinator) and offset commits are disabled.\n            Default: None\n        key_deserializer (callable): Any callable that takes a\n            raw message key and returns a deserialized key.\n        value_deserializer (callable): Any callable that takes a\n            raw message value and returns a deserialized value.\n        fetch_min_bytes (int): Minimum amount of data the server should\n            return for a fetch request, otherwise wait up to\n            fetch_max_wait_ms for more data to accumulate. Default: 1.\n        fetch_max_wait_ms (int): The maximum amount of time in milliseconds\n            the server will block before answering the fetch request if\n            there isn't sufficient data to immediately satisfy the\n            requirement given by fetch_min_bytes. Default: 500.\n        fetch_max_bytes (int): The maximum amount of data the server should\n            return for a fetch request. This is not an absolute maximum, if the\n            first message in the first non-empty partition of the fetch is\n            larger than this value, the message will still be returned to\n            ensure that the consumer can make progress. NOTE: consumer performs\n            fetches to multiple brokers in parallel so memory usage will depend\n            on the number of brokers containing partitions for the topic.\n            Supported Kafka version >= 0.10.1.0. Default: 52428800 (50 Mb).\n        max_partition_fetch_bytes (int): The maximum amount of data\n            per-partition the server will return. The maximum total memory\n            used for a request = #partitions * max_partition_fetch_bytes.\n            This size must be at least as large as the maximum message size\n            the server allows or else it is possible for the producer to\n            send messages larger than the consumer can fetch. If that\n            happens, the consumer can get stuck trying to fetch a large\n            message on a certain partition. Default: 1048576.\n        request_timeout_ms (int): Client request timeout in milliseconds.\n            Default: 40000.\n        retry_backoff_ms (int): Milliseconds to backoff when retrying on\n            errors. Default: 100.\n        reconnect_backoff_ms (int): The amount of time in milliseconds to\n            wait before attempting to reconnect to a given host.\n            Default: 50.\n        reconnect_backoff_max_ms (int): The maximum amount of time in\n            milliseconds to wait when reconnecting to a broker that has\n            repeatedly failed to connect. If provided, the backoff per host\n            will increase exponentially for each consecutive connection\n            failure, up to this maximum. To avoid connection storms, a\n            randomization factor of 0.2 will be applied to the backoff\n            resulting in a random range between 20% below and 20% above\n            the computed value. Default: 1000.\n        max_in_flight_requests_per_connection (int): Requests are pipelined\n            to kafka brokers up to this number of maximum requests per\n            broker connection. Default: 5.\n        auto_offset_reset (str): A policy for resetting offsets on\n            OffsetOutOfRange errors: 'earliest' will move to the oldest\n            available message, 'latest' will move to the most recent. Any\n            other value will raise the exception. Default: 'latest'.\n        enable_auto_commit (bool): If True , the consumer's offset will be\n            periodically committed in the background. Default: True.\n        auto_commit_interval_ms (int): Number of milliseconds between automatic\n            offset commits, if enable_auto_commit is True. Default: 5000.\n        default_offset_commit_callback (callable): Called as\n            callback(offsets, response) response will be either an Exception\n            or an OffsetCommitResponse struct. This callback can be used to\n            trigger custom actions when a commit request completes.\n        check_crcs (bool): Automatically check the CRC32 of the records\n            consumed. This ensures no on-the-wire or on-disk corruption to\n            the messages occurred. This check adds some overhead, so it may\n            be disabled in cases seeking extreme performance. Default: True\n        metadata_max_age_ms (int): The period of time in milliseconds after\n            which we force a refresh of metadata, even if we haven't seen any\n            partition leadership changes to proactively discover any new\n            brokers or partitions. Default: 300000\n        partition_assignment_strategy (list): List of objects to use to\n            distribute partition ownership amongst consumer instances when\n            group management is used.\n            Default: [RangePartitionAssignor, RoundRobinPartitionAssignor]\n        heartbeat_interval_ms (int): The expected time in milliseconds\n            between heartbeats to the consumer coordinator when using\n            Kafka's group management feature. Heartbeats are used to ensure\n            that the consumer's session stays active and to facilitate\n            rebalancing when new consumers join or leave the group. The\n            value must be set lower than session_timeout_ms, but typically\n            should be set no higher than 1/3 of that value. It can be\n            adjusted even lower to control the expected time for normal\n            rebalances. Default: 3000\n        session_timeout_ms (int): The timeout used to detect failures when\n            using Kafka's group management facilities. Default: 30000\n        max_poll_records (int): The maximum number of records returned in a\n            single call to :meth:`~kafka.KafkaConsumer.poll`. Default: 500\n        receive_buffer_bytes (int): The size of the TCP receive buffer\n            (SO_RCVBUF) to use when reading data. Default: None (relies on\n            system defaults). The java client defaults to 32768.\n        send_buffer_bytes (int): The size of the TCP send buffer\n            (SO_SNDBUF) to use when sending data. Default: None (relies on\n            system defaults). The java client defaults to 131072.\n        socket_options (list): List of tuple-arguments to socket.setsockopt\n            to apply to broker connection sockets. Default:\n            [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]\n        consumer_timeout_ms (int): number of milliseconds to block during\n            message iteration before raising StopIteration (i.e., ending the\n            iterator). Default block forever [float('inf')].\n        skip_double_compressed_messages (bool): A bug in KafkaProducer <= 1.2.4\n            caused some messages to be corrupted via double-compression.\n            By default, the fetcher will return these messages as a compressed\n            blob of bytes with a single offset, i.e. how the message was\n            actually published to the cluster. If you prefer to have the\n            fetcher automatically detect corrupt messages and skip them,\n            set this option to True. Default: False.\n        security_protocol (str): Protocol used to communicate with brokers.\n            Valid values are: PLAINTEXT, SSL. Default: PLAINTEXT.\n        ssl_context (ssl.SSLContext): Pre-configured SSLContext for wrapping\n            socket connections. If provided, all other ssl_* configurations\n            will be ignored. Default: None.\n        ssl_check_hostname (bool): Flag to configure whether ssl handshake\n            should verify that the certificate matches the brokers hostname.\n            Default: True.\n        ssl_cafile (str): Optional filename of ca file to use in certificate\n            verification. Default: None.\n        ssl_certfile (str): Optional filename of file in pem format containing\n            the client certificate, as well as any ca certificates needed to\n            establish the certificate's authenticity. Default: None.\n        ssl_keyfile (str): Optional filename containing the client private key.\n            Default: None.\n        ssl_password (str): Optional password to be used when loading the\n            certificate chain. Default: None.\n        ssl_crlfile (str): Optional filename containing the CRL to check for\n            certificate expiration. By default, no CRL check is done. When\n            providing a file, only the leaf certificate will be checked against\n            this CRL. The CRL can only be checked with Python 3.4+ or 2.7.9+.\n            Default: None.\n        api_version (tuple): Specify which Kafka API version to use. If set to\n            None, the client will attempt to infer the broker version by probing\n            various APIs. Different versions enable different functionality.\n\n            Examples:\n                (0, 9) enables full group coordination features with automatic\n                    partition assignment and rebalancing,\n                (0, 8, 2) enables kafka-storage offset commits with manual\n                    partition assignment only,\n                (0, 8, 1) enables zookeeper-storage offset commits with manual\n                    partition assignment only,\n                (0, 8, 0) enables basic functionality but requires manual\n                    partition assignment and offset management.\n\n            For the full list of supported versions, see\n            KafkaClient.API_VERSIONS. Default: None\n        api_version_auto_timeout_ms (int): number of milliseconds to throw a\n            timeout exception from the constructor when checking the broker\n            api version. Only applies if api_version set to 'auto'\n        metric_reporters (list): A list of classes to use as metrics reporters.\n            Implementing the AbstractMetricsReporter interface allows plugging\n            in classes that will be notified of new metric creation. Default: []\n        metrics_num_samples (int): The number of samples maintained to compute\n            metrics. Default: 2\n        metrics_sample_window_ms (int): The maximum age in milliseconds of\n            samples used to compute metrics. Default: 30000\n        selector (selectors.BaseSelector): Provide a specific selector\n            implementation to use for I/O multiplexing.\n            Default: selectors.DefaultSelector\n        exclude_internal_topics (bool): Whether records from internal topics\n            (such as offsets) should be exposed to the consumer. If set to True\n            the only way to receive records from an internal topic is\n            subscribing to it. Requires 0.10+ Default: True\n        sasl_mechanism (str): String picking sasl mechanism when security_protocol\n            is SASL_PLAINTEXT or SASL_SSL. Currently only PLAIN is supported.\n            Default: None\n        sasl_plain_username (str): Username for sasl PLAIN authentication.\n            Default: None\n        sasl_plain_password (str): Password for sasl PLAIN authentication.\n            Default: None\n```\n\n\n- def __next__(self)\n- def _message_generator(self):\n\n- HTTP流式响应：https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88\n\n- https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\n\n\n- Chrome抓包：chrome://net-internals/#requests\n- Kafka入门：http://www.aboutyun.com/thread-12882-1-1.html\n\n# 我的业务需求\n已有实现是pip包客户端从flask服务器获取kafka服务器地址，在客户端直接消费。\n\n需要加上权限认证提升安全性，因此需要交由flask转发kafka日志。\n\n# 服务端实现\n```python\n\n# -*- coding: utf-8 -*-\nfrom flask_restful import Resource, reqparse\nfrom flask import Response, jsonify, g, stream_with_context\nfrom App.common import error_util as ED\nfrom App.views.user_views import auth\nfrom kafka import KafkaConsumer\nimport json\nfrom flask.ctx import _request_ctx_stack\nfrom itertools import chain\n@check_api_cost_time\n@auth.login_required\n@flask_app.route('/api/v1/logs', methods=['GET'], endpoint='task-logs')\ndef get_logs_of_task():\n    parser = reqparse.RequestParser()\n    parser.add_argument('method', type=str, location='args')\n    parser.add_argument('id', type=str, location='args')\n    args = parser.parse_args()\n    if args.get('method') and args.get('method').lower() == 'kafka':\n        task_id = args.get('id')\n        if not task_id:\n            return jsonify(ED.error_response_norm(ED.err_req_data))\n        if not is_owned_by_guser(get_experiment_by_id(task_id)):\n            return jsonify(ED.error_response_norm(ED.err_user_permission))\n\n        res = Response(stream_with_context(chain(celery_log_generator(task_id),container_log_generator(task_id))),\n                       direct_passthrough=True,\n                       mimetype='multipart/x-mixed-replace')\n        # res.headers['Transfer-Encoding'] = 'chunked'\n        return res\n\n\ndef container_log_generator(task_id):\n    consumer = KafkaConsumer(task_id,\n                             bootstrap_servers=flask_app.config['KAFKA_BROKER_URI'],\n                             auto_offset_reset='earliest',\n                             enable_auto_commit=False,\n                             request_timeout_ms=40000,\n                             consumer_timeout_ms=10000)\n    try:\n        for msg in consumer:\n            str_line = json.loads(msg.value).get(\"log\").strip(\"\\n\") + b'\\r\\n'\n            yield bytes(str_line)\n    except StopIteration as e:\n        return\n\ndef celery_log_generator(task_id):\n    path = flask_app.config['UPLOAD_LOG_FOLDER'] + task_id + \"/worker.log\"\n    with open(path) as f:\n        for line in f:\n            yield line\n\n```\n# 客户端实现\n```python\ndef logs(id, tail, sleep_duration=1):\n    \"\"\"\n    Print the logs of the run.\n    \"\"\"\n    # experiment = ExperimentClient().get(id)\n    # task_instance = TaskInstanceClient().get(get_module_task_instance_id(experiment.task_instances))\n\n    # log_server = ExperimentClient().get_log_server(id)\n    # if not log_server:\n    #     russell_logger.info(\"There is not a valid task id\")\n    #     return\n    import logging\n    russell_logger.info(\"loading log...\")\n    logging.disable(sys.maxsize)\n\n    lines = ExperimentClient().get_log_stream(id)\n    if not lines:\n        print(\"No logs....\")\n    for line in lines:\n        print(line)\n    # consumer = KafkaConsumer(id, bootstrap_servers=log_server,\n    #                              auto_offset_reset='earliest', enable_auto_commit=False)\n    # for msg in consumer:\n    #     print(json.loads(msg.value).get(\"log\").strip(\"\\n\"))\n\n    logging.disable(logging.NOTSET)\n\n'''ExperimentClinet(BaseHttpClient'''\n    def get_log_stream(self, id, method='kafka'):\n        timeout = 50\n        response = self.request(\"GET\",\n                                \"/logs\",\n                                params={'method':method, 'id':id},\n                                stream=True,\n                                timeout=timeout)\n        return response.iter_lines()\n'''BaseHttpClient'''\n    \"\"\"\n    Base client for all HTTP operations\n    \"\"\"\nclass BaseHttpClient(object):\n    def __init__(self):\n        self.base_url = \"{}/api/v1\".format(host)\n        self.access_token = AuthConfigManager.get_access_token()\n\n    def request(self,\n                method,\n                url,\n                params=None,\n                data=None,\n                files=None,\n                timeout=5,\n                access_token=None,\n                stream=False):\n        \"\"\"\n        Execute the request using requests library\n        \"\"\"\n        request_url = self.base_url + url\n        russell_logger.debug(\"Starting request to url: {} with params: {}, data: {}\".format(request_url, params, data))\n        if access_token:\n            headers = {\"Authorization\": \"Basic {}\".format(access_token)}\n        else:\n            headers = {\"Authorization\": \"Basic {}\".format(\n                self.access_token.token if self.access_token else None)\n            }\n\n        try:\n            # print \"url: {}\".format(request_url)\n            # print \"params: {}\".format(params)\n            # print \"data: {}\".format(data)\n            response = requests.request(method,\n                                        request_url,\n                                        params=params,\n                                        headers=headers,\n                                        data=data,\n                                        files=files,\n                                        timeout=timeout,\n                                        stream=stream)\n        except requests.exceptions.ConnectionError:\n            sys.exit(\"Cannot connect to the Russell server. Check your internet connection.\")\n\n        if not stream:\n            try:\n                russell_logger.debug(\"Response Content: {}, Headers: {}\".format(response.json(), response.headers))\n            except Exception:\n                russell_logger.debug(\"Request failed. Response: {}\".format(response.content))\n            self.check_response_status(response)\n            print(\"response: {}\".format(json.dumps(response.json())))\n            return response.json()[\"data\"]\n        else:\n            russell_logger.info('HTTP Stream Request/Response...')\n            return response\n```\n\n\n不用flask的stream_with_context，则\n```python\n# @auth.login_required\n# @flask_app.route('/api/v1/logs', methods=['GET'], endpoint='logs')\n# def get_logs_of_task():\n#     ctx = _request_ctx_stack.top.copy()\n#     new_request = ctx.request\n#     new_g = ctx.g\n#     parser = reqparse.RequestParser()\n#     parser.add_argument('method', type=str, location='args')\n#     parser.add_argument('id', type=str, location='args')\n#     args = parser.parse_args()\n#     if args.get('method') and args.get('method').lower() == 'kafka':\n#         log_server = flask_app.config['KAFKA_BROKER_URI']\n#         task_id = args.get('id')\n#         if not task_id:\n#             return jsonify(ED.error_response_norm(ED.err_req_data))\n#         if not getattr(getattr(new_g, 'user', None),'id', None) == getattr(get_experiment_by_id(task_id), 'owner_id', 0):\n#             return jsonify(ED.error_response_norm(ED.err_user_permission))\n    ''''''\n```","source":"_posts/一天：Kafka入门与项目实战.md","raw":"---\ndate: 2017-08-25 18:49:30\nstatus: public\ntitle: 一天：Kafka入门与项目实战\nkeywords: \n- Kafka\n- 入门\n- 教程\ntags: \n- Python\n- flask\n- Kafka\ncategories: \n- 快速入门快速实践\n- 一天\n---\n# 前言\n未完待续。此文将持续更新。\n- v0.1 [初稿：可运行的代码] 2017-08-25 18:50:08\n\n# Quick Start\n- [CET4没过轻松读：Apache 官方最新文档](https://kafka.apache.org/quickstart)\n\n# For Pythoner\n\n直接看Consumer类源码。\n```\nclass KafkaConsumer(six.Iterator):\n    \"\"\"Consume records from a Kafka cluster.\n\n    The consumer will transparently handle the failure of servers in the Kafka\n    cluster, and adapt as topic-partitions are created or migrate between\n    brokers. It also interacts with the assigned kafka Group Coordinator node\n    to allow multiple consumers to load balance consumption of topics (requires\n    kafka >= 0.9.0.0).\n\n    The consumer is not thread safe and should not be shared across threads.\n\n    Arguments:\n        *topics (str): optional list of topics to subscribe to. If not set,\n            call :meth:`~kafka.KafkaConsumer.subscribe` or\n            :meth:`~kafka.KafkaConsumer.assign` before consuming records.\n\n    Keyword Arguments:\n        bootstrap_servers: 'host[:port]' string (or list of 'host[:port]'\n            strings) that the consumer should contact to bootstrap initial\n            cluster metadata. This does not have to be the full node list.\n            It just needs to have at least one broker that will respond to a\n            Metadata API Request. Default port is 9092. If no servers are\n            specified, will default to localhost:9092.\n        client_id (str): A name for this client. This string is passed in\n            each request to servers and can be used to identify specific\n            server-side log entries that correspond to this client. Also\n            submitted to GroupCoordinator for logging with respect to\n            consumer group administration. Default: 'kafka-python-{version}'\n        group_id (str or None): The name of the consumer group to join for dynamic\n            partition assignment (if enabled), and to use for fetching and\n            committing offsets. If None, auto-partition assignment (via\n            group coordinator) and offset commits are disabled.\n            Default: None\n        key_deserializer (callable): Any callable that takes a\n            raw message key and returns a deserialized key.\n        value_deserializer (callable): Any callable that takes a\n            raw message value and returns a deserialized value.\n        fetch_min_bytes (int): Minimum amount of data the server should\n            return for a fetch request, otherwise wait up to\n            fetch_max_wait_ms for more data to accumulate. Default: 1.\n        fetch_max_wait_ms (int): The maximum amount of time in milliseconds\n            the server will block before answering the fetch request if\n            there isn't sufficient data to immediately satisfy the\n            requirement given by fetch_min_bytes. Default: 500.\n        fetch_max_bytes (int): The maximum amount of data the server should\n            return for a fetch request. This is not an absolute maximum, if the\n            first message in the first non-empty partition of the fetch is\n            larger than this value, the message will still be returned to\n            ensure that the consumer can make progress. NOTE: consumer performs\n            fetches to multiple brokers in parallel so memory usage will depend\n            on the number of brokers containing partitions for the topic.\n            Supported Kafka version >= 0.10.1.0. Default: 52428800 (50 Mb).\n        max_partition_fetch_bytes (int): The maximum amount of data\n            per-partition the server will return. The maximum total memory\n            used for a request = #partitions * max_partition_fetch_bytes.\n            This size must be at least as large as the maximum message size\n            the server allows or else it is possible for the producer to\n            send messages larger than the consumer can fetch. If that\n            happens, the consumer can get stuck trying to fetch a large\n            message on a certain partition. Default: 1048576.\n        request_timeout_ms (int): Client request timeout in milliseconds.\n            Default: 40000.\n        retry_backoff_ms (int): Milliseconds to backoff when retrying on\n            errors. Default: 100.\n        reconnect_backoff_ms (int): The amount of time in milliseconds to\n            wait before attempting to reconnect to a given host.\n            Default: 50.\n        reconnect_backoff_max_ms (int): The maximum amount of time in\n            milliseconds to wait when reconnecting to a broker that has\n            repeatedly failed to connect. If provided, the backoff per host\n            will increase exponentially for each consecutive connection\n            failure, up to this maximum. To avoid connection storms, a\n            randomization factor of 0.2 will be applied to the backoff\n            resulting in a random range between 20% below and 20% above\n            the computed value. Default: 1000.\n        max_in_flight_requests_per_connection (int): Requests are pipelined\n            to kafka brokers up to this number of maximum requests per\n            broker connection. Default: 5.\n        auto_offset_reset (str): A policy for resetting offsets on\n            OffsetOutOfRange errors: 'earliest' will move to the oldest\n            available message, 'latest' will move to the most recent. Any\n            other value will raise the exception. Default: 'latest'.\n        enable_auto_commit (bool): If True , the consumer's offset will be\n            periodically committed in the background. Default: True.\n        auto_commit_interval_ms (int): Number of milliseconds between automatic\n            offset commits, if enable_auto_commit is True. Default: 5000.\n        default_offset_commit_callback (callable): Called as\n            callback(offsets, response) response will be either an Exception\n            or an OffsetCommitResponse struct. This callback can be used to\n            trigger custom actions when a commit request completes.\n        check_crcs (bool): Automatically check the CRC32 of the records\n            consumed. This ensures no on-the-wire or on-disk corruption to\n            the messages occurred. This check adds some overhead, so it may\n            be disabled in cases seeking extreme performance. Default: True\n        metadata_max_age_ms (int): The period of time in milliseconds after\n            which we force a refresh of metadata, even if we haven't seen any\n            partition leadership changes to proactively discover any new\n            brokers or partitions. Default: 300000\n        partition_assignment_strategy (list): List of objects to use to\n            distribute partition ownership amongst consumer instances when\n            group management is used.\n            Default: [RangePartitionAssignor, RoundRobinPartitionAssignor]\n        heartbeat_interval_ms (int): The expected time in milliseconds\n            between heartbeats to the consumer coordinator when using\n            Kafka's group management feature. Heartbeats are used to ensure\n            that the consumer's session stays active and to facilitate\n            rebalancing when new consumers join or leave the group. The\n            value must be set lower than session_timeout_ms, but typically\n            should be set no higher than 1/3 of that value. It can be\n            adjusted even lower to control the expected time for normal\n            rebalances. Default: 3000\n        session_timeout_ms (int): The timeout used to detect failures when\n            using Kafka's group management facilities. Default: 30000\n        max_poll_records (int): The maximum number of records returned in a\n            single call to :meth:`~kafka.KafkaConsumer.poll`. Default: 500\n        receive_buffer_bytes (int): The size of the TCP receive buffer\n            (SO_RCVBUF) to use when reading data. Default: None (relies on\n            system defaults). The java client defaults to 32768.\n        send_buffer_bytes (int): The size of the TCP send buffer\n            (SO_SNDBUF) to use when sending data. Default: None (relies on\n            system defaults). The java client defaults to 131072.\n        socket_options (list): List of tuple-arguments to socket.setsockopt\n            to apply to broker connection sockets. Default:\n            [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]\n        consumer_timeout_ms (int): number of milliseconds to block during\n            message iteration before raising StopIteration (i.e., ending the\n            iterator). Default block forever [float('inf')].\n        skip_double_compressed_messages (bool): A bug in KafkaProducer <= 1.2.4\n            caused some messages to be corrupted via double-compression.\n            By default, the fetcher will return these messages as a compressed\n            blob of bytes with a single offset, i.e. how the message was\n            actually published to the cluster. If you prefer to have the\n            fetcher automatically detect corrupt messages and skip them,\n            set this option to True. Default: False.\n        security_protocol (str): Protocol used to communicate with brokers.\n            Valid values are: PLAINTEXT, SSL. Default: PLAINTEXT.\n        ssl_context (ssl.SSLContext): Pre-configured SSLContext for wrapping\n            socket connections. If provided, all other ssl_* configurations\n            will be ignored. Default: None.\n        ssl_check_hostname (bool): Flag to configure whether ssl handshake\n            should verify that the certificate matches the brokers hostname.\n            Default: True.\n        ssl_cafile (str): Optional filename of ca file to use in certificate\n            verification. Default: None.\n        ssl_certfile (str): Optional filename of file in pem format containing\n            the client certificate, as well as any ca certificates needed to\n            establish the certificate's authenticity. Default: None.\n        ssl_keyfile (str): Optional filename containing the client private key.\n            Default: None.\n        ssl_password (str): Optional password to be used when loading the\n            certificate chain. Default: None.\n        ssl_crlfile (str): Optional filename containing the CRL to check for\n            certificate expiration. By default, no CRL check is done. When\n            providing a file, only the leaf certificate will be checked against\n            this CRL. The CRL can only be checked with Python 3.4+ or 2.7.9+.\n            Default: None.\n        api_version (tuple): Specify which Kafka API version to use. If set to\n            None, the client will attempt to infer the broker version by probing\n            various APIs. Different versions enable different functionality.\n\n            Examples:\n                (0, 9) enables full group coordination features with automatic\n                    partition assignment and rebalancing,\n                (0, 8, 2) enables kafka-storage offset commits with manual\n                    partition assignment only,\n                (0, 8, 1) enables zookeeper-storage offset commits with manual\n                    partition assignment only,\n                (0, 8, 0) enables basic functionality but requires manual\n                    partition assignment and offset management.\n\n            For the full list of supported versions, see\n            KafkaClient.API_VERSIONS. Default: None\n        api_version_auto_timeout_ms (int): number of milliseconds to throw a\n            timeout exception from the constructor when checking the broker\n            api version. Only applies if api_version set to 'auto'\n        metric_reporters (list): A list of classes to use as metrics reporters.\n            Implementing the AbstractMetricsReporter interface allows plugging\n            in classes that will be notified of new metric creation. Default: []\n        metrics_num_samples (int): The number of samples maintained to compute\n            metrics. Default: 2\n        metrics_sample_window_ms (int): The maximum age in milliseconds of\n            samples used to compute metrics. Default: 30000\n        selector (selectors.BaseSelector): Provide a specific selector\n            implementation to use for I/O multiplexing.\n            Default: selectors.DefaultSelector\n        exclude_internal_topics (bool): Whether records from internal topics\n            (such as offsets) should be exposed to the consumer. If set to True\n            the only way to receive records from an internal topic is\n            subscribing to it. Requires 0.10+ Default: True\n        sasl_mechanism (str): String picking sasl mechanism when security_protocol\n            is SASL_PLAINTEXT or SASL_SSL. Currently only PLAIN is supported.\n            Default: None\n        sasl_plain_username (str): Username for sasl PLAIN authentication.\n            Default: None\n        sasl_plain_password (str): Password for sasl PLAIN authentication.\n            Default: None\n```\n\n\n- def __next__(self)\n- def _message_generator(self):\n\n- HTTP流式响应：https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88\n\n- https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\n\n\n- Chrome抓包：chrome://net-internals/#requests\n- Kafka入门：http://www.aboutyun.com/thread-12882-1-1.html\n\n# 我的业务需求\n已有实现是pip包客户端从flask服务器获取kafka服务器地址，在客户端直接消费。\n\n需要加上权限认证提升安全性，因此需要交由flask转发kafka日志。\n\n# 服务端实现\n```python\n\n# -*- coding: utf-8 -*-\nfrom flask_restful import Resource, reqparse\nfrom flask import Response, jsonify, g, stream_with_context\nfrom App.common import error_util as ED\nfrom App.views.user_views import auth\nfrom kafka import KafkaConsumer\nimport json\nfrom flask.ctx import _request_ctx_stack\nfrom itertools import chain\n@check_api_cost_time\n@auth.login_required\n@flask_app.route('/api/v1/logs', methods=['GET'], endpoint='task-logs')\ndef get_logs_of_task():\n    parser = reqparse.RequestParser()\n    parser.add_argument('method', type=str, location='args')\n    parser.add_argument('id', type=str, location='args')\n    args = parser.parse_args()\n    if args.get('method') and args.get('method').lower() == 'kafka':\n        task_id = args.get('id')\n        if not task_id:\n            return jsonify(ED.error_response_norm(ED.err_req_data))\n        if not is_owned_by_guser(get_experiment_by_id(task_id)):\n            return jsonify(ED.error_response_norm(ED.err_user_permission))\n\n        res = Response(stream_with_context(chain(celery_log_generator(task_id),container_log_generator(task_id))),\n                       direct_passthrough=True,\n                       mimetype='multipart/x-mixed-replace')\n        # res.headers['Transfer-Encoding'] = 'chunked'\n        return res\n\n\ndef container_log_generator(task_id):\n    consumer = KafkaConsumer(task_id,\n                             bootstrap_servers=flask_app.config['KAFKA_BROKER_URI'],\n                             auto_offset_reset='earliest',\n                             enable_auto_commit=False,\n                             request_timeout_ms=40000,\n                             consumer_timeout_ms=10000)\n    try:\n        for msg in consumer:\n            str_line = json.loads(msg.value).get(\"log\").strip(\"\\n\") + b'\\r\\n'\n            yield bytes(str_line)\n    except StopIteration as e:\n        return\n\ndef celery_log_generator(task_id):\n    path = flask_app.config['UPLOAD_LOG_FOLDER'] + task_id + \"/worker.log\"\n    with open(path) as f:\n        for line in f:\n            yield line\n\n```\n# 客户端实现\n```python\ndef logs(id, tail, sleep_duration=1):\n    \"\"\"\n    Print the logs of the run.\n    \"\"\"\n    # experiment = ExperimentClient().get(id)\n    # task_instance = TaskInstanceClient().get(get_module_task_instance_id(experiment.task_instances))\n\n    # log_server = ExperimentClient().get_log_server(id)\n    # if not log_server:\n    #     russell_logger.info(\"There is not a valid task id\")\n    #     return\n    import logging\n    russell_logger.info(\"loading log...\")\n    logging.disable(sys.maxsize)\n\n    lines = ExperimentClient().get_log_stream(id)\n    if not lines:\n        print(\"No logs....\")\n    for line in lines:\n        print(line)\n    # consumer = KafkaConsumer(id, bootstrap_servers=log_server,\n    #                              auto_offset_reset='earliest', enable_auto_commit=False)\n    # for msg in consumer:\n    #     print(json.loads(msg.value).get(\"log\").strip(\"\\n\"))\n\n    logging.disable(logging.NOTSET)\n\n'''ExperimentClinet(BaseHttpClient'''\n    def get_log_stream(self, id, method='kafka'):\n        timeout = 50\n        response = self.request(\"GET\",\n                                \"/logs\",\n                                params={'method':method, 'id':id},\n                                stream=True,\n                                timeout=timeout)\n        return response.iter_lines()\n'''BaseHttpClient'''\n    \"\"\"\n    Base client for all HTTP operations\n    \"\"\"\nclass BaseHttpClient(object):\n    def __init__(self):\n        self.base_url = \"{}/api/v1\".format(host)\n        self.access_token = AuthConfigManager.get_access_token()\n\n    def request(self,\n                method,\n                url,\n                params=None,\n                data=None,\n                files=None,\n                timeout=5,\n                access_token=None,\n                stream=False):\n        \"\"\"\n        Execute the request using requests library\n        \"\"\"\n        request_url = self.base_url + url\n        russell_logger.debug(\"Starting request to url: {} with params: {}, data: {}\".format(request_url, params, data))\n        if access_token:\n            headers = {\"Authorization\": \"Basic {}\".format(access_token)}\n        else:\n            headers = {\"Authorization\": \"Basic {}\".format(\n                self.access_token.token if self.access_token else None)\n            }\n\n        try:\n            # print \"url: {}\".format(request_url)\n            # print \"params: {}\".format(params)\n            # print \"data: {}\".format(data)\n            response = requests.request(method,\n                                        request_url,\n                                        params=params,\n                                        headers=headers,\n                                        data=data,\n                                        files=files,\n                                        timeout=timeout,\n                                        stream=stream)\n        except requests.exceptions.ConnectionError:\n            sys.exit(\"Cannot connect to the Russell server. Check your internet connection.\")\n\n        if not stream:\n            try:\n                russell_logger.debug(\"Response Content: {}, Headers: {}\".format(response.json(), response.headers))\n            except Exception:\n                russell_logger.debug(\"Request failed. Response: {}\".format(response.content))\n            self.check_response_status(response)\n            print(\"response: {}\".format(json.dumps(response.json())))\n            return response.json()[\"data\"]\n        else:\n            russell_logger.info('HTTP Stream Request/Response...')\n            return response\n```\n\n\n不用flask的stream_with_context，则\n```python\n# @auth.login_required\n# @flask_app.route('/api/v1/logs', methods=['GET'], endpoint='logs')\n# def get_logs_of_task():\n#     ctx = _request_ctx_stack.top.copy()\n#     new_request = ctx.request\n#     new_g = ctx.g\n#     parser = reqparse.RequestParser()\n#     parser.add_argument('method', type=str, location='args')\n#     parser.add_argument('id', type=str, location='args')\n#     args = parser.parse_args()\n#     if args.get('method') and args.get('method').lower() == 'kafka':\n#         log_server = flask_app.config['KAFKA_BROKER_URI']\n#         task_id = args.get('id')\n#         if not task_id:\n#             return jsonify(ED.error_response_norm(ED.err_req_data))\n#         if not getattr(getattr(new_g, 'user', None),'id', None) == getattr(get_experiment_by_id(task_id), 'owner_id', 0):\n#             return jsonify(ED.error_response_norm(ED.err_user_permission))\n    ''''''\n```","slug":"一天：Kafka入门与项目实战","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8ah0015c4xkrhxlbiob","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>未完待续。此文将持续更新。</p>\n<ul>\n<li>v0.1 [初稿：可运行的代码] 2017-08-25 18:50:08</li>\n</ul>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><ul>\n<li><a href=\"https://kafka.apache.org/quickstart\" target=\"_blank\" rel=\"noopener\">CET4没过轻松读：Apache 官方最新文档</a></li>\n</ul>\n<h1 id=\"For-Pythoner\"><a href=\"#For-Pythoner\" class=\"headerlink\" title=\"For Pythoner\"></a>For Pythoner</h1><p>直接看Consumer类源码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class KafkaConsumer(six.Iterator):</span><br><span class=\"line\">    &quot;&quot;&quot;Consume records from a Kafka cluster.</span><br><span class=\"line\"></span><br><span class=\"line\">    The consumer will transparently handle the failure of servers in the Kafka</span><br><span class=\"line\">    cluster, and adapt as topic-partitions are created or migrate between</span><br><span class=\"line\">    brokers. It also interacts with the assigned kafka Group Coordinator node</span><br><span class=\"line\">    to allow multiple consumers to load balance consumption of topics (requires</span><br><span class=\"line\">    kafka &gt;= 0.9.0.0).</span><br><span class=\"line\"></span><br><span class=\"line\">    The consumer is not thread safe and should not be shared across threads.</span><br><span class=\"line\"></span><br><span class=\"line\">    Arguments:</span><br><span class=\"line\">        *topics (str): optional list of topics to subscribe to. If not set,</span><br><span class=\"line\">            call :meth:`~kafka.KafkaConsumer.subscribe` or</span><br><span class=\"line\">            :meth:`~kafka.KafkaConsumer.assign` before consuming records.</span><br><span class=\"line\"></span><br><span class=\"line\">    Keyword Arguments:</span><br><span class=\"line\">        bootstrap_servers: &apos;host[:port]&apos; string (or list of &apos;host[:port]&apos;</span><br><span class=\"line\">            strings) that the consumer should contact to bootstrap initial</span><br><span class=\"line\">            cluster metadata. This does not have to be the full node list.</span><br><span class=\"line\">            It just needs to have at least one broker that will respond to a</span><br><span class=\"line\">            Metadata API Request. Default port is 9092. If no servers are</span><br><span class=\"line\">            specified, will default to localhost:9092.</span><br><span class=\"line\">        client_id (str): A name for this client. This string is passed in</span><br><span class=\"line\">            each request to servers and can be used to identify specific</span><br><span class=\"line\">            server-side log entries that correspond to this client. Also</span><br><span class=\"line\">            submitted to GroupCoordinator for logging with respect to</span><br><span class=\"line\">            consumer group administration. Default: &apos;kafka-python-&#123;version&#125;&apos;</span><br><span class=\"line\">        group_id (str or None): The name of the consumer group to join for dynamic</span><br><span class=\"line\">            partition assignment (if enabled), and to use for fetching and</span><br><span class=\"line\">            committing offsets. If None, auto-partition assignment (via</span><br><span class=\"line\">            group coordinator) and offset commits are disabled.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        key_deserializer (callable): Any callable that takes a</span><br><span class=\"line\">            raw message key and returns a deserialized key.</span><br><span class=\"line\">        value_deserializer (callable): Any callable that takes a</span><br><span class=\"line\">            raw message value and returns a deserialized value.</span><br><span class=\"line\">        fetch_min_bytes (int): Minimum amount of data the server should</span><br><span class=\"line\">            return for a fetch request, otherwise wait up to</span><br><span class=\"line\">            fetch_max_wait_ms for more data to accumulate. Default: 1.</span><br><span class=\"line\">        fetch_max_wait_ms (int): The maximum amount of time in milliseconds</span><br><span class=\"line\">            the server will block before answering the fetch request if</span><br><span class=\"line\">            there isn&apos;t sufficient data to immediately satisfy the</span><br><span class=\"line\">            requirement given by fetch_min_bytes. Default: 500.</span><br><span class=\"line\">        fetch_max_bytes (int): The maximum amount of data the server should</span><br><span class=\"line\">            return for a fetch request. This is not an absolute maximum, if the</span><br><span class=\"line\">            first message in the first non-empty partition of the fetch is</span><br><span class=\"line\">            larger than this value, the message will still be returned to</span><br><span class=\"line\">            ensure that the consumer can make progress. NOTE: consumer performs</span><br><span class=\"line\">            fetches to multiple brokers in parallel so memory usage will depend</span><br><span class=\"line\">            on the number of brokers containing partitions for the topic.</span><br><span class=\"line\">            Supported Kafka version &gt;= 0.10.1.0. Default: 52428800 (50 Mb).</span><br><span class=\"line\">        max_partition_fetch_bytes (int): The maximum amount of data</span><br><span class=\"line\">            per-partition the server will return. The maximum total memory</span><br><span class=\"line\">            used for a request = #partitions * max_partition_fetch_bytes.</span><br><span class=\"line\">            This size must be at least as large as the maximum message size</span><br><span class=\"line\">            the server allows or else it is possible for the producer to</span><br><span class=\"line\">            send messages larger than the consumer can fetch. If that</span><br><span class=\"line\">            happens, the consumer can get stuck trying to fetch a large</span><br><span class=\"line\">            message on a certain partition. Default: 1048576.</span><br><span class=\"line\">        request_timeout_ms (int): Client request timeout in milliseconds.</span><br><span class=\"line\">            Default: 40000.</span><br><span class=\"line\">        retry_backoff_ms (int): Milliseconds to backoff when retrying on</span><br><span class=\"line\">            errors. Default: 100.</span><br><span class=\"line\">        reconnect_backoff_ms (int): The amount of time in milliseconds to</span><br><span class=\"line\">            wait before attempting to reconnect to a given host.</span><br><span class=\"line\">            Default: 50.</span><br><span class=\"line\">        reconnect_backoff_max_ms (int): The maximum amount of time in</span><br><span class=\"line\">            milliseconds to wait when reconnecting to a broker that has</span><br><span class=\"line\">            repeatedly failed to connect. If provided, the backoff per host</span><br><span class=\"line\">            will increase exponentially for each consecutive connection</span><br><span class=\"line\">            failure, up to this maximum. To avoid connection storms, a</span><br><span class=\"line\">            randomization factor of 0.2 will be applied to the backoff</span><br><span class=\"line\">            resulting in a random range between 20% below and 20% above</span><br><span class=\"line\">            the computed value. Default: 1000.</span><br><span class=\"line\">        max_in_flight_requests_per_connection (int): Requests are pipelined</span><br><span class=\"line\">            to kafka brokers up to this number of maximum requests per</span><br><span class=\"line\">            broker connection. Default: 5.</span><br><span class=\"line\">        auto_offset_reset (str): A policy for resetting offsets on</span><br><span class=\"line\">            OffsetOutOfRange errors: &apos;earliest&apos; will move to the oldest</span><br><span class=\"line\">            available message, &apos;latest&apos; will move to the most recent. Any</span><br><span class=\"line\">            other value will raise the exception. Default: &apos;latest&apos;.</span><br><span class=\"line\">        enable_auto_commit (bool): If True , the consumer&apos;s offset will be</span><br><span class=\"line\">            periodically committed in the background. Default: True.</span><br><span class=\"line\">        auto_commit_interval_ms (int): Number of milliseconds between automatic</span><br><span class=\"line\">            offset commits, if enable_auto_commit is True. Default: 5000.</span><br><span class=\"line\">        default_offset_commit_callback (callable): Called as</span><br><span class=\"line\">            callback(offsets, response) response will be either an Exception</span><br><span class=\"line\">            or an OffsetCommitResponse struct. This callback can be used to</span><br><span class=\"line\">            trigger custom actions when a commit request completes.</span><br><span class=\"line\">        check_crcs (bool): Automatically check the CRC32 of the records</span><br><span class=\"line\">            consumed. This ensures no on-the-wire or on-disk corruption to</span><br><span class=\"line\">            the messages occurred. This check adds some overhead, so it may</span><br><span class=\"line\">            be disabled in cases seeking extreme performance. Default: True</span><br><span class=\"line\">        metadata_max_age_ms (int): The period of time in milliseconds after</span><br><span class=\"line\">            which we force a refresh of metadata, even if we haven&apos;t seen any</span><br><span class=\"line\">            partition leadership changes to proactively discover any new</span><br><span class=\"line\">            brokers or partitions. Default: 300000</span><br><span class=\"line\">        partition_assignment_strategy (list): List of objects to use to</span><br><span class=\"line\">            distribute partition ownership amongst consumer instances when</span><br><span class=\"line\">            group management is used.</span><br><span class=\"line\">            Default: [RangePartitionAssignor, RoundRobinPartitionAssignor]</span><br><span class=\"line\">        heartbeat_interval_ms (int): The expected time in milliseconds</span><br><span class=\"line\">            between heartbeats to the consumer coordinator when using</span><br><span class=\"line\">            Kafka&apos;s group management feature. Heartbeats are used to ensure</span><br><span class=\"line\">            that the consumer&apos;s session stays active and to facilitate</span><br><span class=\"line\">            rebalancing when new consumers join or leave the group. The</span><br><span class=\"line\">            value must be set lower than session_timeout_ms, but typically</span><br><span class=\"line\">            should be set no higher than 1/3 of that value. It can be</span><br><span class=\"line\">            adjusted even lower to control the expected time for normal</span><br><span class=\"line\">            rebalances. Default: 3000</span><br><span class=\"line\">        session_timeout_ms (int): The timeout used to detect failures when</span><br><span class=\"line\">            using Kafka&apos;s group management facilities. Default: 30000</span><br><span class=\"line\">        max_poll_records (int): The maximum number of records returned in a</span><br><span class=\"line\">            single call to :meth:`~kafka.KafkaConsumer.poll`. Default: 500</span><br><span class=\"line\">        receive_buffer_bytes (int): The size of the TCP receive buffer</span><br><span class=\"line\">            (SO_RCVBUF) to use when reading data. Default: None (relies on</span><br><span class=\"line\">            system defaults). The java client defaults to 32768.</span><br><span class=\"line\">        send_buffer_bytes (int): The size of the TCP send buffer</span><br><span class=\"line\">            (SO_SNDBUF) to use when sending data. Default: None (relies on</span><br><span class=\"line\">            system defaults). The java client defaults to 131072.</span><br><span class=\"line\">        socket_options (list): List of tuple-arguments to socket.setsockopt</span><br><span class=\"line\">            to apply to broker connection sockets. Default:</span><br><span class=\"line\">            [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]</span><br><span class=\"line\">        consumer_timeout_ms (int): number of milliseconds to block during</span><br><span class=\"line\">            message iteration before raising StopIteration (i.e., ending the</span><br><span class=\"line\">            iterator). Default block forever [float(&apos;inf&apos;)].</span><br><span class=\"line\">        skip_double_compressed_messages (bool): A bug in KafkaProducer &lt;= 1.2.4</span><br><span class=\"line\">            caused some messages to be corrupted via double-compression.</span><br><span class=\"line\">            By default, the fetcher will return these messages as a compressed</span><br><span class=\"line\">            blob of bytes with a single offset, i.e. how the message was</span><br><span class=\"line\">            actually published to the cluster. If you prefer to have the</span><br><span class=\"line\">            fetcher automatically detect corrupt messages and skip them,</span><br><span class=\"line\">            set this option to True. Default: False.</span><br><span class=\"line\">        security_protocol (str): Protocol used to communicate with brokers.</span><br><span class=\"line\">            Valid values are: PLAINTEXT, SSL. Default: PLAINTEXT.</span><br><span class=\"line\">        ssl_context (ssl.SSLContext): Pre-configured SSLContext for wrapping</span><br><span class=\"line\">            socket connections. If provided, all other ssl_* configurations</span><br><span class=\"line\">            will be ignored. Default: None.</span><br><span class=\"line\">        ssl_check_hostname (bool): Flag to configure whether ssl handshake</span><br><span class=\"line\">            should verify that the certificate matches the brokers hostname.</span><br><span class=\"line\">            Default: True.</span><br><span class=\"line\">        ssl_cafile (str): Optional filename of ca file to use in certificate</span><br><span class=\"line\">            verification. Default: None.</span><br><span class=\"line\">        ssl_certfile (str): Optional filename of file in pem format containing</span><br><span class=\"line\">            the client certificate, as well as any ca certificates needed to</span><br><span class=\"line\">            establish the certificate&apos;s authenticity. Default: None.</span><br><span class=\"line\">        ssl_keyfile (str): Optional filename containing the client private key.</span><br><span class=\"line\">            Default: None.</span><br><span class=\"line\">        ssl_password (str): Optional password to be used when loading the</span><br><span class=\"line\">            certificate chain. Default: None.</span><br><span class=\"line\">        ssl_crlfile (str): Optional filename containing the CRL to check for</span><br><span class=\"line\">            certificate expiration. By default, no CRL check is done. When</span><br><span class=\"line\">            providing a file, only the leaf certificate will be checked against</span><br><span class=\"line\">            this CRL. The CRL can only be checked with Python 3.4+ or 2.7.9+.</span><br><span class=\"line\">            Default: None.</span><br><span class=\"line\">        api_version (tuple): Specify which Kafka API version to use. If set to</span><br><span class=\"line\">            None, the client will attempt to infer the broker version by probing</span><br><span class=\"line\">            various APIs. Different versions enable different functionality.</span><br><span class=\"line\"></span><br><span class=\"line\">            Examples:</span><br><span class=\"line\">                (0, 9) enables full group coordination features with automatic</span><br><span class=\"line\">                    partition assignment and rebalancing,</span><br><span class=\"line\">                (0, 8, 2) enables kafka-storage offset commits with manual</span><br><span class=\"line\">                    partition assignment only,</span><br><span class=\"line\">                (0, 8, 1) enables zookeeper-storage offset commits with manual</span><br><span class=\"line\">                    partition assignment only,</span><br><span class=\"line\">                (0, 8, 0) enables basic functionality but requires manual</span><br><span class=\"line\">                    partition assignment and offset management.</span><br><span class=\"line\"></span><br><span class=\"line\">            For the full list of supported versions, see</span><br><span class=\"line\">            KafkaClient.API_VERSIONS. Default: None</span><br><span class=\"line\">        api_version_auto_timeout_ms (int): number of milliseconds to throw a</span><br><span class=\"line\">            timeout exception from the constructor when checking the broker</span><br><span class=\"line\">            api version. Only applies if api_version set to &apos;auto&apos;</span><br><span class=\"line\">        metric_reporters (list): A list of classes to use as metrics reporters.</span><br><span class=\"line\">            Implementing the AbstractMetricsReporter interface allows plugging</span><br><span class=\"line\">            in classes that will be notified of new metric creation. Default: []</span><br><span class=\"line\">        metrics_num_samples (int): The number of samples maintained to compute</span><br><span class=\"line\">            metrics. Default: 2</span><br><span class=\"line\">        metrics_sample_window_ms (int): The maximum age in milliseconds of</span><br><span class=\"line\">            samples used to compute metrics. Default: 30000</span><br><span class=\"line\">        selector (selectors.BaseSelector): Provide a specific selector</span><br><span class=\"line\">            implementation to use for I/O multiplexing.</span><br><span class=\"line\">            Default: selectors.DefaultSelector</span><br><span class=\"line\">        exclude_internal_topics (bool): Whether records from internal topics</span><br><span class=\"line\">            (such as offsets) should be exposed to the consumer. If set to True</span><br><span class=\"line\">            the only way to receive records from an internal topic is</span><br><span class=\"line\">            subscribing to it. Requires 0.10+ Default: True</span><br><span class=\"line\">        sasl_mechanism (str): String picking sasl mechanism when security_protocol</span><br><span class=\"line\">            is SASL_PLAINTEXT or SASL_SSL. Currently only PLAIN is supported.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        sasl_plain_username (str): Username for sasl PLAIN authentication.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        sasl_plain_password (str): Password for sasl PLAIN authentication.</span><br><span class=\"line\">            Default: None</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>def <strong>next</strong>(self)</li>\n<li><p>def _message_generator(self):</p>\n</li>\n<li><p>HTTP流式响应：<a href=\"https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88</a></p>\n</li>\n<li><p><a href=\"https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html</a></p>\n</li>\n</ul>\n<ul>\n<li>Chrome抓包：chrome://net-internals/#requests</li>\n<li>Kafka入门：<a href=\"http://www.aboutyun.com/thread-12882-1-1.html\" target=\"_blank\" rel=\"noopener\">http://www.aboutyun.com/thread-12882-1-1.html</a></li>\n</ul>\n<h1 id=\"我的业务需求\"><a href=\"#我的业务需求\" class=\"headerlink\" title=\"我的业务需求\"></a>我的业务需求</h1><p>已有实现是pip包客户端从flask服务器获取kafka服务器地址，在客户端直接消费。</p>\n<p>需要加上权限认证提升安全性，因此需要交由flask转发kafka日志。</p>\n<h1 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> Resource, reqparse</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Response, jsonify, g, stream_with_context</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.common <span class=\"keyword\">import</span> error_util <span class=\"keyword\">as</span> ED</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.views.user_views <span class=\"keyword\">import</span> auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> kafka <span class=\"keyword\">import</span> KafkaConsumer</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask.ctx <span class=\"keyword\">import</span> _request_ctx_stack</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"><span class=\"meta\">@check_api_cost_time</span></span><br><span class=\"line\"><span class=\"meta\">@auth.login_required</span></span><br><span class=\"line\"><span class=\"meta\">@flask_app.route('/api/v1/logs', methods=['GET'], endpoint='task-logs')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_logs_of_task</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = reqparse.RequestParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'method'</span>, type=str, location=<span class=\"string\">'args'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'id'</span>, type=str, location=<span class=\"string\">'args'</span>)</span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.get(<span class=\"string\">'method'</span>) <span class=\"keyword\">and</span> args.get(<span class=\"string\">'method'</span>).lower() == <span class=\"string\">'kafka'</span>:</span><br><span class=\"line\">        task_id = args.get(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> task_id:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> jsonify(ED.error_response_norm(ED.err_req_data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_owned_by_guser(get_experiment_by_id(task_id)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> jsonify(ED.error_response_norm(ED.err_user_permission))</span><br><span class=\"line\"></span><br><span class=\"line\">        res = Response(stream_with_context(chain(celery_log_generator(task_id),container_log_generator(task_id))),</span><br><span class=\"line\">                       direct_passthrough=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                       mimetype=<span class=\"string\">'multipart/x-mixed-replace'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># res.headers['Transfer-Encoding'] = 'chunked'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">container_log_generator</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    consumer = KafkaConsumer(task_id,</span><br><span class=\"line\">                             bootstrap_servers=flask_app.config[<span class=\"string\">'KAFKA_BROKER_URI'</span>],</span><br><span class=\"line\">                             auto_offset_reset=<span class=\"string\">'earliest'</span>,</span><br><span class=\"line\">                             enable_auto_commit=<span class=\"keyword\">False</span>,</span><br><span class=\"line\">                             request_timeout_ms=<span class=\"number\">40000</span>,</span><br><span class=\"line\">                             consumer_timeout_ms=<span class=\"number\">10000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> consumer:</span><br><span class=\"line\">            str_line = json.loads(msg.value).get(<span class=\"string\">\"log\"</span>).strip(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">b'\\r\\n'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> bytes(str_line)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">celery_log_generator</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    path = flask_app.config[<span class=\"string\">'UPLOAD_LOG_FOLDER'</span>] + task_id + <span class=\"string\">\"/worker.log\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> line</span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logs</span><span class=\"params\">(id, tail, sleep_duration=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Print the logs of the run.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># experiment = ExperimentClient().get(id)</span></span><br><span class=\"line\">    <span class=\"comment\"># task_instance = TaskInstanceClient().get(get_module_task_instance_id(experiment.task_instances))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># log_server = ExperimentClient().get_log_server(id)</span></span><br><span class=\"line\">    <span class=\"comment\"># if not log_server:</span></span><br><span class=\"line\">    <span class=\"comment\">#     russell_logger.info(\"There is not a valid task id\")</span></span><br><span class=\"line\">    <span class=\"comment\">#     return</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> logging</span><br><span class=\"line\">    russell_logger.info(<span class=\"string\">\"loading log...\"</span>)</span><br><span class=\"line\">    logging.disable(sys.maxsize)</span><br><span class=\"line\"></span><br><span class=\"line\">    lines = ExperimentClient().get_log_stream(id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> lines:</span><br><span class=\"line\">        print(<span class=\"string\">\"No logs....\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">        print(line)</span><br><span class=\"line\">    <span class=\"comment\"># consumer = KafkaConsumer(id, bootstrap_servers=log_server,</span></span><br><span class=\"line\">    <span class=\"comment\">#                              auto_offset_reset='earliest', enable_auto_commit=False)</span></span><br><span class=\"line\">    <span class=\"comment\"># for msg in consumer:</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(json.loads(msg.value).get(\"log\").strip(\"\\n\"))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    logging.disable(logging.NOTSET)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''ExperimentClinet(BaseHttpClient'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_log_stream</span><span class=\"params\">(self, id, method=<span class=\"string\">'kafka'</span>)</span>:</span></span><br><span class=\"line\">        timeout = <span class=\"number\">50</span></span><br><span class=\"line\">        response = self.request(<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"/logs\"</span>,</span><br><span class=\"line\">                                params=&#123;<span class=\"string\">'method'</span>:method, <span class=\"string\">'id'</span>:id&#125;,</span><br><span class=\"line\">                                stream=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                timeout=timeout)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.iter_lines()</span><br><span class=\"line\"><span class=\"string\">'''BaseHttpClient'''</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Base client for all HTTP operations</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseHttpClient</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.base_url = <span class=\"string\">\"&#123;&#125;/api/v1\"</span>.format(host)</span><br><span class=\"line\">        self.access_token = AuthConfigManager.get_access_token()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                url,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                params=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                data=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                files=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                timeout=<span class=\"number\">5</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                access_token=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                stream=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Execute the request using requests library</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        request_url = self.base_url + url</span><br><span class=\"line\">        russell_logger.debug(<span class=\"string\">\"Starting request to url: &#123;&#125; with params: &#123;&#125;, data: &#123;&#125;\"</span>.format(request_url, params, data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> access_token:</span><br><span class=\"line\">            headers = &#123;<span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Basic &#123;&#125;\"</span>.format(access_token)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            headers = &#123;<span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Basic &#123;&#125;\"</span>.format(</span><br><span class=\"line\">                self.access_token.token <span class=\"keyword\">if</span> self.access_token <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># print \"url: &#123;&#125;\".format(request_url)</span></span><br><span class=\"line\">            <span class=\"comment\"># print \"params: &#123;&#125;\".format(params)</span></span><br><span class=\"line\">            <span class=\"comment\"># print \"data: &#123;&#125;\".format(data)</span></span><br><span class=\"line\">            response = requests.request(method,</span><br><span class=\"line\">                                        request_url,</span><br><span class=\"line\">                                        params=params,</span><br><span class=\"line\">                                        headers=headers,</span><br><span class=\"line\">                                        data=data,</span><br><span class=\"line\">                                        files=files,</span><br><span class=\"line\">                                        timeout=timeout,</span><br><span class=\"line\">                                        stream=stream)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectionError:</span><br><span class=\"line\">            sys.exit(<span class=\"string\">\"Cannot connect to the Russell server. Check your internet connection.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stream:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                russell_logger.debug(<span class=\"string\">\"Response Content: &#123;&#125;, Headers: &#123;&#125;\"</span>.format(response.json(), response.headers))</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                russell_logger.debug(<span class=\"string\">\"Request failed. Response: &#123;&#125;\"</span>.format(response.content))</span><br><span class=\"line\">            self.check_response_status(response)</span><br><span class=\"line\">            print(<span class=\"string\">\"response: &#123;&#125;\"</span>.format(json.dumps(response.json())))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.json()[<span class=\"string\">\"data\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            russell_logger.info(<span class=\"string\">'HTTP Stream Request/Response...'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<p>不用flask的stream_with_context，则<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># @auth.login_required</span></span><br><span class=\"line\"><span class=\"comment\"># @flask_app.route('/api/v1/logs', methods=['GET'], endpoint='logs')</span></span><br><span class=\"line\"><span class=\"comment\"># def get_logs_of_task():</span></span><br><span class=\"line\"><span class=\"comment\">#     ctx = _request_ctx_stack.top.copy()</span></span><br><span class=\"line\"><span class=\"comment\">#     new_request = ctx.request</span></span><br><span class=\"line\"><span class=\"comment\">#     new_g = ctx.g</span></span><br><span class=\"line\"><span class=\"comment\">#     parser = reqparse.RequestParser()</span></span><br><span class=\"line\"><span class=\"comment\">#     parser.add_argument('method', type=str, location='args')</span></span><br><span class=\"line\"><span class=\"comment\">#     parser.add_argument('id', type=str, location='args')</span></span><br><span class=\"line\"><span class=\"comment\">#     args = parser.parse_args()</span></span><br><span class=\"line\"><span class=\"comment\">#     if args.get('method') and args.get('method').lower() == 'kafka':</span></span><br><span class=\"line\"><span class=\"comment\">#         log_server = flask_app.config['KAFKA_BROKER_URI']</span></span><br><span class=\"line\"><span class=\"comment\">#         task_id = args.get('id')</span></span><br><span class=\"line\"><span class=\"comment\">#         if not task_id:</span></span><br><span class=\"line\"><span class=\"comment\">#             return jsonify(ED.error_response_norm(ED.err_req_data))</span></span><br><span class=\"line\"><span class=\"comment\">#         if not getattr(getattr(new_g, 'user', None),'id', None) == getattr(get_experiment_by_id(task_id), 'owner_id', 0):</span></span><br><span class=\"line\"><span class=\"comment\">#             return jsonify(ED.error_response_norm(ED.err_user_permission))</span></span><br><span class=\"line\">    <span class=\"string\">''''''</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>未完待续。此文将持续更新。</p>\n<ul>\n<li>v0.1 [初稿：可运行的代码] 2017-08-25 18:50:08</li>\n</ul>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><ul>\n<li><a href=\"https://kafka.apache.org/quickstart\" target=\"_blank\" rel=\"noopener\">CET4没过轻松读：Apache 官方最新文档</a></li>\n</ul>\n<h1 id=\"For-Pythoner\"><a href=\"#For-Pythoner\" class=\"headerlink\" title=\"For Pythoner\"></a>For Pythoner</h1><p>直接看Consumer类源码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class KafkaConsumer(six.Iterator):</span><br><span class=\"line\">    &quot;&quot;&quot;Consume records from a Kafka cluster.</span><br><span class=\"line\"></span><br><span class=\"line\">    The consumer will transparently handle the failure of servers in the Kafka</span><br><span class=\"line\">    cluster, and adapt as topic-partitions are created or migrate between</span><br><span class=\"line\">    brokers. It also interacts with the assigned kafka Group Coordinator node</span><br><span class=\"line\">    to allow multiple consumers to load balance consumption of topics (requires</span><br><span class=\"line\">    kafka &gt;= 0.9.0.0).</span><br><span class=\"line\"></span><br><span class=\"line\">    The consumer is not thread safe and should not be shared across threads.</span><br><span class=\"line\"></span><br><span class=\"line\">    Arguments:</span><br><span class=\"line\">        *topics (str): optional list of topics to subscribe to. If not set,</span><br><span class=\"line\">            call :meth:`~kafka.KafkaConsumer.subscribe` or</span><br><span class=\"line\">            :meth:`~kafka.KafkaConsumer.assign` before consuming records.</span><br><span class=\"line\"></span><br><span class=\"line\">    Keyword Arguments:</span><br><span class=\"line\">        bootstrap_servers: &apos;host[:port]&apos; string (or list of &apos;host[:port]&apos;</span><br><span class=\"line\">            strings) that the consumer should contact to bootstrap initial</span><br><span class=\"line\">            cluster metadata. This does not have to be the full node list.</span><br><span class=\"line\">            It just needs to have at least one broker that will respond to a</span><br><span class=\"line\">            Metadata API Request. Default port is 9092. If no servers are</span><br><span class=\"line\">            specified, will default to localhost:9092.</span><br><span class=\"line\">        client_id (str): A name for this client. This string is passed in</span><br><span class=\"line\">            each request to servers and can be used to identify specific</span><br><span class=\"line\">            server-side log entries that correspond to this client. Also</span><br><span class=\"line\">            submitted to GroupCoordinator for logging with respect to</span><br><span class=\"line\">            consumer group administration. Default: &apos;kafka-python-&#123;version&#125;&apos;</span><br><span class=\"line\">        group_id (str or None): The name of the consumer group to join for dynamic</span><br><span class=\"line\">            partition assignment (if enabled), and to use for fetching and</span><br><span class=\"line\">            committing offsets. If None, auto-partition assignment (via</span><br><span class=\"line\">            group coordinator) and offset commits are disabled.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        key_deserializer (callable): Any callable that takes a</span><br><span class=\"line\">            raw message key and returns a deserialized key.</span><br><span class=\"line\">        value_deserializer (callable): Any callable that takes a</span><br><span class=\"line\">            raw message value and returns a deserialized value.</span><br><span class=\"line\">        fetch_min_bytes (int): Minimum amount of data the server should</span><br><span class=\"line\">            return for a fetch request, otherwise wait up to</span><br><span class=\"line\">            fetch_max_wait_ms for more data to accumulate. Default: 1.</span><br><span class=\"line\">        fetch_max_wait_ms (int): The maximum amount of time in milliseconds</span><br><span class=\"line\">            the server will block before answering the fetch request if</span><br><span class=\"line\">            there isn&apos;t sufficient data to immediately satisfy the</span><br><span class=\"line\">            requirement given by fetch_min_bytes. Default: 500.</span><br><span class=\"line\">        fetch_max_bytes (int): The maximum amount of data the server should</span><br><span class=\"line\">            return for a fetch request. This is not an absolute maximum, if the</span><br><span class=\"line\">            first message in the first non-empty partition of the fetch is</span><br><span class=\"line\">            larger than this value, the message will still be returned to</span><br><span class=\"line\">            ensure that the consumer can make progress. NOTE: consumer performs</span><br><span class=\"line\">            fetches to multiple brokers in parallel so memory usage will depend</span><br><span class=\"line\">            on the number of brokers containing partitions for the topic.</span><br><span class=\"line\">            Supported Kafka version &gt;= 0.10.1.0. Default: 52428800 (50 Mb).</span><br><span class=\"line\">        max_partition_fetch_bytes (int): The maximum amount of data</span><br><span class=\"line\">            per-partition the server will return. The maximum total memory</span><br><span class=\"line\">            used for a request = #partitions * max_partition_fetch_bytes.</span><br><span class=\"line\">            This size must be at least as large as the maximum message size</span><br><span class=\"line\">            the server allows or else it is possible for the producer to</span><br><span class=\"line\">            send messages larger than the consumer can fetch. If that</span><br><span class=\"line\">            happens, the consumer can get stuck trying to fetch a large</span><br><span class=\"line\">            message on a certain partition. Default: 1048576.</span><br><span class=\"line\">        request_timeout_ms (int): Client request timeout in milliseconds.</span><br><span class=\"line\">            Default: 40000.</span><br><span class=\"line\">        retry_backoff_ms (int): Milliseconds to backoff when retrying on</span><br><span class=\"line\">            errors. Default: 100.</span><br><span class=\"line\">        reconnect_backoff_ms (int): The amount of time in milliseconds to</span><br><span class=\"line\">            wait before attempting to reconnect to a given host.</span><br><span class=\"line\">            Default: 50.</span><br><span class=\"line\">        reconnect_backoff_max_ms (int): The maximum amount of time in</span><br><span class=\"line\">            milliseconds to wait when reconnecting to a broker that has</span><br><span class=\"line\">            repeatedly failed to connect. If provided, the backoff per host</span><br><span class=\"line\">            will increase exponentially for each consecutive connection</span><br><span class=\"line\">            failure, up to this maximum. To avoid connection storms, a</span><br><span class=\"line\">            randomization factor of 0.2 will be applied to the backoff</span><br><span class=\"line\">            resulting in a random range between 20% below and 20% above</span><br><span class=\"line\">            the computed value. Default: 1000.</span><br><span class=\"line\">        max_in_flight_requests_per_connection (int): Requests are pipelined</span><br><span class=\"line\">            to kafka brokers up to this number of maximum requests per</span><br><span class=\"line\">            broker connection. Default: 5.</span><br><span class=\"line\">        auto_offset_reset (str): A policy for resetting offsets on</span><br><span class=\"line\">            OffsetOutOfRange errors: &apos;earliest&apos; will move to the oldest</span><br><span class=\"line\">            available message, &apos;latest&apos; will move to the most recent. Any</span><br><span class=\"line\">            other value will raise the exception. Default: &apos;latest&apos;.</span><br><span class=\"line\">        enable_auto_commit (bool): If True , the consumer&apos;s offset will be</span><br><span class=\"line\">            periodically committed in the background. Default: True.</span><br><span class=\"line\">        auto_commit_interval_ms (int): Number of milliseconds between automatic</span><br><span class=\"line\">            offset commits, if enable_auto_commit is True. Default: 5000.</span><br><span class=\"line\">        default_offset_commit_callback (callable): Called as</span><br><span class=\"line\">            callback(offsets, response) response will be either an Exception</span><br><span class=\"line\">            or an OffsetCommitResponse struct. This callback can be used to</span><br><span class=\"line\">            trigger custom actions when a commit request completes.</span><br><span class=\"line\">        check_crcs (bool): Automatically check the CRC32 of the records</span><br><span class=\"line\">            consumed. This ensures no on-the-wire or on-disk corruption to</span><br><span class=\"line\">            the messages occurred. This check adds some overhead, so it may</span><br><span class=\"line\">            be disabled in cases seeking extreme performance. Default: True</span><br><span class=\"line\">        metadata_max_age_ms (int): The period of time in milliseconds after</span><br><span class=\"line\">            which we force a refresh of metadata, even if we haven&apos;t seen any</span><br><span class=\"line\">            partition leadership changes to proactively discover any new</span><br><span class=\"line\">            brokers or partitions. Default: 300000</span><br><span class=\"line\">        partition_assignment_strategy (list): List of objects to use to</span><br><span class=\"line\">            distribute partition ownership amongst consumer instances when</span><br><span class=\"line\">            group management is used.</span><br><span class=\"line\">            Default: [RangePartitionAssignor, RoundRobinPartitionAssignor]</span><br><span class=\"line\">        heartbeat_interval_ms (int): The expected time in milliseconds</span><br><span class=\"line\">            between heartbeats to the consumer coordinator when using</span><br><span class=\"line\">            Kafka&apos;s group management feature. Heartbeats are used to ensure</span><br><span class=\"line\">            that the consumer&apos;s session stays active and to facilitate</span><br><span class=\"line\">            rebalancing when new consumers join or leave the group. The</span><br><span class=\"line\">            value must be set lower than session_timeout_ms, but typically</span><br><span class=\"line\">            should be set no higher than 1/3 of that value. It can be</span><br><span class=\"line\">            adjusted even lower to control the expected time for normal</span><br><span class=\"line\">            rebalances. Default: 3000</span><br><span class=\"line\">        session_timeout_ms (int): The timeout used to detect failures when</span><br><span class=\"line\">            using Kafka&apos;s group management facilities. Default: 30000</span><br><span class=\"line\">        max_poll_records (int): The maximum number of records returned in a</span><br><span class=\"line\">            single call to :meth:`~kafka.KafkaConsumer.poll`. Default: 500</span><br><span class=\"line\">        receive_buffer_bytes (int): The size of the TCP receive buffer</span><br><span class=\"line\">            (SO_RCVBUF) to use when reading data. Default: None (relies on</span><br><span class=\"line\">            system defaults). The java client defaults to 32768.</span><br><span class=\"line\">        send_buffer_bytes (int): The size of the TCP send buffer</span><br><span class=\"line\">            (SO_SNDBUF) to use when sending data. Default: None (relies on</span><br><span class=\"line\">            system defaults). The java client defaults to 131072.</span><br><span class=\"line\">        socket_options (list): List of tuple-arguments to socket.setsockopt</span><br><span class=\"line\">            to apply to broker connection sockets. Default:</span><br><span class=\"line\">            [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]</span><br><span class=\"line\">        consumer_timeout_ms (int): number of milliseconds to block during</span><br><span class=\"line\">            message iteration before raising StopIteration (i.e., ending the</span><br><span class=\"line\">            iterator). Default block forever [float(&apos;inf&apos;)].</span><br><span class=\"line\">        skip_double_compressed_messages (bool): A bug in KafkaProducer &lt;= 1.2.4</span><br><span class=\"line\">            caused some messages to be corrupted via double-compression.</span><br><span class=\"line\">            By default, the fetcher will return these messages as a compressed</span><br><span class=\"line\">            blob of bytes with a single offset, i.e. how the message was</span><br><span class=\"line\">            actually published to the cluster. If you prefer to have the</span><br><span class=\"line\">            fetcher automatically detect corrupt messages and skip them,</span><br><span class=\"line\">            set this option to True. Default: False.</span><br><span class=\"line\">        security_protocol (str): Protocol used to communicate with brokers.</span><br><span class=\"line\">            Valid values are: PLAINTEXT, SSL. Default: PLAINTEXT.</span><br><span class=\"line\">        ssl_context (ssl.SSLContext): Pre-configured SSLContext for wrapping</span><br><span class=\"line\">            socket connections. If provided, all other ssl_* configurations</span><br><span class=\"line\">            will be ignored. Default: None.</span><br><span class=\"line\">        ssl_check_hostname (bool): Flag to configure whether ssl handshake</span><br><span class=\"line\">            should verify that the certificate matches the brokers hostname.</span><br><span class=\"line\">            Default: True.</span><br><span class=\"line\">        ssl_cafile (str): Optional filename of ca file to use in certificate</span><br><span class=\"line\">            verification. Default: None.</span><br><span class=\"line\">        ssl_certfile (str): Optional filename of file in pem format containing</span><br><span class=\"line\">            the client certificate, as well as any ca certificates needed to</span><br><span class=\"line\">            establish the certificate&apos;s authenticity. Default: None.</span><br><span class=\"line\">        ssl_keyfile (str): Optional filename containing the client private key.</span><br><span class=\"line\">            Default: None.</span><br><span class=\"line\">        ssl_password (str): Optional password to be used when loading the</span><br><span class=\"line\">            certificate chain. Default: None.</span><br><span class=\"line\">        ssl_crlfile (str): Optional filename containing the CRL to check for</span><br><span class=\"line\">            certificate expiration. By default, no CRL check is done. When</span><br><span class=\"line\">            providing a file, only the leaf certificate will be checked against</span><br><span class=\"line\">            this CRL. The CRL can only be checked with Python 3.4+ or 2.7.9+.</span><br><span class=\"line\">            Default: None.</span><br><span class=\"line\">        api_version (tuple): Specify which Kafka API version to use. If set to</span><br><span class=\"line\">            None, the client will attempt to infer the broker version by probing</span><br><span class=\"line\">            various APIs. Different versions enable different functionality.</span><br><span class=\"line\"></span><br><span class=\"line\">            Examples:</span><br><span class=\"line\">                (0, 9) enables full group coordination features with automatic</span><br><span class=\"line\">                    partition assignment and rebalancing,</span><br><span class=\"line\">                (0, 8, 2) enables kafka-storage offset commits with manual</span><br><span class=\"line\">                    partition assignment only,</span><br><span class=\"line\">                (0, 8, 1) enables zookeeper-storage offset commits with manual</span><br><span class=\"line\">                    partition assignment only,</span><br><span class=\"line\">                (0, 8, 0) enables basic functionality but requires manual</span><br><span class=\"line\">                    partition assignment and offset management.</span><br><span class=\"line\"></span><br><span class=\"line\">            For the full list of supported versions, see</span><br><span class=\"line\">            KafkaClient.API_VERSIONS. Default: None</span><br><span class=\"line\">        api_version_auto_timeout_ms (int): number of milliseconds to throw a</span><br><span class=\"line\">            timeout exception from the constructor when checking the broker</span><br><span class=\"line\">            api version. Only applies if api_version set to &apos;auto&apos;</span><br><span class=\"line\">        metric_reporters (list): A list of classes to use as metrics reporters.</span><br><span class=\"line\">            Implementing the AbstractMetricsReporter interface allows plugging</span><br><span class=\"line\">            in classes that will be notified of new metric creation. Default: []</span><br><span class=\"line\">        metrics_num_samples (int): The number of samples maintained to compute</span><br><span class=\"line\">            metrics. Default: 2</span><br><span class=\"line\">        metrics_sample_window_ms (int): The maximum age in milliseconds of</span><br><span class=\"line\">            samples used to compute metrics. Default: 30000</span><br><span class=\"line\">        selector (selectors.BaseSelector): Provide a specific selector</span><br><span class=\"line\">            implementation to use for I/O multiplexing.</span><br><span class=\"line\">            Default: selectors.DefaultSelector</span><br><span class=\"line\">        exclude_internal_topics (bool): Whether records from internal topics</span><br><span class=\"line\">            (such as offsets) should be exposed to the consumer. If set to True</span><br><span class=\"line\">            the only way to receive records from an internal topic is</span><br><span class=\"line\">            subscribing to it. Requires 0.10+ Default: True</span><br><span class=\"line\">        sasl_mechanism (str): String picking sasl mechanism when security_protocol</span><br><span class=\"line\">            is SASL_PLAINTEXT or SASL_SSL. Currently only PLAIN is supported.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        sasl_plain_username (str): Username for sasl PLAIN authentication.</span><br><span class=\"line\">            Default: None</span><br><span class=\"line\">        sasl_plain_password (str): Password for sasl PLAIN authentication.</span><br><span class=\"line\">            Default: None</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>def <strong>next</strong>(self)</li>\n<li><p>def _message_generator(self):</p>\n</li>\n<li><p>HTTP流式响应：<a href=\"https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/CMCDragonkai/6bfade6431e9ffb7fe88</a></p>\n</li>\n<li><p><a href=\"https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html</a></p>\n</li>\n</ul>\n<ul>\n<li>Chrome抓包：chrome://net-internals/#requests</li>\n<li>Kafka入门：<a href=\"http://www.aboutyun.com/thread-12882-1-1.html\" target=\"_blank\" rel=\"noopener\">http://www.aboutyun.com/thread-12882-1-1.html</a></li>\n</ul>\n<h1 id=\"我的业务需求\"><a href=\"#我的业务需求\" class=\"headerlink\" title=\"我的业务需求\"></a>我的业务需求</h1><p>已有实现是pip包客户端从flask服务器获取kafka服务器地址，在客户端直接消费。</p>\n<p>需要加上权限认证提升安全性，因此需要交由flask转发kafka日志。</p>\n<h1 id=\"服务端实现\"><a href=\"#服务端实现\" class=\"headerlink\" title=\"服务端实现\"></a>服务端实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> Resource, reqparse</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Response, jsonify, g, stream_with_context</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.common <span class=\"keyword\">import</span> error_util <span class=\"keyword\">as</span> ED</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.views.user_views <span class=\"keyword\">import</span> auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> kafka <span class=\"keyword\">import</span> KafkaConsumer</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask.ctx <span class=\"keyword\">import</span> _request_ctx_stack</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"><span class=\"meta\">@check_api_cost_time</span></span><br><span class=\"line\"><span class=\"meta\">@auth.login_required</span></span><br><span class=\"line\"><span class=\"meta\">@flask_app.route('/api/v1/logs', methods=['GET'], endpoint='task-logs')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_logs_of_task</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    parser = reqparse.RequestParser()</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'method'</span>, type=str, location=<span class=\"string\">'args'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'id'</span>, type=str, location=<span class=\"string\">'args'</span>)</span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> args.get(<span class=\"string\">'method'</span>) <span class=\"keyword\">and</span> args.get(<span class=\"string\">'method'</span>).lower() == <span class=\"string\">'kafka'</span>:</span><br><span class=\"line\">        task_id = args.get(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> task_id:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> jsonify(ED.error_response_norm(ED.err_req_data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_owned_by_guser(get_experiment_by_id(task_id)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> jsonify(ED.error_response_norm(ED.err_user_permission))</span><br><span class=\"line\"></span><br><span class=\"line\">        res = Response(stream_with_context(chain(celery_log_generator(task_id),container_log_generator(task_id))),</span><br><span class=\"line\">                       direct_passthrough=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                       mimetype=<span class=\"string\">'multipart/x-mixed-replace'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># res.headers['Transfer-Encoding'] = 'chunked'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">container_log_generator</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    consumer = KafkaConsumer(task_id,</span><br><span class=\"line\">                             bootstrap_servers=flask_app.config[<span class=\"string\">'KAFKA_BROKER_URI'</span>],</span><br><span class=\"line\">                             auto_offset_reset=<span class=\"string\">'earliest'</span>,</span><br><span class=\"line\">                             enable_auto_commit=<span class=\"keyword\">False</span>,</span><br><span class=\"line\">                             request_timeout_ms=<span class=\"number\">40000</span>,</span><br><span class=\"line\">                             consumer_timeout_ms=<span class=\"number\">10000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> consumer:</span><br><span class=\"line\">            str_line = json.loads(msg.value).get(<span class=\"string\">\"log\"</span>).strip(<span class=\"string\">\"\\n\"</span>) + <span class=\"string\">b'\\r\\n'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> bytes(str_line)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">celery_log_generator</span><span class=\"params\">(task_id)</span>:</span></span><br><span class=\"line\">    path = flask_app.config[<span class=\"string\">'UPLOAD_LOG_FOLDER'</span>] + task_id + <span class=\"string\">\"/worker.log\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> line</span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logs</span><span class=\"params\">(id, tail, sleep_duration=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Print the logs of the run.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># experiment = ExperimentClient().get(id)</span></span><br><span class=\"line\">    <span class=\"comment\"># task_instance = TaskInstanceClient().get(get_module_task_instance_id(experiment.task_instances))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># log_server = ExperimentClient().get_log_server(id)</span></span><br><span class=\"line\">    <span class=\"comment\"># if not log_server:</span></span><br><span class=\"line\">    <span class=\"comment\">#     russell_logger.info(\"There is not a valid task id\")</span></span><br><span class=\"line\">    <span class=\"comment\">#     return</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> logging</span><br><span class=\"line\">    russell_logger.info(<span class=\"string\">\"loading log...\"</span>)</span><br><span class=\"line\">    logging.disable(sys.maxsize)</span><br><span class=\"line\"></span><br><span class=\"line\">    lines = ExperimentClient().get_log_stream(id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> lines:</span><br><span class=\"line\">        print(<span class=\"string\">\"No logs....\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">        print(line)</span><br><span class=\"line\">    <span class=\"comment\"># consumer = KafkaConsumer(id, bootstrap_servers=log_server,</span></span><br><span class=\"line\">    <span class=\"comment\">#                              auto_offset_reset='earliest', enable_auto_commit=False)</span></span><br><span class=\"line\">    <span class=\"comment\"># for msg in consumer:</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(json.loads(msg.value).get(\"log\").strip(\"\\n\"))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    logging.disable(logging.NOTSET)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''ExperimentClinet(BaseHttpClient'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_log_stream</span><span class=\"params\">(self, id, method=<span class=\"string\">'kafka'</span>)</span>:</span></span><br><span class=\"line\">        timeout = <span class=\"number\">50</span></span><br><span class=\"line\">        response = self.request(<span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"/logs\"</span>,</span><br><span class=\"line\">                                params=&#123;<span class=\"string\">'method'</span>:method, <span class=\"string\">'id'</span>:id&#125;,</span><br><span class=\"line\">                                stream=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                timeout=timeout)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.iter_lines()</span><br><span class=\"line\"><span class=\"string\">'''BaseHttpClient'''</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Base client for all HTTP operations</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseHttpClient</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.base_url = <span class=\"string\">\"&#123;&#125;/api/v1\"</span>.format(host)</span><br><span class=\"line\">        self.access_token = AuthConfigManager.get_access_token()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                url,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                params=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                data=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                files=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                timeout=<span class=\"number\">5</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                access_token=None,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                stream=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Execute the request using requests library</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        request_url = self.base_url + url</span><br><span class=\"line\">        russell_logger.debug(<span class=\"string\">\"Starting request to url: &#123;&#125; with params: &#123;&#125;, data: &#123;&#125;\"</span>.format(request_url, params, data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> access_token:</span><br><span class=\"line\">            headers = &#123;<span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Basic &#123;&#125;\"</span>.format(access_token)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            headers = &#123;<span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"Basic &#123;&#125;\"</span>.format(</span><br><span class=\"line\">                self.access_token.token <span class=\"keyword\">if</span> self.access_token <span class=\"keyword\">else</span> <span class=\"keyword\">None</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># print \"url: &#123;&#125;\".format(request_url)</span></span><br><span class=\"line\">            <span class=\"comment\"># print \"params: &#123;&#125;\".format(params)</span></span><br><span class=\"line\">            <span class=\"comment\"># print \"data: &#123;&#125;\".format(data)</span></span><br><span class=\"line\">            response = requests.request(method,</span><br><span class=\"line\">                                        request_url,</span><br><span class=\"line\">                                        params=params,</span><br><span class=\"line\">                                        headers=headers,</span><br><span class=\"line\">                                        data=data,</span><br><span class=\"line\">                                        files=files,</span><br><span class=\"line\">                                        timeout=timeout,</span><br><span class=\"line\">                                        stream=stream)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ConnectionError:</span><br><span class=\"line\">            sys.exit(<span class=\"string\">\"Cannot connect to the Russell server. Check your internet connection.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stream:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                russell_logger.debug(<span class=\"string\">\"Response Content: &#123;&#125;, Headers: &#123;&#125;\"</span>.format(response.json(), response.headers))</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">                russell_logger.debug(<span class=\"string\">\"Request failed. Response: &#123;&#125;\"</span>.format(response.content))</span><br><span class=\"line\">            self.check_response_status(response)</span><br><span class=\"line\">            print(<span class=\"string\">\"response: &#123;&#125;\"</span>.format(json.dumps(response.json())))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.json()[<span class=\"string\">\"data\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            russell_logger.info(<span class=\"string\">'HTTP Stream Request/Response...'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<p>不用flask的stream_with_context，则<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># @auth.login_required</span></span><br><span class=\"line\"><span class=\"comment\"># @flask_app.route('/api/v1/logs', methods=['GET'], endpoint='logs')</span></span><br><span class=\"line\"><span class=\"comment\"># def get_logs_of_task():</span></span><br><span class=\"line\"><span class=\"comment\">#     ctx = _request_ctx_stack.top.copy()</span></span><br><span class=\"line\"><span class=\"comment\">#     new_request = ctx.request</span></span><br><span class=\"line\"><span class=\"comment\">#     new_g = ctx.g</span></span><br><span class=\"line\"><span class=\"comment\">#     parser = reqparse.RequestParser()</span></span><br><span class=\"line\"><span class=\"comment\">#     parser.add_argument('method', type=str, location='args')</span></span><br><span class=\"line\"><span class=\"comment\">#     parser.add_argument('id', type=str, location='args')</span></span><br><span class=\"line\"><span class=\"comment\">#     args = parser.parse_args()</span></span><br><span class=\"line\"><span class=\"comment\">#     if args.get('method') and args.get('method').lower() == 'kafka':</span></span><br><span class=\"line\"><span class=\"comment\">#         log_server = flask_app.config['KAFKA_BROKER_URI']</span></span><br><span class=\"line\"><span class=\"comment\">#         task_id = args.get('id')</span></span><br><span class=\"line\"><span class=\"comment\">#         if not task_id:</span></span><br><span class=\"line\"><span class=\"comment\">#             return jsonify(ED.error_response_norm(ED.err_req_data))</span></span><br><span class=\"line\"><span class=\"comment\">#         if not getattr(getattr(new_g, 'user', None),'id', None) == getattr(get_experiment_by_id(task_id), 'owner_id', 0):</span></span><br><span class=\"line\"><span class=\"comment\">#             return jsonify(ED.error_response_norm(ED.err_user_permission))</span></span><br><span class=\"line\">    <span class=\"string\">''''''</span></span><br></pre></td></tr></table></figure></p>\n"},{"date":"2017-05-13T07:51:03.000Z","status":"public","title":"利用Hexo搭建个人博客站点全纪录","keywords":["Hexo","入门","教程","博客","blog","个人博客"],"_content":"\n# 需求澄清\n- 个人博客。\n- 静态的即可。\n- 可由GitHub Pages或者Coding.net Pages服务托管。\n- 要有域名，好记。\n- 博客中有图片，需要稳定的存储。\n- 维护与操作系统平台无关（因为自己各种操作系统切换）。\n\n# 技术选型\nHexo + GitHub/Coding Pages双托管 + 腾讯云解析 + 七牛云图片存储\n\n# 开始配置\n\n## 安装Hexo\n首先安装npm，使用npm安装hexo。\n- [npm](https://www.npmjs.com/)\n- [Hexo](https://hexo.io/zh-cn/)\n\n\n## 主题Next\n安装：http://theme-next.iissnan.com/getting-started.html\n\n## GitHub\n仓库地址：https://github.com/Danceiny/blog\nPages地址：https://danceiny.github.io/blog\n添加CNAME文件，指向blog.cannot.cc，Pages地址重定向到该域名。\n\n\n\n## Coding\n同上。\n\n## 腾讯云解析\n已有域名（已备案）: [cannot.cc](http://cannot.cc)\n\n添加二级域名: [blog.cannot.cc](http://blog.cannot.cc)\n\n添加CNAME类型的记录，记录值设置为danceiny.github.io.\n\n把www.blog.cannot.cc记录到pages.coding.me.\n\n顺便把cannot.cc解析到 http://danceiny.github.io 了。（原来在Github上的个人主页）。有空再修改。\n\n注意：\n1. 腾讯云解析的记录值是比较需要关注的。\n2. www是个神奇的东西，http://blog.cannot.cc 和 http://www.blog.cannot.cc 是不一样的两个东西。\n\n## 七牛图床\nhttps://portal.qiniu.com/bucket/\n有很多官方工具可以使用，命令行，GUI，但是目前我感觉不太用户友好。访问秘钥就是两个：Access Key和Secret Key。Bucket像是GitHub里的仓库吧，我叫它**对象存储仓库**。\n\n\n## 阅读次数统计\n1. 可在Next中配置，使用leancloud.cn [参见博客](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%8)\n\n\n## 社交分享\n直接在Next中开启jiathis即可。不支持https是个隐患。\n\n## 站点搜索\n可选的几个服务都是收费的，所以我选了本地的搜索。按照Next的教程配置即可。\n\n## 百度联盟\nhttp://union.baidu.com\n申请，未通过，网站内容还是少了点。\n\n## 百度统计\n站点访问统计。百度统计的账号和百度联盟账号可以不一样，不过还是统一账号比较好，方便管理。\n\n## 谷歌分析\n\n\n## 跟帖回复评论\n使用Facebook的评论系统。\n\n网易云跟帖未引入，不过看起来效果不错。\n\n\n## SEO\n1.\tHexo优化之为外部链接添加nofollow  https://liuzhichao.com/2016/hexo-auto-nofollow.html\n\n2.\thttps://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/\n\n3. [hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一](https://juejin.im/post/590b451a0ce46300588c43a0)\n\n## 站点地图\n通过npm下载插件。有专门针对百度的。可做SEO。\n\nsitemaps.xml\n\n## RSS订阅\n通过npm下载插件。\n\n\n## Facebook Audience广告投放\n未搞定。\n\n## Hexo部署\nhttps://hexo.io/docs/deployment.html\n\n可部署到百度，方便搜索引擎收录。\n\n\n## CNAME覆盖问题\nhttps://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\n\n\n## 利用分支备份Hexo项目源代码\n在博客对应的GitHub项目上创建Hexo分支。Pages服务用的是master分支。\n\nyaml重要配置文件不应该上传到公开项目。\n\n\n## 去掉post的url中的日期\npermalink: :title.html\n\n## 其他优秀的同类型博客\nhttp://litten.me/\n\n\n\n","source":"_posts/利用Hexo搭建个人博客站点全纪录.md","raw":"---\ndate: 2017-05-13 15:51:03\nstatus: public\ntitle: 利用Hexo搭建个人博客站点全纪录\nkeywords: \n- Hexo\n- 入门\n- 教程\n- 博客\n- blog\n- 个人博客\ntags: \n- 个人网站\n- 博客\n- 教程\ncategories: DOSOMETHING\n \n---\n\n# 需求澄清\n- 个人博客。\n- 静态的即可。\n- 可由GitHub Pages或者Coding.net Pages服务托管。\n- 要有域名，好记。\n- 博客中有图片，需要稳定的存储。\n- 维护与操作系统平台无关（因为自己各种操作系统切换）。\n\n# 技术选型\nHexo + GitHub/Coding Pages双托管 + 腾讯云解析 + 七牛云图片存储\n\n# 开始配置\n\n## 安装Hexo\n首先安装npm，使用npm安装hexo。\n- [npm](https://www.npmjs.com/)\n- [Hexo](https://hexo.io/zh-cn/)\n\n\n## 主题Next\n安装：http://theme-next.iissnan.com/getting-started.html\n\n## GitHub\n仓库地址：https://github.com/Danceiny/blog\nPages地址：https://danceiny.github.io/blog\n添加CNAME文件，指向blog.cannot.cc，Pages地址重定向到该域名。\n\n\n\n## Coding\n同上。\n\n## 腾讯云解析\n已有域名（已备案）: [cannot.cc](http://cannot.cc)\n\n添加二级域名: [blog.cannot.cc](http://blog.cannot.cc)\n\n添加CNAME类型的记录，记录值设置为danceiny.github.io.\n\n把www.blog.cannot.cc记录到pages.coding.me.\n\n顺便把cannot.cc解析到 http://danceiny.github.io 了。（原来在Github上的个人主页）。有空再修改。\n\n注意：\n1. 腾讯云解析的记录值是比较需要关注的。\n2. www是个神奇的东西，http://blog.cannot.cc 和 http://www.blog.cannot.cc 是不一样的两个东西。\n\n## 七牛图床\nhttps://portal.qiniu.com/bucket/\n有很多官方工具可以使用，命令行，GUI，但是目前我感觉不太用户友好。访问秘钥就是两个：Access Key和Secret Key。Bucket像是GitHub里的仓库吧，我叫它**对象存储仓库**。\n\n\n## 阅读次数统计\n1. 可在Next中配置，使用leancloud.cn [参见博客](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%8)\n\n\n## 社交分享\n直接在Next中开启jiathis即可。不支持https是个隐患。\n\n## 站点搜索\n可选的几个服务都是收费的，所以我选了本地的搜索。按照Next的教程配置即可。\n\n## 百度联盟\nhttp://union.baidu.com\n申请，未通过，网站内容还是少了点。\n\n## 百度统计\n站点访问统计。百度统计的账号和百度联盟账号可以不一样，不过还是统一账号比较好，方便管理。\n\n## 谷歌分析\n\n\n## 跟帖回复评论\n使用Facebook的评论系统。\n\n网易云跟帖未引入，不过看起来效果不错。\n\n\n## SEO\n1.\tHexo优化之为外部链接添加nofollow  https://liuzhichao.com/2016/hexo-auto-nofollow.html\n\n2.\thttps://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/\n\n3. [hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一](https://juejin.im/post/590b451a0ce46300588c43a0)\n\n## 站点地图\n通过npm下载插件。有专门针对百度的。可做SEO。\n\nsitemaps.xml\n\n## RSS订阅\n通过npm下载插件。\n\n\n## Facebook Audience广告投放\n未搞定。\n\n## Hexo部署\nhttps://hexo.io/docs/deployment.html\n\n可部署到百度，方便搜索引擎收录。\n\n\n## CNAME覆盖问题\nhttps://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\n\n\n## 利用分支备份Hexo项目源代码\n在博客对应的GitHub项目上创建Hexo分支。Pages服务用的是master分支。\n\nyaml重要配置文件不应该上传到公开项目。\n\n\n## 去掉post的url中的日期\npermalink: :title.html\n\n## 其他优秀的同类型博客\nhttp://litten.me/\n\n\n\n","slug":"利用Hexo搭建个人博客站点全纪录","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8aj0018c4xkahglcihx","content":"<h1 id=\"需求澄清\"><a href=\"#需求澄清\" class=\"headerlink\" title=\"需求澄清\"></a>需求澄清</h1><ul>\n<li>个人博客。</li>\n<li>静态的即可。</li>\n<li>可由GitHub Pages或者Coding.net Pages服务托管。</li>\n<li>要有域名，好记。</li>\n<li>博客中有图片，需要稳定的存储。</li>\n<li>维护与操作系统平台无关（因为自己各种操作系统切换）。</li>\n</ul>\n<h1 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h1><p>Hexo + GitHub/Coding Pages双托管 + 腾讯云解析 + 七牛云图片存储</p>\n<h1 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h1><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>首先安装npm，使用npm安装hexo。</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm</a></li>\n<li><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n</ul>\n<h2 id=\"主题Next\"><a href=\"#主题Next\" class=\"headerlink\" title=\"主题Next\"></a>主题Next</h2><p>安装：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/getting-started.html</a></p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p>仓库地址：<a href=\"https://github.com/Danceiny/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/Danceiny/blog</a><br>Pages地址：<a href=\"https://danceiny.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://danceiny.github.io/blog</a><br>添加CNAME文件，指向blog.cannot.cc，Pages地址重定向到该域名。</p>\n<h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><p>同上。</p>\n<h2 id=\"腾讯云解析\"><a href=\"#腾讯云解析\" class=\"headerlink\" title=\"腾讯云解析\"></a>腾讯云解析</h2><p>已有域名（已备案）: <a href=\"http://cannot.cc\" target=\"_blank\" rel=\"noopener\">cannot.cc</a></p>\n<p>添加二级域名: <a href=\"http://blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">blog.cannot.cc</a></p>\n<p>添加CNAME类型的记录，记录值设置为danceiny.github.io.</p>\n<p>把<a href=\"http://www.blog.cannot.cc记录到pages.coding.me\" target=\"_blank\" rel=\"noopener\">www.blog.cannot.cc记录到pages.coding.me</a>.</p>\n<p>顺便把cannot.cc解析到 <a href=\"http://danceiny.github.io\" target=\"_blank\" rel=\"noopener\">http://danceiny.github.io</a> 了。（原来在Github上的个人主页）。有空再修改。</p>\n<p>注意：</p>\n<ol>\n<li>腾讯云解析的记录值是比较需要关注的。</li>\n<li>www是个神奇的东西，<a href=\"http://blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">http://blog.cannot.cc</a> 和 <a href=\"http://www.blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">http://www.blog.cannot.cc</a> 是不一样的两个东西。</li>\n</ol>\n<h2 id=\"七牛图床\"><a href=\"#七牛图床\" class=\"headerlink\" title=\"七牛图床\"></a>七牛图床</h2><p><a href=\"https://portal.qiniu.com/bucket/\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/bucket/</a><br>有很多官方工具可以使用，命令行，GUI，但是目前我感觉不太用户友好。访问秘钥就是两个：Access Key和Secret Key。Bucket像是GitHub里的仓库吧，我叫它<strong>对象存储仓库</strong>。</p>\n<h2 id=\"阅读次数统计\"><a href=\"#阅读次数统计\" class=\"headerlink\" title=\"阅读次数统计\"></a>阅读次数统计</h2><ol>\n<li>可在Next中配置，使用leancloud.cn <a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%8\" target=\"_blank\" rel=\"noopener\">参见博客</a></li>\n</ol>\n<h2 id=\"社交分享\"><a href=\"#社交分享\" class=\"headerlink\" title=\"社交分享\"></a>社交分享</h2><p>直接在Next中开启jiathis即可。不支持https是个隐患。</p>\n<h2 id=\"站点搜索\"><a href=\"#站点搜索\" class=\"headerlink\" title=\"站点搜索\"></a>站点搜索</h2><p>可选的几个服务都是收费的，所以我选了本地的搜索。按照Next的教程配置即可。</p>\n<h2 id=\"百度联盟\"><a href=\"#百度联盟\" class=\"headerlink\" title=\"百度联盟\"></a>百度联盟</h2><p><a href=\"http://union.baidu.com\" target=\"_blank\" rel=\"noopener\">http://union.baidu.com</a><br>申请，未通过，网站内容还是少了点。</p>\n<h2 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h2><p>站点访问统计。百度统计的账号和百度联盟账号可以不一样，不过还是统一账号比较好，方便管理。</p>\n<h2 id=\"谷歌分析\"><a href=\"#谷歌分析\" class=\"headerlink\" title=\"谷歌分析\"></a>谷歌分析</h2><h2 id=\"跟帖回复评论\"><a href=\"#跟帖回复评论\" class=\"headerlink\" title=\"跟帖回复评论\"></a>跟帖回复评论</h2><p>使用Facebook的评论系统。</p>\n<p>网易云跟帖未引入，不过看起来效果不错。</p>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><ol>\n<li><p>Hexo优化之为外部链接添加nofollow  <a href=\"https://liuzhichao.com/2016/hexo-auto-nofollow.html\" target=\"_blank\" rel=\"noopener\">https://liuzhichao.com/2016/hexo-auto-nofollow.html</a></p>\n</li>\n<li><p><a href=\"https://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/\" target=\"_blank\" rel=\"noopener\">https://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/590b451a0ce46300588c43a0\" target=\"_blank\" rel=\"noopener\">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></p>\n</li>\n</ol>\n<h2 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h2><p>通过npm下载插件。有专门针对百度的。可做SEO。</p>\n<p>sitemaps.xml</p>\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>通过npm下载插件。</p>\n<h2 id=\"Facebook-Audience广告投放\"><a href=\"#Facebook-Audience广告投放\" class=\"headerlink\" title=\"Facebook Audience广告投放\"></a>Facebook Audience广告投放</h2><p>未搞定。</p>\n<h2 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h2><p><a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></p>\n<p>可部署到百度，方便搜索引擎收录。</p>\n<h2 id=\"CNAME覆盖问题\"><a href=\"#CNAME覆盖问题\" class=\"headerlink\" title=\"CNAME覆盖问题\"></a>CNAME覆盖问题</h2><p><a href=\"https://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\" target=\"_blank\" rel=\"noopener\">https://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</a></p>\n<h2 id=\"利用分支备份Hexo项目源代码\"><a href=\"#利用分支备份Hexo项目源代码\" class=\"headerlink\" title=\"利用分支备份Hexo项目源代码\"></a>利用分支备份Hexo项目源代码</h2><p>在博客对应的GitHub项目上创建Hexo分支。Pages服务用的是master分支。</p>\n<p>yaml重要配置文件不应该上传到公开项目。</p>\n<h2 id=\"去掉post的url中的日期\"><a href=\"#去掉post的url中的日期\" class=\"headerlink\" title=\"去掉post的url中的日期\"></a>去掉post的url中的日期</h2><p>permalink: :title.html</p>\n<h2 id=\"其他优秀的同类型博客\"><a href=\"#其他优秀的同类型博客\" class=\"headerlink\" title=\"其他优秀的同类型博客\"></a>其他优秀的同类型博客</h2><p><a href=\"http://litten.me/\" target=\"_blank\" rel=\"noopener\">http://litten.me/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求澄清\"><a href=\"#需求澄清\" class=\"headerlink\" title=\"需求澄清\"></a>需求澄清</h1><ul>\n<li>个人博客。</li>\n<li>静态的即可。</li>\n<li>可由GitHub Pages或者Coding.net Pages服务托管。</li>\n<li>要有域名，好记。</li>\n<li>博客中有图片，需要稳定的存储。</li>\n<li>维护与操作系统平台无关（因为自己各种操作系统切换）。</li>\n</ul>\n<h1 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h1><p>Hexo + GitHub/Coding Pages双托管 + 腾讯云解析 + 七牛云图片存储</p>\n<h1 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h1><h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>首先安装npm，使用npm安装hexo。</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">npm</a></li>\n<li><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n</ul>\n<h2 id=\"主题Next\"><a href=\"#主题Next\" class=\"headerlink\" title=\"主题Next\"></a>主题Next</h2><p>安装：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/getting-started.html</a></p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p>仓库地址：<a href=\"https://github.com/Danceiny/blog\" target=\"_blank\" rel=\"noopener\">https://github.com/Danceiny/blog</a><br>Pages地址：<a href=\"https://danceiny.github.io/blog\" target=\"_blank\" rel=\"noopener\">https://danceiny.github.io/blog</a><br>添加CNAME文件，指向blog.cannot.cc，Pages地址重定向到该域名。</p>\n<h2 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2><p>同上。</p>\n<h2 id=\"腾讯云解析\"><a href=\"#腾讯云解析\" class=\"headerlink\" title=\"腾讯云解析\"></a>腾讯云解析</h2><p>已有域名（已备案）: <a href=\"http://cannot.cc\" target=\"_blank\" rel=\"noopener\">cannot.cc</a></p>\n<p>添加二级域名: <a href=\"http://blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">blog.cannot.cc</a></p>\n<p>添加CNAME类型的记录，记录值设置为danceiny.github.io.</p>\n<p>把<a href=\"http://www.blog.cannot.cc记录到pages.coding.me\" target=\"_blank\" rel=\"noopener\">www.blog.cannot.cc记录到pages.coding.me</a>.</p>\n<p>顺便把cannot.cc解析到 <a href=\"http://danceiny.github.io\" target=\"_blank\" rel=\"noopener\">http://danceiny.github.io</a> 了。（原来在Github上的个人主页）。有空再修改。</p>\n<p>注意：</p>\n<ol>\n<li>腾讯云解析的记录值是比较需要关注的。</li>\n<li>www是个神奇的东西，<a href=\"http://blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">http://blog.cannot.cc</a> 和 <a href=\"http://www.blog.cannot.cc\" target=\"_blank\" rel=\"noopener\">http://www.blog.cannot.cc</a> 是不一样的两个东西。</li>\n</ol>\n<h2 id=\"七牛图床\"><a href=\"#七牛图床\" class=\"headerlink\" title=\"七牛图床\"></a>七牛图床</h2><p><a href=\"https://portal.qiniu.com/bucket/\" target=\"_blank\" rel=\"noopener\">https://portal.qiniu.com/bucket/</a><br>有很多官方工具可以使用，命令行，GUI，但是目前我感觉不太用户友好。访问秘钥就是两个：Access Key和Secret Key。Bucket像是GitHub里的仓库吧，我叫它<strong>对象存储仓库</strong>。</p>\n<h2 id=\"阅读次数统计\"><a href=\"#阅读次数统计\" class=\"headerlink\" title=\"阅读次数统计\"></a>阅读次数统计</h2><ol>\n<li>可在Next中配置，使用leancloud.cn <a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%8\" target=\"_blank\" rel=\"noopener\">参见博客</a></li>\n</ol>\n<h2 id=\"社交分享\"><a href=\"#社交分享\" class=\"headerlink\" title=\"社交分享\"></a>社交分享</h2><p>直接在Next中开启jiathis即可。不支持https是个隐患。</p>\n<h2 id=\"站点搜索\"><a href=\"#站点搜索\" class=\"headerlink\" title=\"站点搜索\"></a>站点搜索</h2><p>可选的几个服务都是收费的，所以我选了本地的搜索。按照Next的教程配置即可。</p>\n<h2 id=\"百度联盟\"><a href=\"#百度联盟\" class=\"headerlink\" title=\"百度联盟\"></a>百度联盟</h2><p><a href=\"http://union.baidu.com\" target=\"_blank\" rel=\"noopener\">http://union.baidu.com</a><br>申请，未通过，网站内容还是少了点。</p>\n<h2 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h2><p>站点访问统计。百度统计的账号和百度联盟账号可以不一样，不过还是统一账号比较好，方便管理。</p>\n<h2 id=\"谷歌分析\"><a href=\"#谷歌分析\" class=\"headerlink\" title=\"谷歌分析\"></a>谷歌分析</h2><h2 id=\"跟帖回复评论\"><a href=\"#跟帖回复评论\" class=\"headerlink\" title=\"跟帖回复评论\"></a>跟帖回复评论</h2><p>使用Facebook的评论系统。</p>\n<p>网易云跟帖未引入，不过看起来效果不错。</p>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><ol>\n<li><p>Hexo优化之为外部链接添加nofollow  <a href=\"https://liuzhichao.com/2016/hexo-auto-nofollow.html\" target=\"_blank\" rel=\"noopener\">https://liuzhichao.com/2016/hexo-auto-nofollow.html</a></p>\n</li>\n<li><p><a href=\"https://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/\" target=\"_blank\" rel=\"noopener\">https://eason-yang.com/2016/08/03/tips-for-hexo-and-hexo-next/</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/590b451a0ce46300588c43a0\" target=\"_blank\" rel=\"noopener\">hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一</a></p>\n</li>\n</ol>\n<h2 id=\"站点地图\"><a href=\"#站点地图\" class=\"headerlink\" title=\"站点地图\"></a>站点地图</h2><p>通过npm下载插件。有专门针对百度的。可做SEO。</p>\n<p>sitemaps.xml</p>\n<h2 id=\"RSS订阅\"><a href=\"#RSS订阅\" class=\"headerlink\" title=\"RSS订阅\"></a>RSS订阅</h2><p>通过npm下载插件。</p>\n<h2 id=\"Facebook-Audience广告投放\"><a href=\"#Facebook-Audience广告投放\" class=\"headerlink\" title=\"Facebook Audience广告投放\"></a>Facebook Audience广告投放</h2><p>未搞定。</p>\n<h2 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h2><p><a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">https://hexo.io/docs/deployment.html</a></p>\n<p>可部署到百度，方便搜索引擎收录。</p>\n<h2 id=\"CNAME覆盖问题\"><a href=\"#CNAME覆盖问题\" class=\"headerlink\" title=\"CNAME覆盖问题\"></a>CNAME覆盖问题</h2><p><a href=\"https://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\" target=\"_blank\" rel=\"noopener\">https://www.stayhungry.me/2015/07/26/%E6%90%AD%E5%BB%BAHexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</a></p>\n<h2 id=\"利用分支备份Hexo项目源代码\"><a href=\"#利用分支备份Hexo项目源代码\" class=\"headerlink\" title=\"利用分支备份Hexo项目源代码\"></a>利用分支备份Hexo项目源代码</h2><p>在博客对应的GitHub项目上创建Hexo分支。Pages服务用的是master分支。</p>\n<p>yaml重要配置文件不应该上传到公开项目。</p>\n<h2 id=\"去掉post的url中的日期\"><a href=\"#去掉post的url中的日期\" class=\"headerlink\" title=\"去掉post的url中的日期\"></a>去掉post的url中的日期</h2><p>permalink: :title.html</p>\n<h2 id=\"其他优秀的同类型博客\"><a href=\"#其他优秀的同类型博客\" class=\"headerlink\" title=\"其他优秀的同类型博客\"></a>其他优秀的同类型博客</h2><p><a href=\"http://litten.me/\" target=\"_blank\" rel=\"noopener\">http://litten.me/</a></p>\n"},{"title":"大鱼海棠影评","date":"2019-02-02T01:44:09.000Z","updated":"2019-02-02T01:44:09.000Z","keywords":["大鱼海棠","电影"],"_content":"\n# 鱼塘末日—— 《大鱼海棠》\n\n标签（空格分隔）：影评 \n\n---\n\n“美术的皮囊是要为故事整体做嫁衣的。”\n很可惜《大鱼海棠》没有。\n\n先说为什么选这部电影写影评。\n我没有在12年前就听说过电影主创人员的梦想，我甚至在拿到电影票之前从未听说过这部电影。而电影票，也就是在一个无聊的下午，室友问我，手里有两张免费电影票，要不要一起去。\n所以我一开始就不存在期望这东西。电影看得很开心。嗯，画面让我恍然想起宫崎骏，尤其是外景，还是颤抖的旁白音以及老奶奶，背景音乐也不错。电影放完还有那两位导演过来讲他们的故事。\n导演说他是清华的工科生。哟，厉害厉害，我辈楷模。\n导演说他做了十二年的梦。哟，厉害厉害，能睡这么久不简单呐。\n故事呢？我记得导演说，打麻将那个场景，麻将的特写是要告诉女主三思而后行。\n有趣。\n过几天电影正式上映，网上一逛，骂声一片。\n我想导演十二年的梦终于要醒了。\n更加有趣了。\n\n跟风骂几句。\n\n1. 男主脱光竟然木有小鸡鸡？凭什么导演你有不让人家有？\n2. 女主真绿茶，人家为了您的幸福甘愿去死，没想到一直被当哥哥。\n3. 男主你说你除了故事一开始救了一条鱼，还干了啥？\n4. 女主应该以类似“反人类罪”的罪行被判罚吧？编剧的价值观呢？噢不对，编剧确定不是在划水？\n5. 庄子北冥有鱼的鱼，怎么那么小？说好的几千里呢？\n6. 那个老年旁白还能更无耻些吗？活了这么久怎么三观还是崩塌的？\n7. 中国风就是引出题名的“大鱼”，以及“鱼”的住所福建土楼？两千年的儒家思想呢？\n8. 三角恋玩得真不溜，比偶像剧差远了。\n9. 扯犊子情怀，国漫崛起新希望这名字好玩？\n10. 强行转3D，无耻圈钱。\n\n终于凑齐十大罪状。\n\n\n\n\n    \n\n\n\n\n","source":"_posts/大鱼海棠影评.md","raw":"---\ntitle: 大鱼海棠影评\ndate: 2019-02-02 09:44:09\nupdated: 2019-02-02 09:44:09\ntags:\n    - 影评\ncategories:\n    - 影评\nkeywords:\n    - 大鱼海棠\n    - 电影\n---\n\n# 鱼塘末日—— 《大鱼海棠》\n\n标签（空格分隔）：影评 \n\n---\n\n“美术的皮囊是要为故事整体做嫁衣的。”\n很可惜《大鱼海棠》没有。\n\n先说为什么选这部电影写影评。\n我没有在12年前就听说过电影主创人员的梦想，我甚至在拿到电影票之前从未听说过这部电影。而电影票，也就是在一个无聊的下午，室友问我，手里有两张免费电影票，要不要一起去。\n所以我一开始就不存在期望这东西。电影看得很开心。嗯，画面让我恍然想起宫崎骏，尤其是外景，还是颤抖的旁白音以及老奶奶，背景音乐也不错。电影放完还有那两位导演过来讲他们的故事。\n导演说他是清华的工科生。哟，厉害厉害，我辈楷模。\n导演说他做了十二年的梦。哟，厉害厉害，能睡这么久不简单呐。\n故事呢？我记得导演说，打麻将那个场景，麻将的特写是要告诉女主三思而后行。\n有趣。\n过几天电影正式上映，网上一逛，骂声一片。\n我想导演十二年的梦终于要醒了。\n更加有趣了。\n\n跟风骂几句。\n\n1. 男主脱光竟然木有小鸡鸡？凭什么导演你有不让人家有？\n2. 女主真绿茶，人家为了您的幸福甘愿去死，没想到一直被当哥哥。\n3. 男主你说你除了故事一开始救了一条鱼，还干了啥？\n4. 女主应该以类似“反人类罪”的罪行被判罚吧？编剧的价值观呢？噢不对，编剧确定不是在划水？\n5. 庄子北冥有鱼的鱼，怎么那么小？说好的几千里呢？\n6. 那个老年旁白还能更无耻些吗？活了这么久怎么三观还是崩塌的？\n7. 中国风就是引出题名的“大鱼”，以及“鱼”的住所福建土楼？两千年的儒家思想呢？\n8. 三角恋玩得真不溜，比偶像剧差远了。\n9. 扯犊子情怀，国漫崛起新希望这名字好玩？\n10. 强行转3D，无耻圈钱。\n\n终于凑齐十大罪状。\n\n\n\n\n    \n\n\n\n\n","slug":"大鱼海棠影评","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8al001bc4xki9veefo5","content":"<h1 id=\"鱼塘末日——-《大鱼海棠》\"><a href=\"#鱼塘末日——-《大鱼海棠》\" class=\"headerlink\" title=\"鱼塘末日—— 《大鱼海棠》\"></a>鱼塘末日—— 《大鱼海棠》</h1><p>标签（空格分隔）：影评 </p>\n<hr>\n<p>“美术的皮囊是要为故事整体做嫁衣的。”<br>很可惜《大鱼海棠》没有。</p>\n<p>先说为什么选这部电影写影评。<br>我没有在12年前就听说过电影主创人员的梦想，我甚至在拿到电影票之前从未听说过这部电影。而电影票，也就是在一个无聊的下午，室友问我，手里有两张免费电影票，要不要一起去。<br>所以我一开始就不存在期望这东西。电影看得很开心。嗯，画面让我恍然想起宫崎骏，尤其是外景，还是颤抖的旁白音以及老奶奶，背景音乐也不错。电影放完还有那两位导演过来讲他们的故事。<br>导演说他是清华的工科生。哟，厉害厉害，我辈楷模。<br>导演说他做了十二年的梦。哟，厉害厉害，能睡这么久不简单呐。<br>故事呢？我记得导演说，打麻将那个场景，麻将的特写是要告诉女主三思而后行。<br>有趣。<br>过几天电影正式上映，网上一逛，骂声一片。<br>我想导演十二年的梦终于要醒了。<br>更加有趣了。</p>\n<p>跟风骂几句。</p>\n<ol>\n<li>男主脱光竟然木有小鸡鸡？凭什么导演你有不让人家有？</li>\n<li>女主真绿茶，人家为了您的幸福甘愿去死，没想到一直被当哥哥。</li>\n<li>男主你说你除了故事一开始救了一条鱼，还干了啥？</li>\n<li>女主应该以类似“反人类罪”的罪行被判罚吧？编剧的价值观呢？噢不对，编剧确定不是在划水？</li>\n<li>庄子北冥有鱼的鱼，怎么那么小？说好的几千里呢？</li>\n<li>那个老年旁白还能更无耻些吗？活了这么久怎么三观还是崩塌的？</li>\n<li>中国风就是引出题名的“大鱼”，以及“鱼”的住所福建土楼？两千年的儒家思想呢？</li>\n<li>三角恋玩得真不溜，比偶像剧差远了。</li>\n<li>扯犊子情怀，国漫崛起新希望这名字好玩？</li>\n<li>强行转3D，无耻圈钱。</li>\n</ol>\n<p>终于凑齐十大罪状。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"鱼塘末日——-《大鱼海棠》\"><a href=\"#鱼塘末日——-《大鱼海棠》\" class=\"headerlink\" title=\"鱼塘末日—— 《大鱼海棠》\"></a>鱼塘末日—— 《大鱼海棠》</h1><p>标签（空格分隔）：影评 </p>\n<hr>\n<p>“美术的皮囊是要为故事整体做嫁衣的。”<br>很可惜《大鱼海棠》没有。</p>\n<p>先说为什么选这部电影写影评。<br>我没有在12年前就听说过电影主创人员的梦想，我甚至在拿到电影票之前从未听说过这部电影。而电影票，也就是在一个无聊的下午，室友问我，手里有两张免费电影票，要不要一起去。<br>所以我一开始就不存在期望这东西。电影看得很开心。嗯，画面让我恍然想起宫崎骏，尤其是外景，还是颤抖的旁白音以及老奶奶，背景音乐也不错。电影放完还有那两位导演过来讲他们的故事。<br>导演说他是清华的工科生。哟，厉害厉害，我辈楷模。<br>导演说他做了十二年的梦。哟，厉害厉害，能睡这么久不简单呐。<br>故事呢？我记得导演说，打麻将那个场景，麻将的特写是要告诉女主三思而后行。<br>有趣。<br>过几天电影正式上映，网上一逛，骂声一片。<br>我想导演十二年的梦终于要醒了。<br>更加有趣了。</p>\n<p>跟风骂几句。</p>\n<ol>\n<li>男主脱光竟然木有小鸡鸡？凭什么导演你有不让人家有？</li>\n<li>女主真绿茶，人家为了您的幸福甘愿去死，没想到一直被当哥哥。</li>\n<li>男主你说你除了故事一开始救了一条鱼，还干了啥？</li>\n<li>女主应该以类似“反人类罪”的罪行被判罚吧？编剧的价值观呢？噢不对，编剧确定不是在划水？</li>\n<li>庄子北冥有鱼的鱼，怎么那么小？说好的几千里呢？</li>\n<li>那个老年旁白还能更无耻些吗？活了这么久怎么三观还是崩塌的？</li>\n<li>中国风就是引出题名的“大鱼”，以及“鱼”的住所福建土楼？两千年的儒家思想呢？</li>\n<li>三角恋玩得真不溜，比偶像剧差远了。</li>\n<li>扯犊子情怀，国漫崛起新希望这名字好玩？</li>\n<li>强行转3D，无耻圈钱。</li>\n</ol>\n<p>终于凑齐十大罪状。</p>\n"},{"date":"2017-07-12T11:05:55.000Z","status":"public","title":"批判性思维结课录","keywords":["小鲜肉","导演","批判性思维","电影"],"_content":"\n# 董毓老师暂时离开，批判性思维不会离开\n\n14级种子班的批判性思维是6月26日（星期一）开的课，由于白天全天上课的缘故，不到两三天的光阴，我们和任课的董毓老师便有相交甚久之感。\n\n第一天董毓老师令我们自主阅读，完成习题。要求的阅读内容不算少，小半本教材。很久没有咬文嚼字过的我们，时间一长还有些不适应。幸而带着问题读书，参与小组讨论，这才觉得不那么枯燥。而在讨论的过程中，总会有一些思维的火花闪现出来，这也是贯穿课程始终的一种学习方式。\n\n董毓老师讲课的时候很有风范，镇定自若，“察言观色”的意识和能力很强，和我们互动很多，这让我们很难开小差。期间董老师请来华科的几位老师合作授课，课外一次在食堂吃饭与董老师同桌，董老师详详细细地问了我对这几位老师授课的一些看法。\n\n董老师写的教材很“学究”，起初让我有一种敬畏之心，而授课时董老师广征博引，虽名为哲学教授，却展现了极强的自然科学素养；虽常年身在国外，却尤为关注国内热点事件，并且以批判性思维的眼光来审视之。这让我们兴致很高，启发很大。\n\n这门课程注重思维训练，我们虽然不能背诵其中一些内容，但是在批判性思维的意识和能力上都有了较为明显的提升。首先是意识方面，连续一周多耳濡目染的听课与讨论，可以说形成了了初级的神经反射。而在能力方面，对图尔明模型等一些思维工具的学习与应用，也让我们在批判性思维的全面性和有效性等方面有所突破。\n\n以罗伯特·恩尼斯对批判性思维的定义，“批判性思维是理性的、反思性的思维，其目的在于决定我们的信念和行动。”，我们对批判性思维的认识是渐进的、发展的。结课当天我们每个小组都做了GRE论文、正反证和实例分析这三个答辩展示，同学们在答辩中对应用批判性思维的过程的表述也让我看得更多更远，我从中认识到集思广益也是批判性思维“反思性”的一个重要体现。\n\n董毓老师最后对我们班的评价挺不错，有不足，董老师也言传身教地反思自身授课是否详略得当快慢相宜。“师者，传道受业解惑也”。董毓老师虽然来去且匆匆，但批判性思维必将伴我们悠然见南山。\n","source":"_posts/批判性思维结课录.md","raw":"---\ndate: 2017-07-12 19:05:55\nstatus: public\ntitle: 批判性思维结课录\nkeywords: \n- 小鲜肉\n- 导演\n- 批判性思维\n- 电影\ntags: \n- 交流园地 \ncategories: \n- 交流园地 \n---\n\n# 董毓老师暂时离开，批判性思维不会离开\n\n14级种子班的批判性思维是6月26日（星期一）开的课，由于白天全天上课的缘故，不到两三天的光阴，我们和任课的董毓老师便有相交甚久之感。\n\n第一天董毓老师令我们自主阅读，完成习题。要求的阅读内容不算少，小半本教材。很久没有咬文嚼字过的我们，时间一长还有些不适应。幸而带着问题读书，参与小组讨论，这才觉得不那么枯燥。而在讨论的过程中，总会有一些思维的火花闪现出来，这也是贯穿课程始终的一种学习方式。\n\n董毓老师讲课的时候很有风范，镇定自若，“察言观色”的意识和能力很强，和我们互动很多，这让我们很难开小差。期间董老师请来华科的几位老师合作授课，课外一次在食堂吃饭与董老师同桌，董老师详详细细地问了我对这几位老师授课的一些看法。\n\n董老师写的教材很“学究”，起初让我有一种敬畏之心，而授课时董老师广征博引，虽名为哲学教授，却展现了极强的自然科学素养；虽常年身在国外，却尤为关注国内热点事件，并且以批判性思维的眼光来审视之。这让我们兴致很高，启发很大。\n\n这门课程注重思维训练，我们虽然不能背诵其中一些内容，但是在批判性思维的意识和能力上都有了较为明显的提升。首先是意识方面，连续一周多耳濡目染的听课与讨论，可以说形成了了初级的神经反射。而在能力方面，对图尔明模型等一些思维工具的学习与应用，也让我们在批判性思维的全面性和有效性等方面有所突破。\n\n以罗伯特·恩尼斯对批判性思维的定义，“批判性思维是理性的、反思性的思维，其目的在于决定我们的信念和行动。”，我们对批判性思维的认识是渐进的、发展的。结课当天我们每个小组都做了GRE论文、正反证和实例分析这三个答辩展示，同学们在答辩中对应用批判性思维的过程的表述也让我看得更多更远，我从中认识到集思广益也是批判性思维“反思性”的一个重要体现。\n\n董毓老师最后对我们班的评价挺不错，有不足，董老师也言传身教地反思自身授课是否详略得当快慢相宜。“师者，传道受业解惑也”。董毓老师虽然来去且匆匆，但批判性思维必将伴我们悠然见南山。\n","slug":"批判性思维结课录","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8by002wc4xkflnre7su","content":"<h1 id=\"董毓老师暂时离开，批判性思维不会离开\"><a href=\"#董毓老师暂时离开，批判性思维不会离开\" class=\"headerlink\" title=\"董毓老师暂时离开，批判性思维不会离开\"></a>董毓老师暂时离开，批判性思维不会离开</h1><p>14级种子班的批判性思维是6月26日（星期一）开的课，由于白天全天上课的缘故，不到两三天的光阴，我们和任课的董毓老师便有相交甚久之感。</p>\n<p>第一天董毓老师令我们自主阅读，完成习题。要求的阅读内容不算少，小半本教材。很久没有咬文嚼字过的我们，时间一长还有些不适应。幸而带着问题读书，参与小组讨论，这才觉得不那么枯燥。而在讨论的过程中，总会有一些思维的火花闪现出来，这也是贯穿课程始终的一种学习方式。</p>\n<p>董毓老师讲课的时候很有风范，镇定自若，“察言观色”的意识和能力很强，和我们互动很多，这让我们很难开小差。期间董老师请来华科的几位老师合作授课，课外一次在食堂吃饭与董老师同桌，董老师详详细细地问了我对这几位老师授课的一些看法。</p>\n<p>董老师写的教材很“学究”，起初让我有一种敬畏之心，而授课时董老师广征博引，虽名为哲学教授，却展现了极强的自然科学素养；虽常年身在国外，却尤为关注国内热点事件，并且以批判性思维的眼光来审视之。这让我们兴致很高，启发很大。</p>\n<p>这门课程注重思维训练，我们虽然不能背诵其中一些内容，但是在批判性思维的意识和能力上都有了较为明显的提升。首先是意识方面，连续一周多耳濡目染的听课与讨论，可以说形成了了初级的神经反射。而在能力方面，对图尔明模型等一些思维工具的学习与应用，也让我们在批判性思维的全面性和有效性等方面有所突破。</p>\n<p>以罗伯特·恩尼斯对批判性思维的定义，“批判性思维是理性的、反思性的思维，其目的在于决定我们的信念和行动。”，我们对批判性思维的认识是渐进的、发展的。结课当天我们每个小组都做了GRE论文、正反证和实例分析这三个答辩展示，同学们在答辩中对应用批判性思维的过程的表述也让我看得更多更远，我从中认识到集思广益也是批判性思维“反思性”的一个重要体现。</p>\n<p>董毓老师最后对我们班的评价挺不错，有不足，董老师也言传身教地反思自身授课是否详略得当快慢相宜。“师者，传道受业解惑也”。董毓老师虽然来去且匆匆，但批判性思维必将伴我们悠然见南山。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"董毓老师暂时离开，批判性思维不会离开\"><a href=\"#董毓老师暂时离开，批判性思维不会离开\" class=\"headerlink\" title=\"董毓老师暂时离开，批判性思维不会离开\"></a>董毓老师暂时离开，批判性思维不会离开</h1><p>14级种子班的批判性思维是6月26日（星期一）开的课，由于白天全天上课的缘故，不到两三天的光阴，我们和任课的董毓老师便有相交甚久之感。</p>\n<p>第一天董毓老师令我们自主阅读，完成习题。要求的阅读内容不算少，小半本教材。很久没有咬文嚼字过的我们，时间一长还有些不适应。幸而带着问题读书，参与小组讨论，这才觉得不那么枯燥。而在讨论的过程中，总会有一些思维的火花闪现出来，这也是贯穿课程始终的一种学习方式。</p>\n<p>董毓老师讲课的时候很有风范，镇定自若，“察言观色”的意识和能力很强，和我们互动很多，这让我们很难开小差。期间董老师请来华科的几位老师合作授课，课外一次在食堂吃饭与董老师同桌，董老师详详细细地问了我对这几位老师授课的一些看法。</p>\n<p>董老师写的教材很“学究”，起初让我有一种敬畏之心，而授课时董老师广征博引，虽名为哲学教授，却展现了极强的自然科学素养；虽常年身在国外，却尤为关注国内热点事件，并且以批判性思维的眼光来审视之。这让我们兴致很高，启发很大。</p>\n<p>这门课程注重思维训练，我们虽然不能背诵其中一些内容，但是在批判性思维的意识和能力上都有了较为明显的提升。首先是意识方面，连续一周多耳濡目染的听课与讨论，可以说形成了了初级的神经反射。而在能力方面，对图尔明模型等一些思维工具的学习与应用，也让我们在批判性思维的全面性和有效性等方面有所突破。</p>\n<p>以罗伯特·恩尼斯对批判性思维的定义，“批判性思维是理性的、反思性的思维，其目的在于决定我们的信念和行动。”，我们对批判性思维的认识是渐进的、发展的。结课当天我们每个小组都做了GRE论文、正反证和实例分析这三个答辩展示，同学们在答辩中对应用批判性思维的过程的表述也让我看得更多更远，我从中认识到集思广益也是批判性思维“反思性”的一个重要体现。</p>\n<p>董毓老师最后对我们班的评价挺不错，有不足，董老师也言传身教地反思自身授课是否详略得当快慢相宜。“师者，传道受业解惑也”。董毓老师虽然来去且匆匆，但批判性思维必将伴我们悠然见南山。</p>\n"},{"title":"字典服务设计与实现","date":"2019-02-02T01:44:09.000Z","updated":"2019-02-02T01:44:09.000Z","keywords":null,"_content":"\n\n{% raw %}\n<!-- Facebook banner -->\n<div style=\"display:none; position: relative;\">\n  <script type=\"text/javascript\">\n    var data = {\n      placementid: '366707543723815_366739427053960',\n      format: '300x250',\n      testmode: false,\n      onAdLoaded: function(element) {\n        console.log('Audience Network [366707543723815_366739427053960] ad loaded');\n        element.style.display = 'block';\n      },\n      onAdError: function(errorCode, errorMessage) {\n        console.log('Audience Network [366707543723815_366739427053960] error (' + errorCode + ') ' + errorMessage);\n        // PASSBACK goes here\n      }\n    };\n  </script>\n  <script>\n    (function(a,b,c){var d=\"https://www.facebook.com\",e=\"https://connect.facebook.net/en_US/fbadnw55.js\",f={iframeLoaded:true,xhrLoaded:true},g=a.data,h=function(){if(Date.now){return Date.now();}else return +new Date();},i=function(aa){var ba=d+\"/audience_network/client_event\",ca={cb:h(),event_name:\"ADNW_ADERROR\",ad_pivot_type:\"audience_network_mobile_web\",sdk_version:\"5.5.web\",app_id:g.placementid.split(\"_\")[0],publisher_id:g.placementid.split(\"_\")[1],error_message:aa},da=[];for(var ea in ca)da.push(encodeURIComponent(ea)+\"=\"+encodeURIComponent(ca[ea]));var fa=ba+\"?\"+da.join(\"&\"),ga=new XMLHttpRequest();ga.open(\"GET\",fa,true);ga.send();if(g.onAdError)g.onAdError(\"1000\",\"Internal error.\");},j=function(){if(b.currentScript){return b.currentScript;}else{var aa=b.getElementsByTagName(\"script\");return aa[aa.length-1];}},k=function(aa){try{return aa.document.referrer;}catch(ba){}return \"\";},l=function(){var aa=a,ba=[aa];try{while(aa!==aa.parent&&aa.parent.document)ba.push(aa=aa.parent);}catch(ca){}return ba.reverse();},m=function(){var aa=l();for(var ba=0;ba<aa.length;ba++){var ca=aa[ba],da=ca.ADNW||{};ca.ADNW=da;if(!ca.ADNW)continue;return da.v55=da.v55||{ads:[],window:ca};}throw new Error(\"no_writable_global\");},n=function(aa){var ba=aa.indexOf(\"/\",aa.indexOf(\"://\")+3);if(ba===-1)return aa;return aa.substring(0,ba);},o=function(aa){return aa.location.href||k(aa);},p=function(aa){if(aa.sdkLoaded)return;var ba=aa.window.document,ca=ba.createElement(\"iframe\");ca.name=\"fbadnw\";ca.style.display=\"none\";ba.body.appendChild(ca);var da=ca.contentDocument.createElement(\"script\");da.src=e;da.async=true;ca.contentDocument.body.appendChild(da);aa.sdkLoaded=true;},q=function(aa){var ba=/^https?:\\/\\/www\\.google(\\.com?)?.\\w{2,3}$/;return !!aa.match(ba);},r=function(aa){return !!aa.match(/cdn\\.ampproject\\.org$/);},s=function(){var aa=c.ancestorOrigins||[],ba=aa[aa.length-1]||c.origin,ca=aa[aa.length-2]||c.origin;if(q(ba)&&r(ca)){return n(ca);}else return n(ba);},t=function(aa){try{return JSON.parse(aa);}catch(ba){i(ba.message);throw ba;}},u=function(aa,ba,ca){if(!aa.iframe){var da=ca.createElement(\"iframe\");da.src=d+\"/audiencenetwork/iframe/\";da.style.display=\"none\";ca.body.appendChild(da);aa.iframe=da;aa.iframeAppendedTime=h();aa.iframeData={};}ba.iframe=aa.iframe;ba.iframeData=aa.iframeData;ba.tagJsIframeAppendedTime=aa.iframeAppendedTime||0;},v=function(aa){var ba=d+\"/audiencenetwork/xhr/?sdk=5.5.web\";for(var ca in aa)if(typeof aa[ca]!==\"function\")ba+=\"&\"+ca+\"=\"+encodeURIComponent(aa[ca]);var da=new XMLHttpRequest();da.open(\"GET\",ba,true);da.withCredentials=true;da.onreadystatechange=function(){if(da.readyState===4){var ea=t(da.response);aa.events.push({name:\"xhrLoaded\",source:aa.iframe.contentWindow,data:ea,postMessageTimestamp:h(),receivedTimestamp:h()});}};da.send();},w=function(aa,ba){var ca=d+\"/audiencenetwork/xhriframe/?sdk=5.5.web\";for(var da in ba)if(typeof ba[da]!==\"function\")ca+=\"&\"+da+\"=\"+encodeURIComponent(ba[da]);var ea=b.createElement(\"iframe\");ea.src=ca;ea.style.display=\"none\";b.body.appendChild(ea);ba.iframe=ea;ba.iframeData={};ba.tagJsIframeAppendedTime=h();},x=function(aa){var ba=function(event){try{var da=event.data;if(da.name in f)aa.events.push({name:da.name,source:event.source,data:da.data});}catch(ea){}},ca=aa.iframe.contentWindow.parent;ca.addEventListener(\"message\",ba,false);},y=function(aa){if(aa.context&&aa.context.sourceUrl)return true;try{return !!JSON.parse(decodeURI(aa.name)).ampcontextVersion;}catch(ba){return false;}},z=function(aa){var ba=h(),ca=l()[0],da=j().parentElement,ea=ca!=a.top,fa=ca.$sf&&ca.$sf.ext,ga=o(ca),ha=m();p(ha);var ia={amp:y(ca),events:[],tagJsInitTime:ba,rootElement:da,iframe:null,tagJsIframeAppendedTime:ha.iframeAppendedTime||0,url:ga,domain:s(),channel:n(o(ca)),width:screen.width,height:screen.height,pixelratio:a.devicePixelRatio,placementindex:ha.ads.length,crossdomain:ea,safeframe:!!fa,placementid:g.placementid,format:g.format||\"300x250\",testmode:!!g.testmode,onAdLoaded:g.onAdLoaded,onAdError:g.onAdError};if(g.bidid)ia.bidid=g.bidid;if(ea){w(ha,ia);}else{u(ha,ia,ca.document);v(ia);}x(ia);ia.rootElement.dataset.placementid=ia.placementid;ha.ads.push(ia);};try{z();}catch(aa){i(aa.message||aa);throw aa;}})(window,document,location);\n  </script>\n</div>\n<!-- Facebook banner -->\n\n<!--facebook social share-->\n<script>\n  window.fbAsyncInit = function() {\n    FB.init({\n      appId      : '366707543723815',\n      xfbml      : true,\n      version    : 'v2.9'\n    });\n    FB.AppEvents.logPageView();\n  };\n  (function(d, s, id){\n     var js, fjs = d.getElementsByTagName(s)[0];\n     if (d.getElementById(id)) {return;}\n     js = d.createElement(s); js.id = id;\n     js.src = \"//connect.facebook.net/zh_Hans/sdk.js\";\n     fjs.parentNode.insertBefore(js, fjs);\n   }(document, 'script', 'facebook-jssdk'));\n</script>\n<!--facebook social share-->\n{% endraw %}\n\n\n\n## 背景\n\n公司启动主站重构。\n\n主站是一个有着7年历史之久的大型单体应用，总代码量超过100万行。其中有一个模块是用于配置类目、地区、meta等信息的，叫牧野系统。由于业务复杂、hardcode极多，这个以可配置为荣的牧野系统，已经变得几乎完全不可用。而我所在的team，即负责牧野系统的重构。\n\n根据初步分析与设计，新的牧野系统分为三大子系统：\n\n1. 字典服务，负责类目、地区、车型等库数据的管理\n2. schema服务，负责meta数据的管理\n3. 牧野前台，供内部人员使用\n\n其中字典服务基本由我主导完成，尤其感谢某位测试同事的严谨把关，字典服务基本达到了功能完整可用、行为符合预期，尽管性能并非足够优秀，但也达到了上线标准。\n\n下面介绍一下公司内部字典服务的情况。牧野系统自18年12月份启动重构，一周内完成字典服务设计，字典服务在两周后完成设计文档的开发，并提交测试，测试周期耗时一周，基本完成功能测试，性能方面差距较大。此后一个月，字典服务一方面配合调用方、业务方等持续迭代功能打磨细节，一方面进行了第一轮性能优化——开发了批量查询接口。截至19年2月份，由于一些原因尚未放开流量，字典服务的平均QPS在300左右，最高600，没有达到设计预期的最高峰10000的QPS。\n\n由于公司内部语言体系是php+java的，字典服务也是基于spring（所用框架是内部自研的基于spring的spring-time）进行开发的。开发字典服务前，我本身的java开发经验只有不到三个月，在开发中我感觉字典服务有许多非常典型的case，可以说是入门java后端spring的教科书般的项目。由于我个人对Golang更感兴趣，因此也借此机会在尝试用go开发一个完全兼容Java版字典服务的golang版本的字典服务。\n\n以上即是本文背景。\n\n## 设计要求\n\n- 接口层完全兼容原Java版的字典服务\n\n## 系统设计\n\n由于要做接口层兼容，下面先介绍一些原java版的接口层长什么样。\n\n完整的[字典服务文档](https://github.com/Danceiny/baixing-helper/blob/master/docs/%E5%AD%97%E5%85%B8%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3.md)。提炼几个关键点如下：\n\n1. 数据库采用mysql，主要字段有\n  - bid，业务id，可能为int/string\n  - name，节点名称\n  - pid，父节点id\n2. 缓存主要有三个：\n  - 节点的对象缓存，也就是mysql的一行映射出来的一个对象。更加细分来说，对象缓存分两种（即有两份缓存），一种是完整的对象，一种是去除了部分属性的“裁剪精简版”对象。\n  - pids，节点的父系节点链条的id数组\n  - cids，节点的子节点的id数组\n3. 单个查询接口主要支持三个参数\n  - bid，如前文所述\n  - parentDepth，向父级查询的深度\n  - childrenDepth，向子级查询的深度\n4. 批量查询接口主要支持以下参数\n  - onlyId 是否将父子节点的bid加载成对象\n  - hasChildren 是否查询子节点\n  - parentDepth 如前文所述\n  - area 需要查询的area的bid数组，类似的还有category等\n\n\n","source":"_posts/字典服务设计与实现.md","raw":"---\ntitle: 字典服务设计与实现\ndate: 2019-02-02 09:44:09\nupdated: 2019-02-02 09:44:09\ntags:\ncategories:\nkeywords:\n---\n\n\n{% raw %}\n<!-- Facebook banner -->\n<div style=\"display:none; position: relative;\">\n  <script type=\"text/javascript\">\n    var data = {\n      placementid: '366707543723815_366739427053960',\n      format: '300x250',\n      testmode: false,\n      onAdLoaded: function(element) {\n        console.log('Audience Network [366707543723815_366739427053960] ad loaded');\n        element.style.display = 'block';\n      },\n      onAdError: function(errorCode, errorMessage) {\n        console.log('Audience Network [366707543723815_366739427053960] error (' + errorCode + ') ' + errorMessage);\n        // PASSBACK goes here\n      }\n    };\n  </script>\n  <script>\n    (function(a,b,c){var d=\"https://www.facebook.com\",e=\"https://connect.facebook.net/en_US/fbadnw55.js\",f={iframeLoaded:true,xhrLoaded:true},g=a.data,h=function(){if(Date.now){return Date.now();}else return +new Date();},i=function(aa){var ba=d+\"/audience_network/client_event\",ca={cb:h(),event_name:\"ADNW_ADERROR\",ad_pivot_type:\"audience_network_mobile_web\",sdk_version:\"5.5.web\",app_id:g.placementid.split(\"_\")[0],publisher_id:g.placementid.split(\"_\")[1],error_message:aa},da=[];for(var ea in ca)da.push(encodeURIComponent(ea)+\"=\"+encodeURIComponent(ca[ea]));var fa=ba+\"?\"+da.join(\"&\"),ga=new XMLHttpRequest();ga.open(\"GET\",fa,true);ga.send();if(g.onAdError)g.onAdError(\"1000\",\"Internal error.\");},j=function(){if(b.currentScript){return b.currentScript;}else{var aa=b.getElementsByTagName(\"script\");return aa[aa.length-1];}},k=function(aa){try{return aa.document.referrer;}catch(ba){}return \"\";},l=function(){var aa=a,ba=[aa];try{while(aa!==aa.parent&&aa.parent.document)ba.push(aa=aa.parent);}catch(ca){}return ba.reverse();},m=function(){var aa=l();for(var ba=0;ba<aa.length;ba++){var ca=aa[ba],da=ca.ADNW||{};ca.ADNW=da;if(!ca.ADNW)continue;return da.v55=da.v55||{ads:[],window:ca};}throw new Error(\"no_writable_global\");},n=function(aa){var ba=aa.indexOf(\"/\",aa.indexOf(\"://\")+3);if(ba===-1)return aa;return aa.substring(0,ba);},o=function(aa){return aa.location.href||k(aa);},p=function(aa){if(aa.sdkLoaded)return;var ba=aa.window.document,ca=ba.createElement(\"iframe\");ca.name=\"fbadnw\";ca.style.display=\"none\";ba.body.appendChild(ca);var da=ca.contentDocument.createElement(\"script\");da.src=e;da.async=true;ca.contentDocument.body.appendChild(da);aa.sdkLoaded=true;},q=function(aa){var ba=/^https?:\\/\\/www\\.google(\\.com?)?.\\w{2,3}$/;return !!aa.match(ba);},r=function(aa){return !!aa.match(/cdn\\.ampproject\\.org$/);},s=function(){var aa=c.ancestorOrigins||[],ba=aa[aa.length-1]||c.origin,ca=aa[aa.length-2]||c.origin;if(q(ba)&&r(ca)){return n(ca);}else return n(ba);},t=function(aa){try{return JSON.parse(aa);}catch(ba){i(ba.message);throw ba;}},u=function(aa,ba,ca){if(!aa.iframe){var da=ca.createElement(\"iframe\");da.src=d+\"/audiencenetwork/iframe/\";da.style.display=\"none\";ca.body.appendChild(da);aa.iframe=da;aa.iframeAppendedTime=h();aa.iframeData={};}ba.iframe=aa.iframe;ba.iframeData=aa.iframeData;ba.tagJsIframeAppendedTime=aa.iframeAppendedTime||0;},v=function(aa){var ba=d+\"/audiencenetwork/xhr/?sdk=5.5.web\";for(var ca in aa)if(typeof aa[ca]!==\"function\")ba+=\"&\"+ca+\"=\"+encodeURIComponent(aa[ca]);var da=new XMLHttpRequest();da.open(\"GET\",ba,true);da.withCredentials=true;da.onreadystatechange=function(){if(da.readyState===4){var ea=t(da.response);aa.events.push({name:\"xhrLoaded\",source:aa.iframe.contentWindow,data:ea,postMessageTimestamp:h(),receivedTimestamp:h()});}};da.send();},w=function(aa,ba){var ca=d+\"/audiencenetwork/xhriframe/?sdk=5.5.web\";for(var da in ba)if(typeof ba[da]!==\"function\")ca+=\"&\"+da+\"=\"+encodeURIComponent(ba[da]);var ea=b.createElement(\"iframe\");ea.src=ca;ea.style.display=\"none\";b.body.appendChild(ea);ba.iframe=ea;ba.iframeData={};ba.tagJsIframeAppendedTime=h();},x=function(aa){var ba=function(event){try{var da=event.data;if(da.name in f)aa.events.push({name:da.name,source:event.source,data:da.data});}catch(ea){}},ca=aa.iframe.contentWindow.parent;ca.addEventListener(\"message\",ba,false);},y=function(aa){if(aa.context&&aa.context.sourceUrl)return true;try{return !!JSON.parse(decodeURI(aa.name)).ampcontextVersion;}catch(ba){return false;}},z=function(aa){var ba=h(),ca=l()[0],da=j().parentElement,ea=ca!=a.top,fa=ca.$sf&&ca.$sf.ext,ga=o(ca),ha=m();p(ha);var ia={amp:y(ca),events:[],tagJsInitTime:ba,rootElement:da,iframe:null,tagJsIframeAppendedTime:ha.iframeAppendedTime||0,url:ga,domain:s(),channel:n(o(ca)),width:screen.width,height:screen.height,pixelratio:a.devicePixelRatio,placementindex:ha.ads.length,crossdomain:ea,safeframe:!!fa,placementid:g.placementid,format:g.format||\"300x250\",testmode:!!g.testmode,onAdLoaded:g.onAdLoaded,onAdError:g.onAdError};if(g.bidid)ia.bidid=g.bidid;if(ea){w(ha,ia);}else{u(ha,ia,ca.document);v(ia);}x(ia);ia.rootElement.dataset.placementid=ia.placementid;ha.ads.push(ia);};try{z();}catch(aa){i(aa.message||aa);throw aa;}})(window,document,location);\n  </script>\n</div>\n<!-- Facebook banner -->\n\n<!--facebook social share-->\n<script>\n  window.fbAsyncInit = function() {\n    FB.init({\n      appId      : '366707543723815',\n      xfbml      : true,\n      version    : 'v2.9'\n    });\n    FB.AppEvents.logPageView();\n  };\n  (function(d, s, id){\n     var js, fjs = d.getElementsByTagName(s)[0];\n     if (d.getElementById(id)) {return;}\n     js = d.createElement(s); js.id = id;\n     js.src = \"//connect.facebook.net/zh_Hans/sdk.js\";\n     fjs.parentNode.insertBefore(js, fjs);\n   }(document, 'script', 'facebook-jssdk'));\n</script>\n<!--facebook social share-->\n{% endraw %}\n\n\n\n## 背景\n\n公司启动主站重构。\n\n主站是一个有着7年历史之久的大型单体应用，总代码量超过100万行。其中有一个模块是用于配置类目、地区、meta等信息的，叫牧野系统。由于业务复杂、hardcode极多，这个以可配置为荣的牧野系统，已经变得几乎完全不可用。而我所在的team，即负责牧野系统的重构。\n\n根据初步分析与设计，新的牧野系统分为三大子系统：\n\n1. 字典服务，负责类目、地区、车型等库数据的管理\n2. schema服务，负责meta数据的管理\n3. 牧野前台，供内部人员使用\n\n其中字典服务基本由我主导完成，尤其感谢某位测试同事的严谨把关，字典服务基本达到了功能完整可用、行为符合预期，尽管性能并非足够优秀，但也达到了上线标准。\n\n下面介绍一下公司内部字典服务的情况。牧野系统自18年12月份启动重构，一周内完成字典服务设计，字典服务在两周后完成设计文档的开发，并提交测试，测试周期耗时一周，基本完成功能测试，性能方面差距较大。此后一个月，字典服务一方面配合调用方、业务方等持续迭代功能打磨细节，一方面进行了第一轮性能优化——开发了批量查询接口。截至19年2月份，由于一些原因尚未放开流量，字典服务的平均QPS在300左右，最高600，没有达到设计预期的最高峰10000的QPS。\n\n由于公司内部语言体系是php+java的，字典服务也是基于spring（所用框架是内部自研的基于spring的spring-time）进行开发的。开发字典服务前，我本身的java开发经验只有不到三个月，在开发中我感觉字典服务有许多非常典型的case，可以说是入门java后端spring的教科书般的项目。由于我个人对Golang更感兴趣，因此也借此机会在尝试用go开发一个完全兼容Java版字典服务的golang版本的字典服务。\n\n以上即是本文背景。\n\n## 设计要求\n\n- 接口层完全兼容原Java版的字典服务\n\n## 系统设计\n\n由于要做接口层兼容，下面先介绍一些原java版的接口层长什么样。\n\n完整的[字典服务文档](https://github.com/Danceiny/baixing-helper/blob/master/docs/%E5%AD%97%E5%85%B8%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3.md)。提炼几个关键点如下：\n\n1. 数据库采用mysql，主要字段有\n  - bid，业务id，可能为int/string\n  - name，节点名称\n  - pid，父节点id\n2. 缓存主要有三个：\n  - 节点的对象缓存，也就是mysql的一行映射出来的一个对象。更加细分来说，对象缓存分两种（即有两份缓存），一种是完整的对象，一种是去除了部分属性的“裁剪精简版”对象。\n  - pids，节点的父系节点链条的id数组\n  - cids，节点的子节点的id数组\n3. 单个查询接口主要支持三个参数\n  - bid，如前文所述\n  - parentDepth，向父级查询的深度\n  - childrenDepth，向子级查询的深度\n4. 批量查询接口主要支持以下参数\n  - onlyId 是否将父子节点的bid加载成对象\n  - hasChildren 是否查询子节点\n  - parentDepth 如前文所述\n  - area 需要查询的area的bid数组，类似的还有category等\n\n\n","slug":"字典服务设计与实现","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8c0002yc4xk8gc66ul4","content":"\n<!-- Facebook banner -->\n<div style=\"display:none; position: relative;\">\n  <script type=\"text/javascript\">\n    var data = {\n      placementid: '366707543723815_366739427053960',\n      format: '300x250',\n      testmode: false,\n      onAdLoaded: function(element) {\n        console.log('Audience Network [366707543723815_366739427053960] ad loaded');\n        element.style.display = 'block';\n      },\n      onAdError: function(errorCode, errorMessage) {\n        console.log('Audience Network [366707543723815_366739427053960] error (' + errorCode + ') ' + errorMessage);\n        // PASSBACK goes here\n      }\n    };\n  </script>\n  <script>\n    (function(a,b,c){var d=\"https://www.facebook.com\",e=\"https://connect.facebook.net/en_US/fbadnw55.js\",f={iframeLoaded:true,xhrLoaded:true},g=a.data,h=function(){if(Date.now){return Date.now();}else return +new Date();},i=function(aa){var ba=d+\"/audience_network/client_event\",ca={cb:h(),event_name:\"ADNW_ADERROR\",ad_pivot_type:\"audience_network_mobile_web\",sdk_version:\"5.5.web\",app_id:g.placementid.split(\"_\")[0],publisher_id:g.placementid.split(\"_\")[1],error_message:aa},da=[];for(var ea in ca)da.push(encodeURIComponent(ea)+\"=\"+encodeURIComponent(ca[ea]));var fa=ba+\"?\"+da.join(\"&\"),ga=new XMLHttpRequest();ga.open(\"GET\",fa,true);ga.send();if(g.onAdError)g.onAdError(\"1000\",\"Internal error.\");},j=function(){if(b.currentScript){return b.currentScript;}else{var aa=b.getElementsByTagName(\"script\");return aa[aa.length-1];}},k=function(aa){try{return aa.document.referrer;}catch(ba){}return \"\";},l=function(){var aa=a,ba=[aa];try{while(aa!==aa.parent&&aa.parent.document)ba.push(aa=aa.parent);}catch(ca){}return ba.reverse();},m=function(){var aa=l();for(var ba=0;ba<aa.length;ba++){var ca=aa[ba],da=ca.ADNW||{};ca.ADNW=da;if(!ca.ADNW)continue;return da.v55=da.v55||{ads:[],window:ca};}throw new Error(\"no_writable_global\");},n=function(aa){var ba=aa.indexOf(\"/\",aa.indexOf(\"://\")+3);if(ba===-1)return aa;return aa.substring(0,ba);},o=function(aa){return aa.location.href||k(aa);},p=function(aa){if(aa.sdkLoaded)return;var ba=aa.window.document,ca=ba.createElement(\"iframe\");ca.name=\"fbadnw\";ca.style.display=\"none\";ba.body.appendChild(ca);var da=ca.contentDocument.createElement(\"script\");da.src=e;da.async=true;ca.contentDocument.body.appendChild(da);aa.sdkLoaded=true;},q=function(aa){var ba=/^https?:\\/\\/www\\.google(\\.com?)?.\\w{2,3}$/;return !!aa.match(ba);},r=function(aa){return !!aa.match(/cdn\\.ampproject\\.org$/);},s=function(){var aa=c.ancestorOrigins||[],ba=aa[aa.length-1]||c.origin,ca=aa[aa.length-2]||c.origin;if(q(ba)&&r(ca)){return n(ca);}else return n(ba);},t=function(aa){try{return JSON.parse(aa);}catch(ba){i(ba.message);throw ba;}},u=function(aa,ba,ca){if(!aa.iframe){var da=ca.createElement(\"iframe\");da.src=d+\"/audiencenetwork/iframe/\";da.style.display=\"none\";ca.body.appendChild(da);aa.iframe=da;aa.iframeAppendedTime=h();aa.iframeData={};}ba.iframe=aa.iframe;ba.iframeData=aa.iframeData;ba.tagJsIframeAppendedTime=aa.iframeAppendedTime||0;},v=function(aa){var ba=d+\"/audiencenetwork/xhr/?sdk=5.5.web\";for(var ca in aa)if(typeof aa[ca]!==\"function\")ba+=\"&\"+ca+\"=\"+encodeURIComponent(aa[ca]);var da=new XMLHttpRequest();da.open(\"GET\",ba,true);da.withCredentials=true;da.onreadystatechange=function(){if(da.readyState===4){var ea=t(da.response);aa.events.push({name:\"xhrLoaded\",source:aa.iframe.contentWindow,data:ea,postMessageTimestamp:h(),receivedTimestamp:h()});}};da.send();},w=function(aa,ba){var ca=d+\"/audiencenetwork/xhriframe/?sdk=5.5.web\";for(var da in ba)if(typeof ba[da]!==\"function\")ca+=\"&\"+da+\"=\"+encodeURIComponent(ba[da]);var ea=b.createElement(\"iframe\");ea.src=ca;ea.style.display=\"none\";b.body.appendChild(ea);ba.iframe=ea;ba.iframeData={};ba.tagJsIframeAppendedTime=h();},x=function(aa){var ba=function(event){try{var da=event.data;if(da.name in f)aa.events.push({name:da.name,source:event.source,data:da.data});}catch(ea){}},ca=aa.iframe.contentWindow.parent;ca.addEventListener(\"message\",ba,false);},y=function(aa){if(aa.context&&aa.context.sourceUrl)return true;try{return !!JSON.parse(decodeURI(aa.name)).ampcontextVersion;}catch(ba){return false;}},z=function(aa){var ba=h(),ca=l()[0],da=j().parentElement,ea=ca!=a.top,fa=ca.$sf&&ca.$sf.ext,ga=o(ca),ha=m();p(ha);var ia={amp:y(ca),events:[],tagJsInitTime:ba,rootElement:da,iframe:null,tagJsIframeAppendedTime:ha.iframeAppendedTime||0,url:ga,domain:s(),channel:n(o(ca)),width:screen.width,height:screen.height,pixelratio:a.devicePixelRatio,placementindex:ha.ads.length,crossdomain:ea,safeframe:!!fa,placementid:g.placementid,format:g.format||\"300x250\",testmode:!!g.testmode,onAdLoaded:g.onAdLoaded,onAdError:g.onAdError};if(g.bidid)ia.bidid=g.bidid;if(ea){w(ha,ia);}else{u(ha,ia,ca.document);v(ia);}x(ia);ia.rootElement.dataset.placementid=ia.placementid;ha.ads.push(ia);};try{z();}catch(aa){i(aa.message||aa);throw aa;}})(window,document,location);\n  </script>\n</div>\n<!-- Facebook banner -->\n\n<!--facebook social share-->\n<script>\n  window.fbAsyncInit = function() {\n    FB.init({\n      appId      : '366707543723815',\n      xfbml      : true,\n      version    : 'v2.9'\n    });\n    FB.AppEvents.logPageView();\n  };\n  (function(d, s, id){\n     var js, fjs = d.getElementsByTagName(s)[0];\n     if (d.getElementById(id)) {return;}\n     js = d.createElement(s); js.id = id;\n     js.src = \"//connect.facebook.net/zh_Hans/sdk.js\";\n     fjs.parentNode.insertBefore(js, fjs);\n   }(document, 'script', 'facebook-jssdk'));\n</script>\n<!--facebook social share-->\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司启动主站重构。</p>\n<p>主站是一个有着7年历史之久的大型单体应用，总代码量超过100万行。其中有一个模块是用于配置类目、地区、meta等信息的，叫牧野系统。由于业务复杂、hardcode极多，这个以可配置为荣的牧野系统，已经变得几乎完全不可用。而我所在的team，即负责牧野系统的重构。</p>\n<p>根据初步分析与设计，新的牧野系统分为三大子系统：</p>\n<ol>\n<li>字典服务，负责类目、地区、车型等库数据的管理</li>\n<li>schema服务，负责meta数据的管理</li>\n<li>牧野前台，供内部人员使用</li>\n</ol>\n<p>其中字典服务基本由我主导完成，尤其感谢某位测试同事的严谨把关，字典服务基本达到了功能完整可用、行为符合预期，尽管性能并非足够优秀，但也达到了上线标准。</p>\n<p>下面介绍一下公司内部字典服务的情况。牧野系统自18年12月份启动重构，一周内完成字典服务设计，字典服务在两周后完成设计文档的开发，并提交测试，测试周期耗时一周，基本完成功能测试，性能方面差距较大。此后一个月，字典服务一方面配合调用方、业务方等持续迭代功能打磨细节，一方面进行了第一轮性能优化——开发了批量查询接口。截至19年2月份，由于一些原因尚未放开流量，字典服务的平均QPS在300左右，最高600，没有达到设计预期的最高峰10000的QPS。</p>\n<p>由于公司内部语言体系是php+java的，字典服务也是基于spring（所用框架是内部自研的基于spring的spring-time）进行开发的。开发字典服务前，我本身的java开发经验只有不到三个月，在开发中我感觉字典服务有许多非常典型的case，可以说是入门java后端spring的教科书般的项目。由于我个人对Golang更感兴趣，因此也借此机会在尝试用go开发一个完全兼容Java版字典服务的golang版本的字典服务。</p>\n<p>以上即是本文背景。</p>\n<h2 id=\"设计要求\"><a href=\"#设计要求\" class=\"headerlink\" title=\"设计要求\"></a>设计要求</h2><ul>\n<li>接口层完全兼容原Java版的字典服务</li>\n</ul>\n<h2 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h2><p>由于要做接口层兼容，下面先介绍一些原java版的接口层长什么样。</p>\n<p>完整的<a href=\"https://github.com/Danceiny/baixing-helper/blob/master/docs/%E5%AD%97%E5%85%B8%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3.md\" target=\"_blank\" rel=\"noopener\">字典服务文档</a>。提炼几个关键点如下：</p>\n<ol>\n<li>数据库采用mysql，主要字段有<ul>\n<li>bid，业务id，可能为int/string</li>\n<li>name，节点名称</li>\n<li>pid，父节点id</li>\n</ul>\n</li>\n<li>缓存主要有三个：<ul>\n<li>节点的对象缓存，也就是mysql的一行映射出来的一个对象。更加细分来说，对象缓存分两种（即有两份缓存），一种是完整的对象，一种是去除了部分属性的“裁剪精简版”对象。</li>\n<li>pids，节点的父系节点链条的id数组</li>\n<li>cids，节点的子节点的id数组</li>\n</ul>\n</li>\n<li>单个查询接口主要支持三个参数<ul>\n<li>bid，如前文所述</li>\n<li>parentDepth，向父级查询的深度</li>\n<li>childrenDepth，向子级查询的深度</li>\n</ul>\n</li>\n<li>批量查询接口主要支持以下参数<ul>\n<li>onlyId 是否将父子节点的bid加载成对象</li>\n<li>hasChildren 是否查询子节点</li>\n<li>parentDepth 如前文所述</li>\n<li>area 需要查询的area的bid数组，类似的还有category等</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"\n<!-- Facebook banner -->\n<div style=\"display:none; position: relative;\">\n  <script type=\"text/javascript\">\n    var data = {\n      placementid: '366707543723815_366739427053960',\n      format: '300x250',\n      testmode: false,\n      onAdLoaded: function(element) {\n        console.log('Audience Network [366707543723815_366739427053960] ad loaded');\n        element.style.display = 'block';\n      },\n      onAdError: function(errorCode, errorMessage) {\n        console.log('Audience Network [366707543723815_366739427053960] error (' + errorCode + ') ' + errorMessage);\n        // PASSBACK goes here\n      }\n    };\n  </script>\n  <script>\n    (function(a,b,c){var d=\"https://www.facebook.com\",e=\"https://connect.facebook.net/en_US/fbadnw55.js\",f={iframeLoaded:true,xhrLoaded:true},g=a.data,h=function(){if(Date.now){return Date.now();}else return +new Date();},i=function(aa){var ba=d+\"/audience_network/client_event\",ca={cb:h(),event_name:\"ADNW_ADERROR\",ad_pivot_type:\"audience_network_mobile_web\",sdk_version:\"5.5.web\",app_id:g.placementid.split(\"_\")[0],publisher_id:g.placementid.split(\"_\")[1],error_message:aa},da=[];for(var ea in ca)da.push(encodeURIComponent(ea)+\"=\"+encodeURIComponent(ca[ea]));var fa=ba+\"?\"+da.join(\"&\"),ga=new XMLHttpRequest();ga.open(\"GET\",fa,true);ga.send();if(g.onAdError)g.onAdError(\"1000\",\"Internal error.\");},j=function(){if(b.currentScript){return b.currentScript;}else{var aa=b.getElementsByTagName(\"script\");return aa[aa.length-1];}},k=function(aa){try{return aa.document.referrer;}catch(ba){}return \"\";},l=function(){var aa=a,ba=[aa];try{while(aa!==aa.parent&&aa.parent.document)ba.push(aa=aa.parent);}catch(ca){}return ba.reverse();},m=function(){var aa=l();for(var ba=0;ba<aa.length;ba++){var ca=aa[ba],da=ca.ADNW||{};ca.ADNW=da;if(!ca.ADNW)continue;return da.v55=da.v55||{ads:[],window:ca};}throw new Error(\"no_writable_global\");},n=function(aa){var ba=aa.indexOf(\"/\",aa.indexOf(\"://\")+3);if(ba===-1)return aa;return aa.substring(0,ba);},o=function(aa){return aa.location.href||k(aa);},p=function(aa){if(aa.sdkLoaded)return;var ba=aa.window.document,ca=ba.createElement(\"iframe\");ca.name=\"fbadnw\";ca.style.display=\"none\";ba.body.appendChild(ca);var da=ca.contentDocument.createElement(\"script\");da.src=e;da.async=true;ca.contentDocument.body.appendChild(da);aa.sdkLoaded=true;},q=function(aa){var ba=/^https?:\\/\\/www\\.google(\\.com?)?.\\w{2,3}$/;return !!aa.match(ba);},r=function(aa){return !!aa.match(/cdn\\.ampproject\\.org$/);},s=function(){var aa=c.ancestorOrigins||[],ba=aa[aa.length-1]||c.origin,ca=aa[aa.length-2]||c.origin;if(q(ba)&&r(ca)){return n(ca);}else return n(ba);},t=function(aa){try{return JSON.parse(aa);}catch(ba){i(ba.message);throw ba;}},u=function(aa,ba,ca){if(!aa.iframe){var da=ca.createElement(\"iframe\");da.src=d+\"/audiencenetwork/iframe/\";da.style.display=\"none\";ca.body.appendChild(da);aa.iframe=da;aa.iframeAppendedTime=h();aa.iframeData={};}ba.iframe=aa.iframe;ba.iframeData=aa.iframeData;ba.tagJsIframeAppendedTime=aa.iframeAppendedTime||0;},v=function(aa){var ba=d+\"/audiencenetwork/xhr/?sdk=5.5.web\";for(var ca in aa)if(typeof aa[ca]!==\"function\")ba+=\"&\"+ca+\"=\"+encodeURIComponent(aa[ca]);var da=new XMLHttpRequest();da.open(\"GET\",ba,true);da.withCredentials=true;da.onreadystatechange=function(){if(da.readyState===4){var ea=t(da.response);aa.events.push({name:\"xhrLoaded\",source:aa.iframe.contentWindow,data:ea,postMessageTimestamp:h(),receivedTimestamp:h()});}};da.send();},w=function(aa,ba){var ca=d+\"/audiencenetwork/xhriframe/?sdk=5.5.web\";for(var da in ba)if(typeof ba[da]!==\"function\")ca+=\"&\"+da+\"=\"+encodeURIComponent(ba[da]);var ea=b.createElement(\"iframe\");ea.src=ca;ea.style.display=\"none\";b.body.appendChild(ea);ba.iframe=ea;ba.iframeData={};ba.tagJsIframeAppendedTime=h();},x=function(aa){var ba=function(event){try{var da=event.data;if(da.name in f)aa.events.push({name:da.name,source:event.source,data:da.data});}catch(ea){}},ca=aa.iframe.contentWindow.parent;ca.addEventListener(\"message\",ba,false);},y=function(aa){if(aa.context&&aa.context.sourceUrl)return true;try{return !!JSON.parse(decodeURI(aa.name)).ampcontextVersion;}catch(ba){return false;}},z=function(aa){var ba=h(),ca=l()[0],da=j().parentElement,ea=ca!=a.top,fa=ca.$sf&&ca.$sf.ext,ga=o(ca),ha=m();p(ha);var ia={amp:y(ca),events:[],tagJsInitTime:ba,rootElement:da,iframe:null,tagJsIframeAppendedTime:ha.iframeAppendedTime||0,url:ga,domain:s(),channel:n(o(ca)),width:screen.width,height:screen.height,pixelratio:a.devicePixelRatio,placementindex:ha.ads.length,crossdomain:ea,safeframe:!!fa,placementid:g.placementid,format:g.format||\"300x250\",testmode:!!g.testmode,onAdLoaded:g.onAdLoaded,onAdError:g.onAdError};if(g.bidid)ia.bidid=g.bidid;if(ea){w(ha,ia);}else{u(ha,ia,ca.document);v(ia);}x(ia);ia.rootElement.dataset.placementid=ia.placementid;ha.ads.push(ia);};try{z();}catch(aa){i(aa.message||aa);throw aa;}})(window,document,location);\n  </script>\n</div>\n<!-- Facebook banner -->\n\n<!--facebook social share-->\n<script>\n  window.fbAsyncInit = function() {\n    FB.init({\n      appId      : '366707543723815',\n      xfbml      : true,\n      version    : 'v2.9'\n    });\n    FB.AppEvents.logPageView();\n  };\n  (function(d, s, id){\n     var js, fjs = d.getElementsByTagName(s)[0];\n     if (d.getElementById(id)) {return;}\n     js = d.createElement(s); js.id = id;\n     js.src = \"//connect.facebook.net/zh_Hans/sdk.js\";\n     fjs.parentNode.insertBefore(js, fjs);\n   }(document, 'script', 'facebook-jssdk'));\n</script>\n<!--facebook social share-->\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司启动主站重构。</p>\n<p>主站是一个有着7年历史之久的大型单体应用，总代码量超过100万行。其中有一个模块是用于配置类目、地区、meta等信息的，叫牧野系统。由于业务复杂、hardcode极多，这个以可配置为荣的牧野系统，已经变得几乎完全不可用。而我所在的team，即负责牧野系统的重构。</p>\n<p>根据初步分析与设计，新的牧野系统分为三大子系统：</p>\n<ol>\n<li>字典服务，负责类目、地区、车型等库数据的管理</li>\n<li>schema服务，负责meta数据的管理</li>\n<li>牧野前台，供内部人员使用</li>\n</ol>\n<p>其中字典服务基本由我主导完成，尤其感谢某位测试同事的严谨把关，字典服务基本达到了功能完整可用、行为符合预期，尽管性能并非足够优秀，但也达到了上线标准。</p>\n<p>下面介绍一下公司内部字典服务的情况。牧野系统自18年12月份启动重构，一周内完成字典服务设计，字典服务在两周后完成设计文档的开发，并提交测试，测试周期耗时一周，基本完成功能测试，性能方面差距较大。此后一个月，字典服务一方面配合调用方、业务方等持续迭代功能打磨细节，一方面进行了第一轮性能优化——开发了批量查询接口。截至19年2月份，由于一些原因尚未放开流量，字典服务的平均QPS在300左右，最高600，没有达到设计预期的最高峰10000的QPS。</p>\n<p>由于公司内部语言体系是php+java的，字典服务也是基于spring（所用框架是内部自研的基于spring的spring-time）进行开发的。开发字典服务前，我本身的java开发经验只有不到三个月，在开发中我感觉字典服务有许多非常典型的case，可以说是入门java后端spring的教科书般的项目。由于我个人对Golang更感兴趣，因此也借此机会在尝试用go开发一个完全兼容Java版字典服务的golang版本的字典服务。</p>\n<p>以上即是本文背景。</p>\n<h2 id=\"设计要求\"><a href=\"#设计要求\" class=\"headerlink\" title=\"设计要求\"></a>设计要求</h2><ul>\n<li>接口层完全兼容原Java版的字典服务</li>\n</ul>\n<h2 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h2><p>由于要做接口层兼容，下面先介绍一些原java版的接口层长什么样。</p>\n<p>完整的<a href=\"https://github.com/Danceiny/baixing-helper/blob/master/docs/%E5%AD%97%E5%85%B8%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3.md\" target=\"_blank\" rel=\"noopener\">字典服务文档</a>。提炼几个关键点如下：</p>\n<ol>\n<li>数据库采用mysql，主要字段有<ul>\n<li>bid，业务id，可能为int/string</li>\n<li>name，节点名称</li>\n<li>pid，父节点id</li>\n</ul>\n</li>\n<li>缓存主要有三个：<ul>\n<li>节点的对象缓存，也就是mysql的一行映射出来的一个对象。更加细分来说，对象缓存分两种（即有两份缓存），一种是完整的对象，一种是去除了部分属性的“裁剪精简版”对象。</li>\n<li>pids，节点的父系节点链条的id数组</li>\n<li>cids，节点的子节点的id数组</li>\n</ul>\n</li>\n<li>单个查询接口主要支持三个参数<ul>\n<li>bid，如前文所述</li>\n<li>parentDepth，向父级查询的深度</li>\n<li>childrenDepth，向子级查询的深度</li>\n</ul>\n</li>\n<li>批量查询接口主要支持以下参数<ul>\n<li>onlyId 是否将父子节点的bid加载成对象</li>\n<li>hasChildren 是否查询子节点</li>\n<li>parentDepth 如前文所述</li>\n<li>area 需要查询的area的bid数组，类似的还有category等</li>\n</ul>\n</li>\n</ol>\n"},{"date":"2017-10-15T17:41:16.000Z","status":"public","title":"中国移动研究院老掌门效力华科大，Dian团队步入新主帅黄晓庆时代","keywords":["简报","Dian","黄晓庆","科技","人工智能"],"_content":"\n编者按：黄晓庆，Dian团队导师，达闼科技创始人兼CEO，前中国移动研究院院长，“千人计划”国家特聘专家。1982年毕业于华中科技大学电信系。2017年8月，就任华中科技大学电子信息与通信学院院长。\n \n“人类最重要的使命，就是摆脱太阳系的束缚。”作为星际迷航的铁杆粉丝，黄晓庆几乎每次演讲，都会观宇宙浩荡而天马行空，论科技浪潮而挥斥方遒。这一次也无例外——2017年10月15日晚，已经担任Dian团队7年兼职导师的著名通信和人工智能专家黄晓庆（Bill Huang），以团队新领军的身份，出现在全体队员面前作主旨演讲，到场聆听的还有“点石创校”学员。\n此次主旨演讲由已退休交棒的Dian团队创始人刘玉老师主持。刘老师回忆，黄晓庆与Dian团队的缘分，要追溯到2010年启明学院落成之时。彼时，喜择交良友的刘玉老师邀请黄晓庆担任Dian团队导师，此后黄晓庆作为兼职导师，给Dian团队带来了诸多资源。刘老师强调，“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”，Dian团队的28位顾问，给行路中的Dian团队指明了“绿洲”的方向——创新创业。随后刘玉老师正式宣布，Dian团队导师黄晓庆成为新主帅，邀请其作主旨演讲。全场掌声雷动，经久不息。\n \n这是一个新的时代。所有人都在瞩目着。\n“科学把我们带到了一个特别重要的历史局面，这就是第四次工业革命，也许是我们人类前所未见的科学的爆发点，就在未来五十年左右。那这个点是什么？我们叫做“奇点”。我们从事信息科学的可能最美妙的一个梦想就是，我们人类有可能在未来三十年到五十年有可能做出在智能水平上达到甚至超过人类的机器。” 黄晓庆对于人工智能引发第四次工业革命的信心，令人印象深刻——而这显然来自于他对科技创新的深刻洞见与卓越的工程实践能力。“创新就是 Unseat the establishment”，“要有一种挑战传统，挑战权威者，挑战主流的勇气”，在美国这叫 \"Cowboy Spirit\"，也是我们时代最需要的精神。勇气是为其一，其二是要有“能够挑战传统、权威的能力和水平”。而能力，来自于学习，来自于努力。黄晓庆以亲身经历说法，“不懂英语没法搞国际化”，“管理是科学，是人文的物理学。越是被管理的人，越需要知道你是怎么被管理的”，“现在懂TensorFlow，相当于30年前懂Unix和C语言”。谈及Dian团队未来的发展方向，七年前黄晓庆指向了“拥抱移动互联网”，而现在，业已身为达闼科技创始人兼CEO的黄晓庆，则毫不犹豫地选定了人工智能。\n从图灵到DeepMind，从飞机到神经网络，从生物细胞到计算机网络，黄晓庆化身“科技史学家”、“生物学家”、“计算机科学家”，带领所有听众遨游了人工智能的过去、现在与将来。而无线电通信专业出身的黄晓庆，亦颇有洞见地指出：5G技术将推动人工智能与机器人的发展，云端机器人网络流量将是人类的100倍左右。\n \n1982年，作为“全武汉第一个留美的自费留学生”，黄晓庆只身一人去了美国。1982年6月，黄晓庆成了美国伊利诺斯州立大学研究生院第一个中国大陆来的学生。1997年，黄晓庆在UT斯达康内部创业，想做全世界最伟大的软交换的移动交换机——用IP技术做交换，颠覆贝尔实验室在60、70年代发明的电路交换技术。2007年，黄晓庆被中国移动请回国，担任中国移动研究院院长。2011年，黄晓庆在斯坦福遇到一位教授生物工程系教授，带着某种“上帝视角”的宏观感的架构师出身的他，“顿悟”到云端机器人大脑的可行性——因为网络的延迟，已经逐渐降到了人类感知不到的程度。2015年，达闼科技成立。“既然要做云端机器人，英文就叫Cloudminds。中文“达闼”音译自“Data”。除了‘数据’，它还是《星际迷航》里一个机器人的名字。‘闼’，最开始我也不认识，跑去查字典，发现是‘推门而入’的意思。这个寓意太好了，马到成功。”\n \n做达闼之前，黄晓庆许了一个宏愿。他要做的事，和所有人工智能从业者都不是竞争关系。他心中的局，更像一个行业托举者，瞄准的是未来人机世界的大规则。\n \n达达马蹄，郑愁予听到的是江南烟雨过客，而黄晓庆听到的是服务机器人的脚步声。“水渺茫而法白，山排闼以争前”，而黄晓庆眼中的达闼科技，显然不止于争前，而是要在他人觉前方渺茫不知所向时，引领一时风骚——做云端智能的基础架构。这般使命感，来自于他的相信。\n“作为人类必须承认：宇宙法则有可能是被设计的。你瞧，一个粒子里面的结构，和一个星系的结构，基本是一样的，多神奇。造物者早把这个东西给搞明白了，他告诉我们世界就是这个样子，你得‘信’。”\n当然，如果只是相信，黄晓庆或许也只能”用美丽的雪花”，“在凄凉的大地”，“用孩子的笔体”去写下“相信未来”，而不能以一名工程师的身份，用代码造就一个真实的未来。\n“哲学家认为自己就是上帝，没有必要去讨论别的事；数学家们想反抗上帝；物理学家想学习上帝；生物学家从某种意义上讲想造上帝的反，要摆脱伊甸园……工程师说都不用，我们再造一个。”\n正是基于类似的理念，15年前，“旨在通过真实项目实践培养学生的创新能力、实践精神和综合素质”的Dian团队才会诞生在喻家山下——因为相信真实项目实践能够培养人，因为真真正正地主动实践着。而2010年与Dian团队结缘的黄晓庆，兴奋，激动，因为“有组织的优秀学生联合在一起创新是一种很了不起的现象”。\n \n2016年9月，刘玉老师带领Dian团队队员前往深圳参加点石论坛，黄晓庆作为Dian团队导师上台演讲，谈宇宙之恢弘，论云端之架构，台下新老队员听得入神，深受启发。论坛上刘玉老师笑称曾邀请黄晓庆担任我校电信学院院长。不承想一语中的。今年八月底，黄晓庆即将就任电信学院院长的消息似平地惊雷，振奋人心。在非正式的就职演说中，黄晓庆提到，“我们要把华科大变成中国的斯坦福”。这一愿景，与刘玉老师的想法不谋而合。\n而这一愿景，也仰仗于所有Dian团队队员团结协作，夺命狂奔，以不负“有组织的优秀学生联合在一起创新”。\n战略战术上，黄晓庆提了三点想法。一是成立人工智能交叉科学研究中心（The Cross Science Research Center Of Artificial Intelligence）。黄晓庆强调，“要尽快成立，抢占先机”。二是教育改革。黄晓庆列举了诸如清华施一公、姚期智等几个“标杆”式教改做法，以供考察借鉴。三是拥抱互联网。要借助互联网的力量，邀请世界级的大师网上授课。\n此次主旨演讲，Dian团队现任队长严子怡在问答环节中第一个向黄晓庆发问：在工程应用领域有着多年积淀的Dian团队，在人工智能时代下如何寻求新的发展之路？黄晓庆表示，如果对深度学习很了解，可以解决很多很重要的问题。他可以为团队提供平台、传感器，甚至机器人。刘玉老师则勉励队员们，应加强自身学习，以应对机会与挑战。\n \n诸葛孔明曾作《出师表》，言“然侍卫之臣不懈于内，忠志之士忘身于外者”。拳拳赤子心，莫如黄晓庆——黄晓庆在接受媒体采访时曾说过：“我2006年决定回国加入中国移动，我很多好朋友说你疯了，凭我对你的了解，你在体制内绝对混不过6个月，要不你被炒鱿鱼，要不你受不了走了，他说你是个自由主义者，独立思考者，又不会拍马屁。可在任何时候，我相信一点：诚心会感动人。我在中国移动，很多人就很包容我，他们说这小子不是瞎忽悠的，他放弃了国外的高薪回来了，每天干这个事儿，每天干到11点，他不是在那里花天酒地，他不是在瞎胡闹。”\n现如今，黄晓庆以”分身之术“回到母校，“希望在我领导的电信学院之下，所有同仁由我带头，成为我们华中科技大学深化教育改革的急先锋”，此番气魄，尤若要在迷航中向最亮处摸索，在星际中留下浓墨重彩的一道轨迹。此等胸怀，“中国梦”与“奇点梦”交相辉映，是为民族长河中又一波浪潮中的一朵热烈的浪花。而这浪花，由汗水结成——仅此次十月中旬来校，黄晓庆每日刺促不休，会领导见教授，寻经验谈发展。“实干兴邦”，盒饭也香——为了能在有限的时间内更快地进入院长的工作状态，黄晓庆干脆在工作之中就地吃盒饭，十足的创业者姿态！\n\n“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”。\n而这位创业者新主帅，又将带领深耕创新创业的Dian团队，步入怎样的时代？我们期待着。\n","source":"_posts/黄晓庆.md","raw":"---\ndate: 2017-10-16 01:41:16\nstatus: public\ntitle: 中国移动研究院老掌门效力华科大，Dian团队步入新主帅黄晓庆时代\nkeywords: \n- 简报\n- Dian\n- 黄晓庆\n- 科技\n- 人工智能\ntags: \n\ncategories: 杂文\n---\n\n编者按：黄晓庆，Dian团队导师，达闼科技创始人兼CEO，前中国移动研究院院长，“千人计划”国家特聘专家。1982年毕业于华中科技大学电信系。2017年8月，就任华中科技大学电子信息与通信学院院长。\n \n“人类最重要的使命，就是摆脱太阳系的束缚。”作为星际迷航的铁杆粉丝，黄晓庆几乎每次演讲，都会观宇宙浩荡而天马行空，论科技浪潮而挥斥方遒。这一次也无例外——2017年10月15日晚，已经担任Dian团队7年兼职导师的著名通信和人工智能专家黄晓庆（Bill Huang），以团队新领军的身份，出现在全体队员面前作主旨演讲，到场聆听的还有“点石创校”学员。\n此次主旨演讲由已退休交棒的Dian团队创始人刘玉老师主持。刘老师回忆，黄晓庆与Dian团队的缘分，要追溯到2010年启明学院落成之时。彼时，喜择交良友的刘玉老师邀请黄晓庆担任Dian团队导师，此后黄晓庆作为兼职导师，给Dian团队带来了诸多资源。刘老师强调，“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”，Dian团队的28位顾问，给行路中的Dian团队指明了“绿洲”的方向——创新创业。随后刘玉老师正式宣布，Dian团队导师黄晓庆成为新主帅，邀请其作主旨演讲。全场掌声雷动，经久不息。\n \n这是一个新的时代。所有人都在瞩目着。\n“科学把我们带到了一个特别重要的历史局面，这就是第四次工业革命，也许是我们人类前所未见的科学的爆发点，就在未来五十年左右。那这个点是什么？我们叫做“奇点”。我们从事信息科学的可能最美妙的一个梦想就是，我们人类有可能在未来三十年到五十年有可能做出在智能水平上达到甚至超过人类的机器。” 黄晓庆对于人工智能引发第四次工业革命的信心，令人印象深刻——而这显然来自于他对科技创新的深刻洞见与卓越的工程实践能力。“创新就是 Unseat the establishment”，“要有一种挑战传统，挑战权威者，挑战主流的勇气”，在美国这叫 \"Cowboy Spirit\"，也是我们时代最需要的精神。勇气是为其一，其二是要有“能够挑战传统、权威的能力和水平”。而能力，来自于学习，来自于努力。黄晓庆以亲身经历说法，“不懂英语没法搞国际化”，“管理是科学，是人文的物理学。越是被管理的人，越需要知道你是怎么被管理的”，“现在懂TensorFlow，相当于30年前懂Unix和C语言”。谈及Dian团队未来的发展方向，七年前黄晓庆指向了“拥抱移动互联网”，而现在，业已身为达闼科技创始人兼CEO的黄晓庆，则毫不犹豫地选定了人工智能。\n从图灵到DeepMind，从飞机到神经网络，从生物细胞到计算机网络，黄晓庆化身“科技史学家”、“生物学家”、“计算机科学家”，带领所有听众遨游了人工智能的过去、现在与将来。而无线电通信专业出身的黄晓庆，亦颇有洞见地指出：5G技术将推动人工智能与机器人的发展，云端机器人网络流量将是人类的100倍左右。\n \n1982年，作为“全武汉第一个留美的自费留学生”，黄晓庆只身一人去了美国。1982年6月，黄晓庆成了美国伊利诺斯州立大学研究生院第一个中国大陆来的学生。1997年，黄晓庆在UT斯达康内部创业，想做全世界最伟大的软交换的移动交换机——用IP技术做交换，颠覆贝尔实验室在60、70年代发明的电路交换技术。2007年，黄晓庆被中国移动请回国，担任中国移动研究院院长。2011年，黄晓庆在斯坦福遇到一位教授生物工程系教授，带着某种“上帝视角”的宏观感的架构师出身的他，“顿悟”到云端机器人大脑的可行性——因为网络的延迟，已经逐渐降到了人类感知不到的程度。2015年，达闼科技成立。“既然要做云端机器人，英文就叫Cloudminds。中文“达闼”音译自“Data”。除了‘数据’，它还是《星际迷航》里一个机器人的名字。‘闼’，最开始我也不认识，跑去查字典，发现是‘推门而入’的意思。这个寓意太好了，马到成功。”\n \n做达闼之前，黄晓庆许了一个宏愿。他要做的事，和所有人工智能从业者都不是竞争关系。他心中的局，更像一个行业托举者，瞄准的是未来人机世界的大规则。\n \n达达马蹄，郑愁予听到的是江南烟雨过客，而黄晓庆听到的是服务机器人的脚步声。“水渺茫而法白，山排闼以争前”，而黄晓庆眼中的达闼科技，显然不止于争前，而是要在他人觉前方渺茫不知所向时，引领一时风骚——做云端智能的基础架构。这般使命感，来自于他的相信。\n“作为人类必须承认：宇宙法则有可能是被设计的。你瞧，一个粒子里面的结构，和一个星系的结构，基本是一样的，多神奇。造物者早把这个东西给搞明白了，他告诉我们世界就是这个样子，你得‘信’。”\n当然，如果只是相信，黄晓庆或许也只能”用美丽的雪花”，“在凄凉的大地”，“用孩子的笔体”去写下“相信未来”，而不能以一名工程师的身份，用代码造就一个真实的未来。\n“哲学家认为自己就是上帝，没有必要去讨论别的事；数学家们想反抗上帝；物理学家想学习上帝；生物学家从某种意义上讲想造上帝的反，要摆脱伊甸园……工程师说都不用，我们再造一个。”\n正是基于类似的理念，15年前，“旨在通过真实项目实践培养学生的创新能力、实践精神和综合素质”的Dian团队才会诞生在喻家山下——因为相信真实项目实践能够培养人，因为真真正正地主动实践着。而2010年与Dian团队结缘的黄晓庆，兴奋，激动，因为“有组织的优秀学生联合在一起创新是一种很了不起的现象”。\n \n2016年9月，刘玉老师带领Dian团队队员前往深圳参加点石论坛，黄晓庆作为Dian团队导师上台演讲，谈宇宙之恢弘，论云端之架构，台下新老队员听得入神，深受启发。论坛上刘玉老师笑称曾邀请黄晓庆担任我校电信学院院长。不承想一语中的。今年八月底，黄晓庆即将就任电信学院院长的消息似平地惊雷，振奋人心。在非正式的就职演说中，黄晓庆提到，“我们要把华科大变成中国的斯坦福”。这一愿景，与刘玉老师的想法不谋而合。\n而这一愿景，也仰仗于所有Dian团队队员团结协作，夺命狂奔，以不负“有组织的优秀学生联合在一起创新”。\n战略战术上，黄晓庆提了三点想法。一是成立人工智能交叉科学研究中心（The Cross Science Research Center Of Artificial Intelligence）。黄晓庆强调，“要尽快成立，抢占先机”。二是教育改革。黄晓庆列举了诸如清华施一公、姚期智等几个“标杆”式教改做法，以供考察借鉴。三是拥抱互联网。要借助互联网的力量，邀请世界级的大师网上授课。\n此次主旨演讲，Dian团队现任队长严子怡在问答环节中第一个向黄晓庆发问：在工程应用领域有着多年积淀的Dian团队，在人工智能时代下如何寻求新的发展之路？黄晓庆表示，如果对深度学习很了解，可以解决很多很重要的问题。他可以为团队提供平台、传感器，甚至机器人。刘玉老师则勉励队员们，应加强自身学习，以应对机会与挑战。\n \n诸葛孔明曾作《出师表》，言“然侍卫之臣不懈于内，忠志之士忘身于外者”。拳拳赤子心，莫如黄晓庆——黄晓庆在接受媒体采访时曾说过：“我2006年决定回国加入中国移动，我很多好朋友说你疯了，凭我对你的了解，你在体制内绝对混不过6个月，要不你被炒鱿鱼，要不你受不了走了，他说你是个自由主义者，独立思考者，又不会拍马屁。可在任何时候，我相信一点：诚心会感动人。我在中国移动，很多人就很包容我，他们说这小子不是瞎忽悠的，他放弃了国外的高薪回来了，每天干这个事儿，每天干到11点，他不是在那里花天酒地，他不是在瞎胡闹。”\n现如今，黄晓庆以”分身之术“回到母校，“希望在我领导的电信学院之下，所有同仁由我带头，成为我们华中科技大学深化教育改革的急先锋”，此番气魄，尤若要在迷航中向最亮处摸索，在星际中留下浓墨重彩的一道轨迹。此等胸怀，“中国梦”与“奇点梦”交相辉映，是为民族长河中又一波浪潮中的一朵热烈的浪花。而这浪花，由汗水结成——仅此次十月中旬来校，黄晓庆每日刺促不休，会领导见教授，寻经验谈发展。“实干兴邦”，盒饭也香——为了能在有限的时间内更快地进入院长的工作状态，黄晓庆干脆在工作之中就地吃盒饭，十足的创业者姿态！\n\n“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”。\n而这位创业者新主帅，又将带领深耕创新创业的Dian团队，步入怎样的时代？我们期待着。\n","slug":"黄晓庆","published":1,"updated":"2019-02-27T13:22:35.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8c20031c4xkel6pdui4","content":"<p>编者按：黄晓庆，Dian团队导师，达闼科技创始人兼CEO，前中国移动研究院院长，“千人计划”国家特聘专家。1982年毕业于华中科技大学电信系。2017年8月，就任华中科技大学电子信息与通信学院院长。</p>\n<p>“人类最重要的使命，就是摆脱太阳系的束缚。”作为星际迷航的铁杆粉丝，黄晓庆几乎每次演讲，都会观宇宙浩荡而天马行空，论科技浪潮而挥斥方遒。这一次也无例外——2017年10月15日晚，已经担任Dian团队7年兼职导师的著名通信和人工智能专家黄晓庆（Bill Huang），以团队新领军的身份，出现在全体队员面前作主旨演讲，到场聆听的还有“点石创校”学员。<br>此次主旨演讲由已退休交棒的Dian团队创始人刘玉老师主持。刘老师回忆，黄晓庆与Dian团队的缘分，要追溯到2010年启明学院落成之时。彼时，喜择交良友的刘玉老师邀请黄晓庆担任Dian团队导师，此后黄晓庆作为兼职导师，给Dian团队带来了诸多资源。刘老师强调，“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”，Dian团队的28位顾问，给行路中的Dian团队指明了“绿洲”的方向——创新创业。随后刘玉老师正式宣布，Dian团队导师黄晓庆成为新主帅，邀请其作主旨演讲。全场掌声雷动，经久不息。</p>\n<p>这是一个新的时代。所有人都在瞩目着。<br>“科学把我们带到了一个特别重要的历史局面，这就是第四次工业革命，也许是我们人类前所未见的科学的爆发点，就在未来五十年左右。那这个点是什么？我们叫做“奇点”。我们从事信息科学的可能最美妙的一个梦想就是，我们人类有可能在未来三十年到五十年有可能做出在智能水平上达到甚至超过人类的机器。” 黄晓庆对于人工智能引发第四次工业革命的信心，令人印象深刻——而这显然来自于他对科技创新的深刻洞见与卓越的工程实践能力。“创新就是 Unseat the establishment”，“要有一种挑战传统，挑战权威者，挑战主流的勇气”，在美国这叫 “Cowboy Spirit”，也是我们时代最需要的精神。勇气是为其一，其二是要有“能够挑战传统、权威的能力和水平”。而能力，来自于学习，来自于努力。黄晓庆以亲身经历说法，“不懂英语没法搞国际化”，“管理是科学，是人文的物理学。越是被管理的人，越需要知道你是怎么被管理的”，“现在懂TensorFlow，相当于30年前懂Unix和C语言”。谈及Dian团队未来的发展方向，七年前黄晓庆指向了“拥抱移动互联网”，而现在，业已身为达闼科技创始人兼CEO的黄晓庆，则毫不犹豫地选定了人工智能。<br>从图灵到DeepMind，从飞机到神经网络，从生物细胞到计算机网络，黄晓庆化身“科技史学家”、“生物学家”、“计算机科学家”，带领所有听众遨游了人工智能的过去、现在与将来。而无线电通信专业出身的黄晓庆，亦颇有洞见地指出：5G技术将推动人工智能与机器人的发展，云端机器人网络流量将是人类的100倍左右。</p>\n<p>1982年，作为“全武汉第一个留美的自费留学生”，黄晓庆只身一人去了美国。1982年6月，黄晓庆成了美国伊利诺斯州立大学研究生院第一个中国大陆来的学生。1997年，黄晓庆在UT斯达康内部创业，想做全世界最伟大的软交换的移动交换机——用IP技术做交换，颠覆贝尔实验室在60、70年代发明的电路交换技术。2007年，黄晓庆被中国移动请回国，担任中国移动研究院院长。2011年，黄晓庆在斯坦福遇到一位教授生物工程系教授，带着某种“上帝视角”的宏观感的架构师出身的他，“顿悟”到云端机器人大脑的可行性——因为网络的延迟，已经逐渐降到了人类感知不到的程度。2015年，达闼科技成立。“既然要做云端机器人，英文就叫Cloudminds。中文“达闼”音译自“Data”。除了‘数据’，它还是《星际迷航》里一个机器人的名字。‘闼’，最开始我也不认识，跑去查字典，发现是‘推门而入’的意思。这个寓意太好了，马到成功。”</p>\n<p>做达闼之前，黄晓庆许了一个宏愿。他要做的事，和所有人工智能从业者都不是竞争关系。他心中的局，更像一个行业托举者，瞄准的是未来人机世界的大规则。</p>\n<p>达达马蹄，郑愁予听到的是江南烟雨过客，而黄晓庆听到的是服务机器人的脚步声。“水渺茫而法白，山排闼以争前”，而黄晓庆眼中的达闼科技，显然不止于争前，而是要在他人觉前方渺茫不知所向时，引领一时风骚——做云端智能的基础架构。这般使命感，来自于他的相信。<br>“作为人类必须承认：宇宙法则有可能是被设计的。你瞧，一个粒子里面的结构，和一个星系的结构，基本是一样的，多神奇。造物者早把这个东西给搞明白了，他告诉我们世界就是这个样子，你得‘信’。”<br>当然，如果只是相信，黄晓庆或许也只能”用美丽的雪花”，“在凄凉的大地”，“用孩子的笔体”去写下“相信未来”，而不能以一名工程师的身份，用代码造就一个真实的未来。<br>“哲学家认为自己就是上帝，没有必要去讨论别的事；数学家们想反抗上帝；物理学家想学习上帝；生物学家从某种意义上讲想造上帝的反，要摆脱伊甸园……工程师说都不用，我们再造一个。”<br>正是基于类似的理念，15年前，“旨在通过真实项目实践培养学生的创新能力、实践精神和综合素质”的Dian团队才会诞生在喻家山下——因为相信真实项目实践能够培养人，因为真真正正地主动实践着。而2010年与Dian团队结缘的黄晓庆，兴奋，激动，因为“有组织的优秀学生联合在一起创新是一种很了不起的现象”。</p>\n<p>2016年9月，刘玉老师带领Dian团队队员前往深圳参加点石论坛，黄晓庆作为Dian团队导师上台演讲，谈宇宙之恢弘，论云端之架构，台下新老队员听得入神，深受启发。论坛上刘玉老师笑称曾邀请黄晓庆担任我校电信学院院长。不承想一语中的。今年八月底，黄晓庆即将就任电信学院院长的消息似平地惊雷，振奋人心。在非正式的就职演说中，黄晓庆提到，“我们要把华科大变成中国的斯坦福”。这一愿景，与刘玉老师的想法不谋而合。<br>而这一愿景，也仰仗于所有Dian团队队员团结协作，夺命狂奔，以不负“有组织的优秀学生联合在一起创新”。<br>战略战术上，黄晓庆提了三点想法。一是成立人工智能交叉科学研究中心（The Cross Science Research Center Of Artificial Intelligence）。黄晓庆强调，“要尽快成立，抢占先机”。二是教育改革。黄晓庆列举了诸如清华施一公、姚期智等几个“标杆”式教改做法，以供考察借鉴。三是拥抱互联网。要借助互联网的力量，邀请世界级的大师网上授课。<br>此次主旨演讲，Dian团队现任队长严子怡在问答环节中第一个向黄晓庆发问：在工程应用领域有着多年积淀的Dian团队，在人工智能时代下如何寻求新的发展之路？黄晓庆表示，如果对深度学习很了解，可以解决很多很重要的问题。他可以为团队提供平台、传感器，甚至机器人。刘玉老师则勉励队员们，应加强自身学习，以应对机会与挑战。</p>\n<p>诸葛孔明曾作《出师表》，言“然侍卫之臣不懈于内，忠志之士忘身于外者”。拳拳赤子心，莫如黄晓庆——黄晓庆在接受媒体采访时曾说过：“我2006年决定回国加入中国移动，我很多好朋友说你疯了，凭我对你的了解，你在体制内绝对混不过6个月，要不你被炒鱿鱼，要不你受不了走了，他说你是个自由主义者，独立思考者，又不会拍马屁。可在任何时候，我相信一点：诚心会感动人。我在中国移动，很多人就很包容我，他们说这小子不是瞎忽悠的，他放弃了国外的高薪回来了，每天干这个事儿，每天干到11点，他不是在那里花天酒地，他不是在瞎胡闹。”<br>现如今，黄晓庆以”分身之术“回到母校，“希望在我领导的电信学院之下，所有同仁由我带头，成为我们华中科技大学深化教育改革的急先锋”，此番气魄，尤若要在迷航中向最亮处摸索，在星际中留下浓墨重彩的一道轨迹。此等胸怀，“中国梦”与“奇点梦”交相辉映，是为民族长河中又一波浪潮中的一朵热烈的浪花。而这浪花，由汗水结成——仅此次十月中旬来校，黄晓庆每日刺促不休，会领导见教授，寻经验谈发展。“实干兴邦”，盒饭也香——为了能在有限的时间内更快地进入院长的工作状态，黄晓庆干脆在工作之中就地吃盒饭，十足的创业者姿态！</p>\n<p>“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”。<br>而这位创业者新主帅，又将带领深耕创新创业的Dian团队，步入怎样的时代？我们期待着。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编者按：黄晓庆，Dian团队导师，达闼科技创始人兼CEO，前中国移动研究院院长，“千人计划”国家特聘专家。1982年毕业于华中科技大学电信系。2017年8月，就任华中科技大学电子信息与通信学院院长。</p>\n<p>“人类最重要的使命，就是摆脱太阳系的束缚。”作为星际迷航的铁杆粉丝，黄晓庆几乎每次演讲，都会观宇宙浩荡而天马行空，论科技浪潮而挥斥方遒。这一次也无例外——2017年10月15日晚，已经担任Dian团队7年兼职导师的著名通信和人工智能专家黄晓庆（Bill Huang），以团队新领军的身份，出现在全体队员面前作主旨演讲，到场聆听的还有“点石创校”学员。<br>此次主旨演讲由已退休交棒的Dian团队创始人刘玉老师主持。刘老师回忆，黄晓庆与Dian团队的缘分，要追溯到2010年启明学院落成之时。彼时，喜择交良友的刘玉老师邀请黄晓庆担任Dian团队导师，此后黄晓庆作为兼职导师，给Dian团队带来了诸多资源。刘老师强调，“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”，Dian团队的28位顾问，给行路中的Dian团队指明了“绿洲”的方向——创新创业。随后刘玉老师正式宣布，Dian团队导师黄晓庆成为新主帅，邀请其作主旨演讲。全场掌声雷动，经久不息。</p>\n<p>这是一个新的时代。所有人都在瞩目着。<br>“科学把我们带到了一个特别重要的历史局面，这就是第四次工业革命，也许是我们人类前所未见的科学的爆发点，就在未来五十年左右。那这个点是什么？我们叫做“奇点”。我们从事信息科学的可能最美妙的一个梦想就是，我们人类有可能在未来三十年到五十年有可能做出在智能水平上达到甚至超过人类的机器。” 黄晓庆对于人工智能引发第四次工业革命的信心，令人印象深刻——而这显然来自于他对科技创新的深刻洞见与卓越的工程实践能力。“创新就是 Unseat the establishment”，“要有一种挑战传统，挑战权威者，挑战主流的勇气”，在美国这叫 “Cowboy Spirit”，也是我们时代最需要的精神。勇气是为其一，其二是要有“能够挑战传统、权威的能力和水平”。而能力，来自于学习，来自于努力。黄晓庆以亲身经历说法，“不懂英语没法搞国际化”，“管理是科学，是人文的物理学。越是被管理的人，越需要知道你是怎么被管理的”，“现在懂TensorFlow，相当于30年前懂Unix和C语言”。谈及Dian团队未来的发展方向，七年前黄晓庆指向了“拥抱移动互联网”，而现在，业已身为达闼科技创始人兼CEO的黄晓庆，则毫不犹豫地选定了人工智能。<br>从图灵到DeepMind，从飞机到神经网络，从生物细胞到计算机网络，黄晓庆化身“科技史学家”、“生物学家”、“计算机科学家”，带领所有听众遨游了人工智能的过去、现在与将来。而无线电通信专业出身的黄晓庆，亦颇有洞见地指出：5G技术将推动人工智能与机器人的发展，云端机器人网络流量将是人类的100倍左右。</p>\n<p>1982年，作为“全武汉第一个留美的自费留学生”，黄晓庆只身一人去了美国。1982年6月，黄晓庆成了美国伊利诺斯州立大学研究生院第一个中国大陆来的学生。1997年，黄晓庆在UT斯达康内部创业，想做全世界最伟大的软交换的移动交换机——用IP技术做交换，颠覆贝尔实验室在60、70年代发明的电路交换技术。2007年，黄晓庆被中国移动请回国，担任中国移动研究院院长。2011年，黄晓庆在斯坦福遇到一位教授生物工程系教授，带着某种“上帝视角”的宏观感的架构师出身的他，“顿悟”到云端机器人大脑的可行性——因为网络的延迟，已经逐渐降到了人类感知不到的程度。2015年，达闼科技成立。“既然要做云端机器人，英文就叫Cloudminds。中文“达闼”音译自“Data”。除了‘数据’，它还是《星际迷航》里一个机器人的名字。‘闼’，最开始我也不认识，跑去查字典，发现是‘推门而入’的意思。这个寓意太好了，马到成功。”</p>\n<p>做达闼之前，黄晓庆许了一个宏愿。他要做的事，和所有人工智能从业者都不是竞争关系。他心中的局，更像一个行业托举者，瞄准的是未来人机世界的大规则。</p>\n<p>达达马蹄，郑愁予听到的是江南烟雨过客，而黄晓庆听到的是服务机器人的脚步声。“水渺茫而法白，山排闼以争前”，而黄晓庆眼中的达闼科技，显然不止于争前，而是要在他人觉前方渺茫不知所向时，引领一时风骚——做云端智能的基础架构。这般使命感，来自于他的相信。<br>“作为人类必须承认：宇宙法则有可能是被设计的。你瞧，一个粒子里面的结构，和一个星系的结构，基本是一样的，多神奇。造物者早把这个东西给搞明白了，他告诉我们世界就是这个样子，你得‘信’。”<br>当然，如果只是相信，黄晓庆或许也只能”用美丽的雪花”，“在凄凉的大地”，“用孩子的笔体”去写下“相信未来”，而不能以一名工程师的身份，用代码造就一个真实的未来。<br>“哲学家认为自己就是上帝，没有必要去讨论别的事；数学家们想反抗上帝；物理学家想学习上帝；生物学家从某种意义上讲想造上帝的反，要摆脱伊甸园……工程师说都不用，我们再造一个。”<br>正是基于类似的理念，15年前，“旨在通过真实项目实践培养学生的创新能力、实践精神和综合素质”的Dian团队才会诞生在喻家山下——因为相信真实项目实践能够培养人，因为真真正正地主动实践着。而2010年与Dian团队结缘的黄晓庆，兴奋，激动，因为“有组织的优秀学生联合在一起创新是一种很了不起的现象”。</p>\n<p>2016年9月，刘玉老师带领Dian团队队员前往深圳参加点石论坛，黄晓庆作为Dian团队导师上台演讲，谈宇宙之恢弘，论云端之架构，台下新老队员听得入神，深受启发。论坛上刘玉老师笑称曾邀请黄晓庆担任我校电信学院院长。不承想一语中的。今年八月底，黄晓庆即将就任电信学院院长的消息似平地惊雷，振奋人心。在非正式的就职演说中，黄晓庆提到，“我们要把华科大变成中国的斯坦福”。这一愿景，与刘玉老师的想法不谋而合。<br>而这一愿景，也仰仗于所有Dian团队队员团结协作，夺命狂奔，以不负“有组织的优秀学生联合在一起创新”。<br>战略战术上，黄晓庆提了三点想法。一是成立人工智能交叉科学研究中心（The Cross Science Research Center Of Artificial Intelligence）。黄晓庆强调，“要尽快成立，抢占先机”。二是教育改革。黄晓庆列举了诸如清华施一公、姚期智等几个“标杆”式教改做法，以供考察借鉴。三是拥抱互联网。要借助互联网的力量，邀请世界级的大师网上授课。<br>此次主旨演讲，Dian团队现任队长严子怡在问答环节中第一个向黄晓庆发问：在工程应用领域有着多年积淀的Dian团队，在人工智能时代下如何寻求新的发展之路？黄晓庆表示，如果对深度学习很了解，可以解决很多很重要的问题。他可以为团队提供平台、传感器，甚至机器人。刘玉老师则勉励队员们，应加强自身学习，以应对机会与挑战。</p>\n<p>诸葛孔明曾作《出师表》，言“然侍卫之臣不懈于内，忠志之士忘身于外者”。拳拳赤子心，莫如黄晓庆——黄晓庆在接受媒体采访时曾说过：“我2006年决定回国加入中国移动，我很多好朋友说你疯了，凭我对你的了解，你在体制内绝对混不过6个月，要不你被炒鱿鱼，要不你受不了走了，他说你是个自由主义者，独立思考者，又不会拍马屁。可在任何时候，我相信一点：诚心会感动人。我在中国移动，很多人就很包容我，他们说这小子不是瞎忽悠的，他放弃了国外的高薪回来了，每天干这个事儿，每天干到11点，他不是在那里花天酒地，他不是在瞎胡闹。”<br>现如今，黄晓庆以”分身之术“回到母校，“希望在我领导的电信学院之下，所有同仁由我带头，成为我们华中科技大学深化教育改革的急先锋”，此番气魄，尤若要在迷航中向最亮处摸索，在星际中留下浓墨重彩的一道轨迹。此等胸怀，“中国梦”与“奇点梦”交相辉映，是为民族长河中又一波浪潮中的一朵热烈的浪花。而这浪花，由汗水结成——仅此次十月中旬来校，黄晓庆每日刺促不休，会领导见教授，寻经验谈发展。“实干兴邦”，盒饭也香——为了能在有限的时间内更快地进入院长的工作状态，黄晓庆干脆在工作之中就地吃盒饭，十足的创业者姿态！</p>\n<p>“一个团队的格局是领军的格局决定的，一个团队的高度是领军的高度决定的”。<br>而这位创业者新主帅，又将带领深耕创新创业的Dian团队，步入怎样的时代？我们期待着。</p>\n"},{"date":"2017-08-17T02:52:55.000Z","status":"public","title":"让神哭泣-评《The Interview》","keywords":["社交网络","脸书","电影"],"_content":"# PHP是世界上最好的语言\n\n# 电影资源下载\n[百度网盘](http://pan.baidu.com/s/1qY8tjE8)","source":"_posts/让神哭泣-评《The Interview》.md","raw":"---\ndate: 2017-08-17 10:52:55\nstatus: public\ntitle: 让神哭泣-评《The Interview》\nkeywords: \n- 社交网络\n- 脸书\n- 电影\ntags: \n- 影评\ncategories: \n- 交流园地 \n---\n# PHP是世界上最好的语言\n\n# 电影资源下载\n[百度网盘](http://pan.baidu.com/s/1qY8tjE8)","slug":"让神哭泣-评《The Interview》","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8c40032c4xknpaaxyql","content":"<h1 id=\"PHP是世界上最好的语言\"><a href=\"#PHP是世界上最好的语言\" class=\"headerlink\" title=\"PHP是世界上最好的语言\"></a>PHP是世界上最好的语言</h1><h1 id=\"电影资源下载\"><a href=\"#电影资源下载\" class=\"headerlink\" title=\"电影资源下载\"></a>电影资源下载</h1><p><a href=\"http://pan.baidu.com/s/1qY8tjE8\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PHP是世界上最好的语言\"><a href=\"#PHP是世界上最好的语言\" class=\"headerlink\" title=\"PHP是世界上最好的语言\"></a>PHP是世界上最好的语言</h1><h1 id=\"电影资源下载\"><a href=\"#电影资源下载\" class=\"headerlink\" title=\"电影资源下载\"></a>电影资源下载</h1><p><a href=\"http://pan.baidu.com/s/1qY8tjE8\" target=\"_blank\" rel=\"noopener\">百度网盘</a></p>\n"},{"date":"2019-02-26T14:10:00.000Z","status":"public","title":"抖音用户关键字搜索抓包数据分析脚本使用指南","keywords":["抖音","爬虫","教程","抓包"],"_content":"\n## 说明\n参考本指南，可以通过在手机抖音APP上搜索用户，从而导出这些用户的**联系方式**、抖音ID、抖音uid、个性签名、昵称等信息。\n\n## 工具清单\n- 一台Mac OS或者Windows电脑，须安装\n    - charles\n    - python\n- 一台安卓或者苹果手机（苹果手机未经测试），须安装\n    - 抖音\n\n## 步骤\n### 1. 准备工作\n- ✅ 确保电脑已安装charles和python，手机已安装charles证书。具体步骤请参考[charles设置](#charles设置)\n- 打开电脑，确保与手机连接的是同一个无线网络；\n- 打开charles软件和cmd窗口（mac用户请自觉使用terminal），确保charles已经开始抓包\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-22-47.png)\n\n### 2. 找到电脑的IP地址和端口\n依次按下图操作\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-18-27.png)\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-19-19.png)\n\n### 3. 确保手机与电脑建立连接\n打开手机的WLAN设置，进入当前已连接网络的高级选项设置，将代理设置为手动，主机ip设置为第2步最后一图所得到的ip地址（并确保端口号设置为8888）\n\n操作顺序：手机设置->wifi网络长按->更多高级->设置IP、端口。\n\n**代理设置成功后，电脑端charles可能弹出窗口说有设备连接，此时请点击Allow允许你的手机连接charles代理。**\n\n### 4. 抖音搜索关键词\n打开抖音，选择城市，然后搜索给到的关键词，不断地滑动用户列表，直至抖音APP显示没有更多结果，即完成该关键词的搜索。\n\n### 5. 抓包数据导出\n\n在charles中，一般需要导出两份数据，参考下图。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-30-26.png)\n\n找到这两个域名后，然后分别右键点击，按下图完成数据导出。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-31-39.png)\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-34-30.png)\n\n### 6. 提取用户信息\n假定你的工作目录是\"`C:/Users/baixing`\"。\n\n打开前面已经打开的cmd窗口，确保当前处于工作目录。\n\n输入如下命令：`python douyin.py`\n\n接下来参考提示信息即可。\n\n## 更新脚本\n\n下载[抖音用户关键字搜索抓包数据分析脚本](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/scripts/douyin.py)到本地工作目录。（打开链接后Ctrl+S即可）\n\n如果下载时无法选择该目录，可以先下载到其他文件夹，然后复制该文件，通过 【我的电脑】->【C盘】-> 【用户】-> 【baixing】进入到工作目录文件夹，粘贴文件即可。\n\n## charles设置\n1. 到官网下载charles。可试用30天，如需更长使用时间，请参考[charles注册码](https://github.com/Danceiny/WikiNotes/issues/3#issue-414513334)注册。\n2. 为避免本机的请求数据干扰，可以禁止本机代理，参考下图（windows设备的相应选项是`windows`）。还可以到 【proxy】-> 【proxy settings】-> 【mac os】，去掉几个enable的勾选。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_22-51-51.png)\n3. 为开启https的抓包，须到【proxy】-> 【ssl proxy settings】-> 【ssl proxying】，点击【Add】，Host填`*`，port填`443`。如下所示\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_23-05-55.png)\n4. 手机需要安装charles的ssl证书才能通过代理访问外网。因此，在手机连上charles代理后，请使用浏览器（最好是chrome浏览器，其他浏览器可能存在风险，依手机机型而有差异）打开网址`chls.pro/ssl`，下载证书后安装即可（证书命名可随意）。","source":"_posts/抖音用户关键字搜索抓包数据分析脚本使用指南.md","raw":"---\ndate: 2019-02-26 22:10\nstatus: public\ntitle: 抖音用户关键字搜索抓包数据分析脚本使用指南\nkeywords: \n- 抖音\n- 爬虫\n- 教程\n- 抓包\ntags: \n- C语言\n- 入门\ncategories: 教程\n---\n\n## 说明\n参考本指南，可以通过在手机抖音APP上搜索用户，从而导出这些用户的**联系方式**、抖音ID、抖音uid、个性签名、昵称等信息。\n\n## 工具清单\n- 一台Mac OS或者Windows电脑，须安装\n    - charles\n    - python\n- 一台安卓或者苹果手机（苹果手机未经测试），须安装\n    - 抖音\n\n## 步骤\n### 1. 准备工作\n- ✅ 确保电脑已安装charles和python，手机已安装charles证书。具体步骤请参考[charles设置](#charles设置)\n- 打开电脑，确保与手机连接的是同一个无线网络；\n- 打开charles软件和cmd窗口（mac用户请自觉使用terminal），确保charles已经开始抓包\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-22-47.png)\n\n### 2. 找到电脑的IP地址和端口\n依次按下图操作\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-18-27.png)\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-19-19.png)\n\n### 3. 确保手机与电脑建立连接\n打开手机的WLAN设置，进入当前已连接网络的高级选项设置，将代理设置为手动，主机ip设置为第2步最后一图所得到的ip地址（并确保端口号设置为8888）\n\n操作顺序：手机设置->wifi网络长按->更多高级->设置IP、端口。\n\n**代理设置成功后，电脑端charles可能弹出窗口说有设备连接，此时请点击Allow允许你的手机连接charles代理。**\n\n### 4. 抖音搜索关键词\n打开抖音，选择城市，然后搜索给到的关键词，不断地滑动用户列表，直至抖音APP显示没有更多结果，即完成该关键词的搜索。\n\n### 5. 抓包数据导出\n\n在charles中，一般需要导出两份数据，参考下图。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-30-26.png)\n\n找到这两个域名后，然后分别右键点击，按下图完成数据导出。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-31-39.png)\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-34-30.png)\n\n### 6. 提取用户信息\n假定你的工作目录是\"`C:/Users/baixing`\"。\n\n打开前面已经打开的cmd窗口，确保当前处于工作目录。\n\n输入如下命令：`python douyin.py`\n\n接下来参考提示信息即可。\n\n## 更新脚本\n\n下载[抖音用户关键字搜索抓包数据分析脚本](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/scripts/douyin.py)到本地工作目录。（打开链接后Ctrl+S即可）\n\n如果下载时无法选择该目录，可以先下载到其他文件夹，然后复制该文件，通过 【我的电脑】->【C盘】-> 【用户】-> 【baixing】进入到工作目录文件夹，粘贴文件即可。\n\n## charles设置\n1. 到官网下载charles。可试用30天，如需更长使用时间，请参考[charles注册码](https://github.com/Danceiny/WikiNotes/issues/3#issue-414513334)注册。\n2. 为避免本机的请求数据干扰，可以禁止本机代理，参考下图（windows设备的相应选项是`windows`）。还可以到 【proxy】-> 【proxy settings】-> 【mac os】，去掉几个enable的勾选。\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_22-51-51.png)\n3. 为开启https的抓包，须到【proxy】-> 【ssl proxy settings】-> 【ssl proxying】，点击【Add】，Host填`*`，port填`443`。如下所示\n![](https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_23-05-55.png)\n4. 手机需要安装charles的ssl证书才能通过代理访问外网。因此，在手机连上charles代理后，请使用浏览器（最好是chrome浏览器，其他浏览器可能存在风险，依手机机型而有差异）打开网址`chls.pro/ssl`，下载证书后安装即可（证书命名可随意）。","slug":"抖音用户关键字搜索抓包数据分析脚本使用指南","published":1,"updated":"2019-02-27T13:22:35.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsn9a8c50035c4xko05ep7bi","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>参考本指南，可以通过在手机抖音APP上搜索用户，从而导出这些用户的<strong>联系方式</strong>、抖音ID、抖音uid、个性签名、昵称等信息。</p>\n<h2 id=\"工具清单\"><a href=\"#工具清单\" class=\"headerlink\" title=\"工具清单\"></a>工具清单</h2><ul>\n<li>一台Mac OS或者Windows电脑，须安装<ul>\n<li>charles</li>\n<li>python</li>\n</ul>\n</li>\n<li>一台安卓或者苹果手机（苹果手机未经测试），须安装<ul>\n<li>抖音</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ul>\n<li>✅ 确保电脑已安装charles和python，手机已安装charles证书。具体步骤请参考<a href=\"#charles设置\">charles设置</a></li>\n<li>打开电脑，确保与手机连接的是同一个无线网络；</li>\n<li>打开charles软件和cmd窗口（mac用户请自觉使用terminal），确保charles已经开始抓包<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-22-47.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"2-找到电脑的IP地址和端口\"><a href=\"#2-找到电脑的IP地址和端口\" class=\"headerlink\" title=\"2. 找到电脑的IP地址和端口\"></a>2. 找到电脑的IP地址和端口</h3><p>依次按下图操作<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-18-27.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-19-19.png\" alt=\"\"></p>\n<h3 id=\"3-确保手机与电脑建立连接\"><a href=\"#3-确保手机与电脑建立连接\" class=\"headerlink\" title=\"3. 确保手机与电脑建立连接\"></a>3. 确保手机与电脑建立连接</h3><p>打开手机的WLAN设置，进入当前已连接网络的高级选项设置，将代理设置为手动，主机ip设置为第2步最后一图所得到的ip地址（并确保端口号设置为8888）</p>\n<p>操作顺序：手机设置-&gt;wifi网络长按-&gt;更多高级-&gt;设置IP、端口。</p>\n<p><strong>代理设置成功后，电脑端charles可能弹出窗口说有设备连接，此时请点击Allow允许你的手机连接charles代理。</strong></p>\n<h3 id=\"4-抖音搜索关键词\"><a href=\"#4-抖音搜索关键词\" class=\"headerlink\" title=\"4. 抖音搜索关键词\"></a>4. 抖音搜索关键词</h3><p>打开抖音，选择城市，然后搜索给到的关键词，不断地滑动用户列表，直至抖音APP显示没有更多结果，即完成该关键词的搜索。</p>\n<h3 id=\"5-抓包数据导出\"><a href=\"#5-抓包数据导出\" class=\"headerlink\" title=\"5. 抓包数据导出\"></a>5. 抓包数据导出</h3><p>在charles中，一般需要导出两份数据，参考下图。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-30-26.png\" alt=\"\"></p>\n<p>找到这两个域名后，然后分别右键点击，按下图完成数据导出。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-31-39.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-34-30.png\" alt=\"\"></p>\n<h3 id=\"6-提取用户信息\"><a href=\"#6-提取用户信息\" class=\"headerlink\" title=\"6. 提取用户信息\"></a>6. 提取用户信息</h3><p>假定你的工作目录是”<code>C:/Users/baixing</code>“。</p>\n<p>打开前面已经打开的cmd窗口，确保当前处于工作目录。</p>\n<p>输入如下命令：<code>python douyin.py</code></p>\n<p>接下来参考提示信息即可。</p>\n<h2 id=\"更新脚本\"><a href=\"#更新脚本\" class=\"headerlink\" title=\"更新脚本\"></a>更新脚本</h2><p>下载<a href=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/scripts/douyin.py\" target=\"_blank\" rel=\"noopener\">抖音用户关键字搜索抓包数据分析脚本</a>到本地工作目录。（打开链接后Ctrl+S即可）</p>\n<p>如果下载时无法选择该目录，可以先下载到其他文件夹，然后复制该文件，通过 【我的电脑】-&gt;【C盘】-&gt; 【用户】-&gt; 【baixing】进入到工作目录文件夹，粘贴文件即可。</p>\n<h2 id=\"charles设置\"><a href=\"#charles设置\" class=\"headerlink\" title=\"charles设置\"></a>charles设置</h2><ol>\n<li>到官网下载charles。可试用30天，如需更长使用时间，请参考<a href=\"https://github.com/Danceiny/WikiNotes/issues/3#issue-414513334\" target=\"_blank\" rel=\"noopener\">charles注册码</a>注册。</li>\n<li>为避免本机的请求数据干扰，可以禁止本机代理，参考下图（windows设备的相应选项是<code>windows</code>）。还可以到 【proxy】-&gt; 【proxy settings】-&gt; 【mac os】，去掉几个enable的勾选。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_22-51-51.png\" alt=\"\"></li>\n<li>为开启https的抓包，须到【proxy】-&gt; 【ssl proxy settings】-&gt; 【ssl proxying】，点击【Add】，Host填<code>*</code>，port填<code>443</code>。如下所示<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_23-05-55.png\" alt=\"\"></li>\n<li>手机需要安装charles的ssl证书才能通过代理访问外网。因此，在手机连上charles代理后，请使用浏览器（最好是chrome浏览器，其他浏览器可能存在风险，依手机机型而有差异）打开网址<code>chls.pro/ssl</code>，下载证书后安装即可（证书命名可随意）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>参考本指南，可以通过在手机抖音APP上搜索用户，从而导出这些用户的<strong>联系方式</strong>、抖音ID、抖音uid、个性签名、昵称等信息。</p>\n<h2 id=\"工具清单\"><a href=\"#工具清单\" class=\"headerlink\" title=\"工具清单\"></a>工具清单</h2><ul>\n<li>一台Mac OS或者Windows电脑，须安装<ul>\n<li>charles</li>\n<li>python</li>\n</ul>\n</li>\n<li>一台安卓或者苹果手机（苹果手机未经测试），须安装<ul>\n<li>抖音</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ul>\n<li>✅ 确保电脑已安装charles和python，手机已安装charles证书。具体步骤请参考<a href=\"#charles设置\">charles设置</a></li>\n<li>打开电脑，确保与手机连接的是同一个无线网络；</li>\n<li>打开charles软件和cmd窗口（mac用户请自觉使用terminal），确保charles已经开始抓包<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-22-47.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"2-找到电脑的IP地址和端口\"><a href=\"#2-找到电脑的IP地址和端口\" class=\"headerlink\" title=\"2. 找到电脑的IP地址和端口\"></a>2. 找到电脑的IP地址和端口</h3><p>依次按下图操作<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-18-27.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-19-19.png\" alt=\"\"></p>\n<h3 id=\"3-确保手机与电脑建立连接\"><a href=\"#3-确保手机与电脑建立连接\" class=\"headerlink\" title=\"3. 确保手机与电脑建立连接\"></a>3. 确保手机与电脑建立连接</h3><p>打开手机的WLAN设置，进入当前已连接网络的高级选项设置，将代理设置为手动，主机ip设置为第2步最后一图所得到的ip地址（并确保端口号设置为8888）</p>\n<p>操作顺序：手机设置-&gt;wifi网络长按-&gt;更多高级-&gt;设置IP、端口。</p>\n<p><strong>代理设置成功后，电脑端charles可能弹出窗口说有设备连接，此时请点击Allow允许你的手机连接charles代理。</strong></p>\n<h3 id=\"4-抖音搜索关键词\"><a href=\"#4-抖音搜索关键词\" class=\"headerlink\" title=\"4. 抖音搜索关键词\"></a>4. 抖音搜索关键词</h3><p>打开抖音，选择城市，然后搜索给到的关键词，不断地滑动用户列表，直至抖音APP显示没有更多结果，即完成该关键词的搜索。</p>\n<h3 id=\"5-抓包数据导出\"><a href=\"#5-抓包数据导出\" class=\"headerlink\" title=\"5. 抓包数据导出\"></a>5. 抓包数据导出</h3><p>在charles中，一般需要导出两份数据，参考下图。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-30-26.png\" alt=\"\"></p>\n<p>找到这两个域名后，然后分别右键点击，按下图完成数据导出。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-31-39.png\" alt=\"\"><br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-22_13-34-30.png\" alt=\"\"></p>\n<h3 id=\"6-提取用户信息\"><a href=\"#6-提取用户信息\" class=\"headerlink\" title=\"6. 提取用户信息\"></a>6. 提取用户信息</h3><p>假定你的工作目录是”<code>C:/Users/baixing</code>“。</p>\n<p>打开前面已经打开的cmd窗口，确保当前处于工作目录。</p>\n<p>输入如下命令：<code>python douyin.py</code></p>\n<p>接下来参考提示信息即可。</p>\n<h2 id=\"更新脚本\"><a href=\"#更新脚本\" class=\"headerlink\" title=\"更新脚本\"></a>更新脚本</h2><p>下载<a href=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/scripts/douyin.py\" target=\"_blank\" rel=\"noopener\">抖音用户关键字搜索抓包数据分析脚本</a>到本地工作目录。（打开链接后Ctrl+S即可）</p>\n<p>如果下载时无法选择该目录，可以先下载到其他文件夹，然后复制该文件，通过 【我的电脑】-&gt;【C盘】-&gt; 【用户】-&gt; 【baixing】进入到工作目录文件夹，粘贴文件即可。</p>\n<h2 id=\"charles设置\"><a href=\"#charles设置\" class=\"headerlink\" title=\"charles设置\"></a>charles设置</h2><ol>\n<li>到官网下载charles。可试用30天，如需更长使用时间，请参考<a href=\"https://github.com/Danceiny/WikiNotes/issues/3#issue-414513334\" target=\"_blank\" rel=\"noopener\">charles注册码</a>注册。</li>\n<li>为避免本机的请求数据干扰，可以禁止本机代理，参考下图（windows设备的相应选项是<code>windows</code>）。还可以到 【proxy】-&gt; 【proxy settings】-&gt; 【mac os】，去掉几个enable的勾选。<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_22-51-51.png\" alt=\"\"></li>\n<li>为开启https的抓包，须到【proxy】-&gt; 【ssl proxy settings】-&gt; 【ssl proxying】，点击【Add】，Host填<code>*</code>，port填<code>443</code>。如下所示<br><img src=\"https://raw.githubusercontent.com/Danceiny/baixing-helper/master/imgs/Snipaste_2019-02-26_23-05-55.png\" alt=\"\"></li>\n<li>手机需要安装charles的ssl证书才能通过代理访问外网。因此，在手机连上charles代理后，请使用浏览器（最好是chrome浏览器，其他浏览器可能存在风险，依手机机型而有差异）打开网址<code>chls.pro/ssl</code>，下载证书后安装即可（证书命名可随意）。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsn9a89k0002c4xk8qlofmdb","category_id":"cjsn9a89q0004c4xkvbvwpa28","_id":"cjsn9a8a0000dc4xkv6ucmyai"},{"post_id":"cjsn9a89w0008c4xku9b4ik7d","category_id":"cjsn9a89q0004c4xkvbvwpa28","_id":"cjsn9a8a4000hc4xkb8buywea"},{"post_id":"cjsn9a89o0003c4xke7kwfr6i","category_id":"cjsn9a89x0009c4xktc9hmrfc","_id":"cjsn9a8a6000mc4xki2cjf9g6"},{"post_id":"cjsn9a89s0006c4xk7n3criq1","category_id":"cjsn9a89q0004c4xkvbvwpa28","_id":"cjsn9a8a9000qc4xkc2cea1kr"},{"post_id":"cjsn9a8a2000gc4xk4jne86mq","category_id":"cjsn9a8a9000sc4xkgy7x7nqw","_id":"cjsn9a8ah0014c4xkwplw8u84"},{"post_id":"cjsn9a8ac000zc4xkahe5gvxc","category_id":"cjsn9a8a9000sc4xkgy7x7nqw","_id":"cjsn9a8ak0019c4xkhofb3of4"},{"post_id":"cjsn9a8a4000jc4xksgs4anih","category_id":"cjsn9a8ac000yc4xkxb8acbld","_id":"cjsn9a8al001cc4xksliezrkc"},{"post_id":"cjsn9a8a6000oc4xkkz8sqxr2","category_id":"cjsn9a8ai0016c4xkicb1s776","_id":"cjsn9a8am001fc4xkkm7qy8i1"},{"post_id":"cjsn9a8a8000pc4xkomw4g0l8","category_id":"cjsn9a8ai0016c4xkicb1s776","_id":"cjsn9a8ap001oc4xku3sf346m"},{"post_id":"cjsn9a8ah0015c4xkrhxlbiob","category_id":"cjsn9a8a5000lc4xkxsnc5pud","_id":"cjsn9a8ap001qc4xkmftvnzwb"},{"post_id":"cjsn9a8ah0015c4xkrhxlbiob","category_id":"cjsn9a8am001dc4xkumfw702t","_id":"cjsn9a8aq001sc4xkm3xlcnoi"},{"post_id":"cjsn9a8aj0018c4xkahglcihx","category_id":"cjsn9a8ao001nc4xkanyszhht","_id":"cjsn9a8aq001uc4xkcsug57vx"},{"post_id":"cjsn9a8al001bc4xki9veefo5","category_id":"cjsn9a8ap001rc4xkyo38aerp","_id":"cjsn9a8ar001xc4xkke9au9rn"},{"post_id":"cjsn9a89x000bc4xk4docmdyh","category_id":"cjsn9a8a5000lc4xkxsnc5pud","_id":"cjsn9a8ar0021c4xknpe6gbcq"},{"post_id":"cjsn9a89x000bc4xk4docmdyh","category_id":"cjsn9a8am001dc4xkumfw702t","_id":"cjsn9a8as0023c4xk29k7dbmh"},{"post_id":"cjsn9a89x000bc4xk4docmdyh","category_id":"cjsn9a8aq001vc4xkjko78mj7","_id":"cjsn9a8as0026c4xkugnvrt3r"},{"post_id":"cjsn9a8by002wc4xkflnre7su","category_id":"cjsn9a8ac000yc4xkxb8acbld","_id":"cjsn9a8c40033c4xkjpx889us"},{"post_id":"cjsn9a8c40032c4xknpaaxyql","category_id":"cjsn9a8ac000yc4xkxb8acbld","_id":"cjsn9a8c70038c4xkkkp50paq"},{"post_id":"cjsn9a8c20031c4xkel6pdui4","category_id":"cjsn9a8c50034c4xkg71r1wbe","_id":"cjsn9a8c8003cc4xk5kyb6mj5"},{"post_id":"cjsn9a8c50035c4xko05ep7bi","category_id":"cjsn9a8c70039c4xkcefvta76","_id":"cjsn9a8c9003dc4xkwatzwcs2"}],"PostTag":[{"post_id":"cjsn9a89k0002c4xk8qlofmdb","tag_id":"cjsn9a89s0005c4xkm9spc6m8","_id":"cjsn9a8a4000ic4xk1yznds09"},{"post_id":"cjsn9a89k0002c4xk8qlofmdb","tag_id":"cjsn9a89x000ac4xk72rr6kbr","_id":"cjsn9a8a5000kc4xk0wygxsoh"},{"post_id":"cjsn9a89s0006c4xk7n3criq1","tag_id":"cjsn9a89s0005c4xkm9spc6m8","_id":"cjsn9a8aa000uc4xkjwfvo10q"},{"post_id":"cjsn9a89s0006c4xk7n3criq1","tag_id":"cjsn9a89x000ac4xk72rr6kbr","_id":"cjsn9a8ac000wc4xk46lj1n6o"},{"post_id":"cjsn9a89w0008c4xku9b4ik7d","tag_id":"cjsn9a89s0005c4xkm9spc6m8","_id":"cjsn9a8ae0010c4xkq6sa9c7u"},{"post_id":"cjsn9a89w0008c4xku9b4ik7d","tag_id":"cjsn9a89x000ac4xk72rr6kbr","_id":"cjsn9a8af0012c4xk0s73465j"},{"post_id":"cjsn9a89x000bc4xk4docmdyh","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8ai0017c4xk2luamjb8"},{"post_id":"cjsn9a8a2000gc4xk4jne86mq","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8an001hc4xkftou9p46"},{"post_id":"cjsn9a8a2000gc4xk4jne86mq","tag_id":"cjsn9a8ak001ac4xk4fn2saja","_id":"cjsn9a8an001ic4xkv5131zu8"},{"post_id":"cjsn9a8a4000jc4xksgs4anih","tag_id":"cjsn9a8am001ec4xkwn6g7gk0","_id":"cjsn9a8ao001lc4xk2d2v1974"},{"post_id":"cjsn9a8a6000oc4xkkz8sqxr2","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8ar001yc4xklxtjqcae"},{"post_id":"cjsn9a8a6000oc4xkkz8sqxr2","tag_id":"cjsn9a8ao001mc4xkgcihqp6r","_id":"cjsn9a8ar001zc4xkout11sl2"},{"post_id":"cjsn9a8a6000oc4xkkz8sqxr2","tag_id":"cjsn9a8ap001pc4xk1ltcndlo","_id":"cjsn9a8as0022c4xkpddrp7qj"},{"post_id":"cjsn9a8a6000oc4xkkz8sqxr2","tag_id":"cjsn9a8aq001tc4xkbrnj52y2","_id":"cjsn9a8as0024c4xkpl2b5vte"},{"post_id":"cjsn9a8a8000pc4xkomw4g0l8","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8at0029c4xkdvq71y7e"},{"post_id":"cjsn9a8a8000pc4xkomw4g0l8","tag_id":"cjsn9a8ao001mc4xkgcihqp6r","_id":"cjsn9a8at002ac4xkvbrksrq0"},{"post_id":"cjsn9a8a8000pc4xkomw4g0l8","tag_id":"cjsn9a8ap001pc4xk1ltcndlo","_id":"cjsn9a8at002cc4xkcg86z27y"},{"post_id":"cjsn9a8a8000pc4xkomw4g0l8","tag_id":"cjsn9a8aq001tc4xkbrnj52y2","_id":"cjsn9a8at002dc4xk1ghcsah7"},{"post_id":"cjsn9a8ac000zc4xkahe5gvxc","tag_id":"cjsn9a8at0028c4xkgdhoe46g","_id":"cjsn9a8au002gc4xk8xmxj8nt"},{"post_id":"cjsn9a8ac000zc4xkahe5gvxc","tag_id":"cjsn9a8at002bc4xkqyfv1z63","_id":"cjsn9a8au002hc4xk48v2fx75"},{"post_id":"cjsn9a8ac000zc4xkahe5gvxc","tag_id":"cjsn9a8at002ec4xk0rbouuy0","_id":"cjsn9a8au002jc4xkyupnsbd3"},{"post_id":"cjsn9a8ac000zc4xkahe5gvxc","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8au002kc4xkuzvaaoso"},{"post_id":"cjsn9a8ah0015c4xkrhxlbiob","tag_id":"cjsn9a8ac000xc4xkn1ah7e8w","_id":"cjsn9a8av002mc4xkqcfx1d55"},{"post_id":"cjsn9a8ah0015c4xkrhxlbiob","tag_id":"cjsn9a8au002fc4xkn2iqds43","_id":"cjsn9a8av002nc4xkdz77lntm"},{"post_id":"cjsn9a8ah0015c4xkrhxlbiob","tag_id":"cjsn9a8au002ic4xki2ozhp9z","_id":"cjsn9a8av002pc4xkimifqbrq"},{"post_id":"cjsn9a8aj0018c4xkahglcihx","tag_id":"cjsn9a8av002lc4xkjsxwpg5w","_id":"cjsn9a8aw002sc4xkqacp4ppa"},{"post_id":"cjsn9a8aj0018c4xkahglcihx","tag_id":"cjsn9a8av002oc4xko69r9yoi","_id":"cjsn9a8aw002tc4xkwga2g4wj"},{"post_id":"cjsn9a8aj0018c4xkahglcihx","tag_id":"cjsn9a8av002qc4xkrd1wxnv1","_id":"cjsn9a8aw002uc4xkc95sdu7u"},{"post_id":"cjsn9a8al001bc4xki9veefo5","tag_id":"cjsn9a8aw002rc4xksm5aqb22","_id":"cjsn9a8aw002vc4xku5np2p37"},{"post_id":"cjsn9a8c40032c4xknpaaxyql","tag_id":"cjsn9a8aw002rc4xksm5aqb22","_id":"cjsn9a8c60036c4xkab9mnjvv"},{"post_id":"cjsn9a8by002wc4xkflnre7su","tag_id":"cjsn9a8c20030c4xk3fia7wmu","_id":"cjsn9a8c70037c4xkucmj1z9j"},{"post_id":"cjsn9a8c50035c4xko05ep7bi","tag_id":"cjsn9a89s0005c4xkm9spc6m8","_id":"cjsn9a8c8003ac4xkeq6e8603"},{"post_id":"cjsn9a8c50035c4xko05ep7bi","tag_id":"cjsn9a89x000ac4xk72rr6kbr","_id":"cjsn9a8c8003bc4xk6ysbeziy"}],"Tag":[{"name":"C语言","_id":"cjsn9a89s0005c4xkm9spc6m8"},{"name":"入门","_id":"cjsn9a89x000ac4xk72rr6kbr"},{"name":"Python","_id":"cjsn9a8ac000xc4xkn1ah7e8w"},{"name":"面经","_id":"cjsn9a8ak001ac4xk4fn2saja"},{"name":"小说","_id":"cjsn9a8am001ec4xkwn6g7gk0"},{"name":"QQ","_id":"cjsn9a8ao001mc4xkgcihqp6r"},{"name":"聊天","_id":"cjsn9a8ap001pc4xk1ltcndlo"},{"name":"机器人","_id":"cjsn9a8aq001tc4xkbrnj52y2"},{"name":"桌面","_id":"cjsn9a8at0028c4xkgdhoe46g"},{"name":"Win10","_id":"cjsn9a8at002bc4xkqyfv1z63"},{"name":"Windows","_id":"cjsn9a8at002ec4xk0rbouuy0"},{"name":"flask","_id":"cjsn9a8au002fc4xkn2iqds43"},{"name":"Kafka","_id":"cjsn9a8au002ic4xki2ozhp9z"},{"name":"个人网站","_id":"cjsn9a8av002lc4xkjsxwpg5w"},{"name":"博客","_id":"cjsn9a8av002oc4xko69r9yoi"},{"name":"教程","_id":"cjsn9a8av002qc4xkrd1wxnv1"},{"name":"影评","_id":"cjsn9a8aw002rc4xksm5aqb22"},{"name":"交流园地","_id":"cjsn9a8c20030c4xk3fia7wmu"}]}}